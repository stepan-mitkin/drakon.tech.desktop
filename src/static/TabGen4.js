function TabGen4(dbName) {

var self = this

var gOps = {}
var gUndo = {}
var gState = {}
var gLinks = {}
var gExistingLinks = {}
var gCallback = null


var gLinkers = {}
var gUnlinkers = {}

this.state = gState
this.links = gLinks
this.nextId = 1


// Autogenerated with DRAKON Editor 1.32


function arrayAdd(action) {
    var field, id, index, row, tableName, value
    // item 845
    field = getMandatory(action, "field")
    index = getMandatory(action, "index")
    value = getMandatory(action, "value")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 846
    row = getRow(tableName, id, "arrayAdd")
    // item 1294
    arrayAddKernel(
        row,
        field,
        index,
        value
    )
    // item 853
    return row
}

function arrayAddKernel(row, field, index, value) {
    var array
    // item 1288
    array = row[field]
    // item 1289
    if (array) {
        
    } else {
        // item 1292
        array = []
        row[field] = array
    }
    // item 1293
    array.splice(index, 0, value)
}

function arrayAdd_undo(action) {
    var field, id, index, result, tableName
    // item 950
    field = getMandatory(action, "field")
    index = getMandatory(action, "index")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 951
    result = {
        table : tableName,
        op : "aremove",
        id : id,
        field : field,
        index : index
    }
    // item 1556
    return [result]
}

function arrayPop(action) {
    var array, field, id, row, tableName
    // item 832
    field = getMandatory(action, "field")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 833
    row = getRow(tableName, id, "arrayPop")
    // item 834
    array = row[field]
    // item 835
    if (array) {
        // item 838
        array.pop()
    }
    // item 839
    return row
}

function arrayPop_undo(action) {
    var array, field, id, result, row, tableName, value
    // item 935
    field = getMandatory(action, "field")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 936
    row = getRow(tableName, id, "undo arrayPop")
    // item 937
    array = row[field]
    // item 938
    if ((array) && (!(array.length == 0))) {
        // item 943
        value = array[array.length - 1]
        // item 941
        result = {
            table : tableName,
            op : "push",
            id : id,
            field : field,
            value : clone(value)
        }
        // item 1555
        return [result]
    } else {
        // item 942
        raise("undo for arrayPop: nothing to pop: " +
        	tableName + " " + id + " " + field)
    }
}

function arrayPush(action) {
    var field, id, row, tableName, value
    // item 818
    field = getMandatory(action, "field")
    value = getMandatory(action, "value")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 1248
    row = getRow(tableName, id, "arrayPush")
    // item 1039
    arrayPushKernel(
        row,
        field,
        value
    )
    // item 1249
    return row
}

function arrayPushKernel(row, field, value) {
    var array
    // item 1031
    array = row[field]
    // item 1032
    if (array) {
        
    } else {
        // item 1035
        array = []
        row[field] = array
    }
    // item 1036
    array.push(value)
}

function arrayPush_undo(action) {
    var field, id, result, tableName
    // item 928
    field = getMandatory(action, "field")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 929
    result = {
        table : tableName,
        op : "pop",
        id : id,
        field : field
    }
    // item 1557
    return [result]
}

function arrayRemove(action) {
    var array, field, id, index, row, tableName
    // item 859
    field = getMandatory(action, "field")
    index = getMandatory(action, "index")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 860
    row = getRow(tableName, id, "arrayRemove")
    // item 861
    array = row[field]
    // item 862
    if (array) {
        // item 865
        array.splice(index, 1)
    }
    // item 866
    return row
}

function arrayRemove_undo(action) {
    var array, field, id, index, result, row, tableName, value
    // item 957
    field = getMandatory(action, "field")
    index = getMandatory(action, "index")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 958
    row = getRow(tableName, id, "undo arrayRemove")
    // item 959
    array = row[field]
    // item 960
    if ((array) && (!(index >= array.length))) {
        // item 965
        value = array[index]
        // item 963
        result = {
            table : tableName,
            op : "aadd",
            id : id,
            field : field,
            index : index,
            value : clone(value)
        }
        // item 1558
        return [result]
    } else {
        // item 964
        raise("undo for arrayRemove: bad index: " +
        	tableName + " " + id + " " + field + " " + index)
    }
}

function buildUndo(action) {
    // item 652
    var op = action.op
    // item 653
    if (op) {
        // item 650
        var procedure = gUndo[op]
        // item 656
        if (procedure) {
            // item 659
            return procedure(action)
        } else {
            // item 658
            raise("Unknown op: \"" + op + "\"")
        }
    } else {
        // item 655
        raise("op is missing")
    }
}

function checkIndexedFields(tableName, fields) {
    var link, links
    // item 1399
    links = gLinks[tableName]
    // item 14030001
    var _ind1403 = 0;
    var _col1403 = fields;
    var _len1403 = _col1403.length;
    while (true) {
        // item 14030002
        if (_ind1403 < _len1403) {
            
        } else {
            break;
        }
        // item 14030004
        var field = _col1403[_ind1403];
        // item 1406
        if (field == "id") {
            // item 1408
            raise("id cannot be indexed")
            break;
        }
        // item 1400
        if ((links) && (field in links)) {
            // item 1412
            link = links[field]
            // item 1413
            if ((link.type == "list") || (link.type == "map")) {
                // item 1416
                raise("Collection field \"" + field +
                  "\" cannot be indexed")
                break;
            }
        }
        // item 14030003
        _ind1403++;
    }
}

function clone(obj) {
    var _sw6750000_ = 0;
    // item 6750000
    _sw6750000_ = typeof obj;
    // item 6750001
    if ((((_sw6750000_ === "number") || (_sw6750000_ === "boolean")) || (_sw6750000_ === "string")) || (_sw6750000_ === "undefined")) {
        // item 687
        return obj
    } else {
        // item 688
        if (obj === null) {
            // item 691
            return obj
        } else {
            // item 692
            if (isArray(obj)) {
                // item 695
                return cloneArray(obj)
            } else {
                // item 703
                return cloneObject(obj)
            }
        }
    }
}

function cloneArray(obj) {
    // item 722
    return obj.slice(0)
}

function cloneNoId(obj) {
    var copy
    // item 728
    copy = clone(obj)
    // item 730
    delete copy.id
    // item 729
    return copy
}

function cloneObject(obj) {
    var copy
    // item 715
    copy = {}
    // item 7090001
    var _ind709 = 0;
    var _col709 = obj;
    var _keys709 = Object.keys(_col709); 
    var _len709 = _keys709.length;
    while (true) {
        // item 7090002
        if (_ind709 < _len709) {
            
        } else {
            break;
        }
        // item 7090004
        var key = _keys709[_ind709]; var value = _col709[key];
        // item 711
        copy[key] = clone(value)
        // item 7090003
        _ind709++;
    }
    // item 716
    return copy
}

function createEmptyLists(tableName, row) {
    var links
    var _sw16740000_ = 0;
    // item 1668
    links = gLinks[tableName]
    // item 1669
    if (links) {
        // item 16720001
        var _ind1672 = 0;
        var _col1672 = links;
        var _keys1672 = Object.keys(_col1672); 
        var _len1672 = _keys1672.length;
        while (true) {
            // item 16720002
            if (_ind1672 < _len1672) {
                
            } else {
                break;
            }
            // item 16720004
            var field = _keys1672[_ind1672]; var link = _col1672[field];
            // item 1682
            if (field in row) {
                
            } else {
                // item 16740000
                _sw16740000_ = link.type;
                // item 16740001
                if (_sw16740000_ === "list") {
                    // item 1685
                    row[field] = []
                } else {
                    // item 16740002
                    if (_sw16740000_ === "map") {
                        // item 1686
                        row[field] = {}
                    }
                }
            }
            // item 16720003
            _ind1672++;
        }
    }
}

function createLink(srcTable, srcField, dstTable, dstField, type) {
    var dst, dstLink, dstType, key, keyList, src, srcLink, srcType
    // item 1639
    keyList = [srcTable, srcField,
       dstTable, dstField, type]
    key = keyList.join("|")
    // item 1640
    if (key in gExistingLinks) {
        
    } else {
        // item 10930001
        if (type === "list") {
            // item 1104
            srcType = "ptr-list"
            dstType = "list"
            // item 1077
            src = getOrCreateLinkTable(
                srcTable
            )
            // item 1078
            dst = getOrCreateLinkTable(
                dstTable
            )
            // item 1090
            srcLink = createLinkRecord(
                src,
                srcTable,
                srcField
            )
            // item 1091
            dstLink = createLinkRecord(
                dst,
                dstTable,
                dstField
            )
            // item 1106
            srcLink.listField = dstField
            dstLink.ptrField = srcField
            // item 1092
            srcLink.listTable = dstTable
            dstLink.ptrTable = srcTable
            // item 1103
            srcLink.type = srcType
            dstLink.type = dstType
            // item 1643
            gExistingLinks[key] = true
        } else {
            // item 10930002
            if (type === "map") {
                // item 1437
                srcType = "ptr-map"
                dstType = "map"
                // item 1077
                src = getOrCreateLinkTable(
                    srcTable
                )
                // item 1078
                dst = getOrCreateLinkTable(
                    dstTable
                )
                // item 1090
                srcLink = createLinkRecord(
                    src,
                    srcTable,
                    srcField
                )
                // item 1091
                dstLink = createLinkRecord(
                    dst,
                    dstTable,
                    dstField
                )
                // item 1106
                srcLink.listField = dstField
                dstLink.ptrField = srcField
                // item 1092
                srcLink.listTable = dstTable
                dstLink.ptrTable = srcTable
                // item 1103
                srcLink.type = srcType
                dstLink.type = dstType
                // item 1643
                gExistingLinks[key] = true
            } else {
                // item 10930003
                if (type === "simple") {
                    // item 1105
                    srcType = "ptr-simple"
                    dstType = "simple"
                    // item 1438
                    src = getOrCreateLinkTable(
                        srcTable
                    )
                    // item 1439
                    dst = getOrCreateLinkTable(
                        dstTable
                    )
                    // item 1441
                    srcLink = createLinkRecord(
                        src,
                        srcTable,
                        srcField
                    )
                    // item 1447
                    dstLink = getOrCreateSimple(
                        dst,
                        dstTable,
                        dstField
                    )
                    // item 1106
                    srcLink.listField = dstField
                    dstLink.ptrField = srcField
                    // item 1092
                    srcLink.listTable = dstTable
                    dstLink.ptrTable = srcTable
                    // item 1103
                    srcLink.type = srcType
                    dstLink.type = dstType
                    // item 1643
                    gExistingLinks[key] = true
                } else {
                    // item 1102
                    raise("Unsupported link type \"" +
                     type + "\". Should be list or map.")
                }
            }
        }
    }
}

function createLinkRecord(table, tableName, name) {
    var result
    // item 1357
    if (name == "id") {
        // item 1360
        raise("id cannot be a link")
    } else {
        // item 1084
        if (name in table) {
            // item 1087
            raise("Field \"" + name +
             "\" is already a link in table \"" +
             tableName + "\"")
        } else {
            // item 1088
            result = {field:name}
            table[name] = result
            // item 1089
            return result
        }
    }
}

function createTable(name) {
    // item 229
    if (name in gState) {
        // item 232
        raise("createTable: table name \"" +
        	name + "\" is not unique")
    } else {
        // item 233
        gState[name] = {}
    }
}

function dispatch(action) {
    var op, procedure, row
    // item 1420
    op = action.op
    // item 1421
    if (op) {
        // item 1418
        procedure = gOps[op]
        // item 1424
        if (procedure) {
            // item 1427
            row = procedure(action)
            // item 1429
            if (gCallback) {
                // item 1428
                gCallback(action, row)
            }
            // item 1432
            return row
        } else {
            // item 1426
            raise("Unknown op: \"" + op + "\"")
        }
    } else {
        // item 1423
        raise("op is missing")
    }
}

function get(tableName, id) {
    // item 998
    return getRow(
        tableName,
        id,
        "get"
    )
}

function getMandatory(action, fieldName) {
    var value
    // item 321
    value = action[fieldName]
    // item 318
    if (value == undefined) {
        // item 322
        raise("Field \"" + fieldName + "\" is missing in action \"" +
        	action.op + "\"")
    } else {
        // item 323
        return value
    }
}

function getOrCreateLinkTable(name) {
    var result
    // item 1067
    if (name in gState) {
        // item 1071
        if (name in gLinks) {
            // item 1074
            result = gLinks[name]
        } else {
            // item 1075
            result = {}
            gLinks[name] = result
        }
        // item 1076
        return result
    } else {
        // item 1069
        raise("createLink: table \"" +
        	name + "\" does not exist")
    }
}

function getOrCreateSimple(table, tableName, name) {
    var result
    // item 1455
    if (name == "id") {
        // item 1458
        raise("id cannot be a link")
    } else {
        // item 1449
        if (name in table) {
            // item 1459
            result = table[name]
            // item 1460
            if (result.type == "simple") {
                // item 1454
                return result
            } else {
                // item 1452
                raise("Field \"" + name +
                 "\" is already a link in table \"" +
                 tableName + "\"")
            }
        } else {
            // item 1453
            result = {field:name}
            table[name] = result
            // item 1454
            return result
        }
    }
}

function getRow(tableName, id, procedure) {
    var row, table
    // item 367
    table = gState[tableName]
    // item 373
    if (table == undefined) {
        // item 375
        raise(procedure + ": table \"" +
          tableName + "\" does not exist")
    } else {
        // item 376
        row = table[id]
        // item 369
        if (row == undefined) {
            // item 371
            raise(procedure + ": record with key \"" +
              id + "\" does not exist in table \"" +
              tableName + "\"")
        } else {
            // item 372
            return row
        }
    }
}

function getRowOrNull(tableName, id) {
    var row, table
    // item 1696
    table = gState[tableName]
    // item 1702
    if (table == undefined) {
        // item 1704
        raise("getRowOrNull: table \"" +
          tableName + "\" does not exist")
    } else {
        // item 1705
        row = table[id]
        // item 1698
        if (row == undefined) {
            // item 1700
            return null
        } else {
            // item 1701
            return row
        }
    }
}

function getState() {
    // item 66
    return gState
}

function handleLink(link, field, changes) {
    var dst, id, index, item, links, oldValue, row, src, src2, unlinks, value
    var _sw11910000_ = 0;
    // item 1226
    src = changes.src
    src2 = changes.src2
    dst = changes.dst
    // item 1222
    value = src[field]
    oldValue = dst[field]
    // item 1223
    if (value === oldValue) {
        
    } else {
        // item 1218
        if (link) {
            // item 11910000
            _sw11910000_ = link.type;
            // item 11910001
            if (((_sw11910000_ === "ptr-list") || (_sw11910000_ === "ptr-map")) || (_sw11910000_ === "ptr-simple")) {
                // item 1227
                links = changes.links
                unlinks = changes.unlinks
                // item 1201
                if (value) {
                    // item 1277
                    if (typeof value == "string") {
                        // item 1276
                        id = value
                        index = -1
                    } else {
                        // item 1280
                        id = value[0]
                        index = value[1]
                    }
                    // item 1199
                    row = getRow(
                        link.listTable,
                        id,
                        "foreign key check"
                    )
                    // item 1209
                    src2[field] = row
                    // item 1204
                    item = [row, link.type, link.listField,
                    	index]
                    links.push(item)
                } else {
                    // item 1228
                    src2[field] = value
                }
                // item 1210
                if (oldValue) {
                    // item 1214
                    item = [oldValue, link.type, link.listField]
                    unlinks.push(item)
                }
            } else {
                // item 1198
                raise("Field \"" + field +
                  "\" is a link that cannot be set")
            }
        } else {
            // item 1217
            src2[field] = value
        }
    }
}

function init() {
    // item 986
    gOps.insert = insertAction
    gOps.remove = removeAction
    gOps.update = updateAction
    
    gOps.madd = mapAdd
    gOps.mremove = mapRemove
    
    gOps.push = arrayPush
    gOps.pop = arrayPop
    gOps.aadd = arrayAdd
    gOps.aremove = arrayRemove
    // item 987
    gOps.noop = noop
    // item 988
    gUndo.insert = insertAction_undo
    gUndo.remove = removeAction_undo
    gUndo.update = updateAction_undo
    
    gUndo.madd = setAdd_undo
    gUndo.mremove = setRemove_undo
    
    gUndo.push = arrayPush_undo
    gUndo.pop = arrayPop_undo
    gUndo.aadd = arrayAdd_undo
    gUndo.aremove = arrayRemove_undo
    // item 1507
    gLinkers["ptr-list"] = linkList
    gLinkers["ptr-map"] = linkMap
    gLinkers["ptr-simple"] = linkSimple
    // item 1508
    gUnlinkers["ptr-list"] = unlinkList
    gUnlinkers["ptr-map"] = unlinkMap
    gUnlinkers["ptr-simple"] = unlinkSimple
    // item 1630
    if ((dbName) && (!(typeof window == "undefined"))) {
        // item 1634
        if (window.gdata) {
            
        } else {
            // item 1637
            window.gdata = {}
        }
        // item 1687
        if (dbName in window.gdata) {
            // item 1689
            raise("Database name \"" +
             dbName + "\" is not unique")
        } else {
            // item 1638
            window.gdata[dbName] = self
            // item 1690
            self.name = dbName
        }
    }
}

function insert(tableName, id, values) {
    // item 252
    var action = {
    	op: "insert",
    	table: tableName,
    	id: id,
    	values: values
    }
    // item 253
    return dispatch(action)
}

function insertAction(action) {
    var id, row, table, tableName, values
    // item 780
    values = getMandatory(action, "values")
    id = makeId(action)
    tableName = getMandatory(action, "table")
    table = gState[tableName]
    // item 787
    if (table == undefined) {
        // item 789
        raise("insert: table \"" +
          tableName + "\" does not exist")
    } else {
        // item 782
        if (id in table) {
            // item 784
            raise("insert: record with key \"" +
              id + "\" already exists in table \"" +
              tableName + "\"")
        } else {
            // item 785
            row = {}
            // item 1298
            writeFields(
                tableName,
                id,
                values,
                row
            )
            // item 1299
            row.id = id
            // item 786
            table[id] = row
            // item 1667
            createEmptyLists(
                tableName,
                row
            )
            // item 790
            return row
        }
    }
}

function insertAction_undo(action) {
    var result
    // item 900
    result = {
        op : "remove",
        table : action.table,
        id : action.id
    }
    // item 1559
    return [result]
}

function linkList(row, field, index, me, id) {
    // item 1491
    if (index == -1) {
        // item 1490
        arrayPushKernel(
            row,
            field,
            me
        )
    } else {
        // item 1493
        arrayAddKernel(
            row,
            field,
            index,
            me
        )
    }
}

function linkMap(row, field, index, me, id) {
    // item 1500
    mapAddKernel(
        row,
        field,
        id,
        me
    )
}

function linkSimple(row, field, index, me, id) {
    // item 1506
    row[field] = me
}

function linksToIds(links) {
    var getId
    // item 1658
    if (links) {
        // item 1656
        getId = function(link) {
            return link.id
        }
        // item 1657
        return links.map(getId)
    } else {
        // item 1661
        return null
    }
}

function makeId(obj) {
    var id, old
    // item 774
    id = obj.id
    // item 770
    if (id) {
        // item 773
        return id.toString()
    } else {
        // item 765
        old = self.nextId
        // item 766
        self.nextId++
        // item 767
        return old.toString()
    }
}

function makeUndoForLinks(field, link, oldValue, values, relinks, myRow) {
    var myId, update
    var _sw15890000_ = 0;
    // item 1616
    myId = myRow.id
    // item 15890000
    _sw15890000_ = link.type;
    // item 15890001
    if (_sw15890000_ === "list") {
        // item 16060001
        var _ind1606 = 0;
        var _col1606 = oldValue;
        var _len1606 = _col1606.length;
        while (true) {
            // item 16060002
            if (_ind1606 < _len1606) {
                
            } else {
                break;
            }
            // item 16060004
            var other = _col1606[_ind1606];
            // item 1608
            values = {}
            values[link.ptrField] = myId
            // item 1605
            update = {
                op : "update",
                table : link.ptrTable,
                id : other.id,
                values : values
            }
            // item 1613
            relinks.push(update)
            // item 16060003
            _ind1606++;
        }
    } else {
        // item 15890002
        if (_sw15890000_ === "map") {
            // item 16100001
            var _ind1610 = 0;
            var _col1610 = oldValue;
            var _keys1610 = Object.keys(_col1610); 
            var _len1610 = _keys1610.length;
            while (true) {
                // item 16100002
                if (_ind1610 < _len1610) {
                    
                } else {
                    break;
                }
                // item 16100004
                var otherId = _keys1610[_ind1610]; var other = _col1610[otherId];
                // item 1612
                values = {}
                values[link.ptrField] = myId
                // item 1609
                update = {
                    op : "update",
                    table : link.ptrTable,
                    id : other.id,
                    values : values
                }
                // item 1614
                relinks.push(update)
                // item 16100003
                _ind1610++;
            }
        } else {
            // item 15890003
            if (_sw15890000_ === "ptr-list") {
                // item 1617
                values[field] = makeUndoList(
                    link,
                    myRow,
                    oldValue
                )
            } else {
                // item 15890004
                if ((_sw15890000_ === "ptr-map") || (_sw15890000_ === "ptr-simple")) {
                    // item 1604
                    values[field] = oldValue.id
                }
            }
        }
    }
}

function makeUndoList(link, myRow, targetRow) {
    var index, list
    // item 1623
    list = targetRow[link.listField]
    // item 1624
    index = list.indexOf(myRow)
    // item 1625
    return [targetRow.id, index]
}

function mapAdd(action) {
    var field, id, key, row, tableName, value
    // item 872
    field = getMandatory(action, "field")
    key = getMandatory(action, "key")
    value = getMandatory(action, "value")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 1250
    row = getRow(tableName, id, "mapAdd")
    // item 1014
    mapAddKernel(
        row,
        field,
        key,
        value
    )
    // item 1251
    return row
}

function mapAddKernel(row, field, key, value) {
    var map
    // item 1006
    map = row[field]
    // item 1007
    if (map) {
        
    } else {
        // item 1010
        map = {}
        row[field] = map
    }
    // item 1011
    map[key] = value
}

function mapRemove(action) {
    var field, id, key, row, tableName
    // item 886
    field = getMandatory(action, "field")
    key = getMandatory(action, "key")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 887
    row = getRow(tableName, id, "mapRemove")
    // item 888
    mapRemoveKernel(
        row,
        field,
        key
    )
    // item 894
    return row
}

function mapRemoveKernel(row, field, key) {
    var map
    // item 1270
    map = row[field]
    // item 1271
    if (map) {
        // item 1275
        delete map[key]
    } else {
        // item 1274
        map = {}
        row[field] = map
    }
}

function noop(action) {
    // item 480
    return null
}

function noop_undo(action) {
    // item 757
    return action
}

function push(tableName, id, field, value) {
    var action
    // item 1649
    action = {
        op : "push",
        table : tableName,
        id : id,
        field : field,
        value : value
    }
    // item 1650
    return dispatch(action)
}

function raise(text) {
    // item 302
    throw new Error(text)
}

function remove(tableName, id) {
    // item 250
    var action = {
    	op: "remove",
    	table: tableName,
    	id: id
    }
    // item 251
    return dispatch(action)
}

function removeAction(action) {
    var id, links, row, table, tableName
    // item 801
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    table = gState[tableName]
    // item 798
    if (table == undefined) {
        // item 800
        raise("remove: table \"" +
          tableName + "\" does not exist")
    } else {
        // item 802
        row = table[id]
        // item 1315
        if (row) {
            // item 796
            delete table[id]
            // item 1311
            links = gLinks[tableName]
            // item 1312
            if (links) {
                // item 1316
                unlink(
                    links,
                    row
                )
            }
        }
        // item 803
        return row
    }
}

function removeAction_undo(action) {
    var id, link, links, oldValue, result, row, tableName, undos, values
    // item 906
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 908
    row = getRow(tableName, id, "undo remove")
    // item 1587
    undos = []
    // item 1564
    links = gLinks[tableName]
    // item 1565
    if (links) {
        // item 1615
        values = {}
        // item 15680001
        var _ind1568 = 0;
        var _col1568 = row;
        var _keys1568 = Object.keys(_col1568); 
        var _len1568 = _keys1568.length;
        while (true) {
            // item 15680002
            if (_ind1568 < _len1568) {
                
            } else {
                break;
            }
            // item 15680004
            var key = _keys1568[_ind1568]; var oldValue = _col1568[key];
            // item 1570
            oldValue = row[key]
            // item 1572
            link = links[key]
            // item 1573
            if ((link) && (oldValue)) {
                // item 1579
                makeUndoForLinks(
                    key,
                    link,
                    oldValue,
                    values,
                    undos,
                    row
                )
            } else {
                // item 1571
                values[key] = clone(oldValue)
            }
            // item 15680003
            _ind1568++;
        }
        // item 1580
        delete values.id
    } else {
        // item 907
        values = cloneNoId(row)
    }
    // item 909
    result = {
        op : "insert",
        table : tableName,
        id : id,
        values : values
    }
    // item 1588
    undos.unshift(result)
    // item 1560
    return undos
}

function removeValue(array, value) {
    var index
    // item 1045
    index = array.indexOf(value)
    // item 1046
    if (index == -1) {
        
    } else {
        // item 1049
        array.splice(index, 1)
    }
}

function set(tableName, id, field, value) {
    // item 1307
    var action = {
    	op: "update",
    	table: tableName,
    	id: id,
    	values: {}
    }
    // item 1309
    action.values[field] = value
    // item 1308
    return dispatch(action)
}

function setAdd_undo(action) {
    var field, id, key, result, tableName
    // item 972
    field = getMandatory(action, "field")
    key = getMandatory(action, "key")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 973
    result = {
        table : tableName,
        op : "mremove",
        id : id,
        field : field,
        key : key
    }
    // item 1562
    return [result]
}

function setNextId(nextId) {
    // item 1023
    self.nextId = nextId
}

function setRemove_undo(action) {
    var field, id, key, map, result, row, tableName, value
    // item 979
    field = getMandatory(action, "field")
    key = getMandatory(action, "key")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 1433
    row = getRow(tableName, id, "undo mapRemove")
    // item 1434
    map = row[field]
    value = clone(map[key])
    // item 980
    result = {
        table : tableName,
        op : "madd",
        id : id,
        field : field,
        key : key,
        value : value
    }
    // item 1563
    return [result]
}

function setState(state) {
    var gState
    // item 472
    gState = state
}

function shallowCopy(src, dst) {
    // item 11460001
    var _ind1146 = 0;
    var _col1146 = src;
    var _keys1146 = Object.keys(_col1146); 
    var _len1146 = _keys1146.length;
    while (true) {
        // item 11460002
        if (_ind1146 < _len1146) {
            
        } else {
            break;
        }
        // item 11460004
        var key = _keys1146[_ind1146]; var value = _col1146[key];
        // item 1149
        if (typeof value == "undefined") {
            // item 1152
            delete dst[key]
        } else {
            // item 1148
            dst[key] = value
        }
        // item 11460003
        _ind1146++;
    }
}

function subscribe(callback) {
    var gCallback
    // item 86
    gCallback = callback
}

function unlink(links, row) {
    var id, link, map
    var _sw13370000_ = 0;
    // item 1347
    id = row.id
    // item 13310001
    var _ind1331 = 0;
    var _col1331 = row;
    var _keys1331 = Object.keys(_col1331); 
    var _len1331 = _keys1331.length;
    while (true) {
        // item 13310002
        if (_ind1331 < _len1331) {
            
        } else {
            break;
        }
        // item 13310004
        var field = _keys1331[_ind1331]; var value = _col1331[field];
        // item 1334
        if (value) {
            // item 1333
            link = links[field]
            // item 1346
            if (link) {
                // item 13370000
                _sw13370000_ = link.type;
                // item 13370001
                if (_sw13370000_ === "ptr-list") {
                    // item 1348
                    removeValue(
                        value[link.listField],
                        row
                    )
                } else {
                    // item 13370002
                    if (_sw13370000_ === "ptr-map") {
                        // item 1349
                        map = value[link.listField]
                        // item 1350
                        delete map[id]
                    } else {
                        // item 13370003
                        if (_sw13370000_ === "ptr-simple") {
                            // item 1481
                            value[link.listField] = null
                        } else {
                            // item 13370004
                            if (_sw13370000_ === "list") {
                                // item 13510001
                                var _ind1351 = 0;
                                var _col1351 = value;
                                var _len1351 = _col1351.length;
                                while (true) {
                                    // item 13510002
                                    if (_ind1351 < _len1351) {
                                        
                                    } else {
                                        break;
                                    }
                                    // item 13510004
                                    var other = _col1351[_ind1351];
                                    // item 1353
                                    other[link.ptrField] = null
                                    // item 13510003
                                    _ind1351++;
                                }
                            } else {
                                // item 13370005
                                if (_sw13370000_ === "map") {
                                    // item 13540001
                                    var _ind1354 = 0;
                                    var _col1354 = value;
                                    var _keys1354 = Object.keys(_col1354); 
                                    var _len1354 = _keys1354.length;
                                    while (true) {
                                        // item 13540002
                                        if (_ind1354 < _len1354) {
                                            
                                        } else {
                                            break;
                                        }
                                        // item 13540004
                                        var otherId = _keys1354[_ind1354]; var other = _col1354[otherId];
                                        // item 1356
                                        other[link.ptrField] = null
                                        // item 13540003
                                        _ind1354++;
                                    }
                                } else {
                                    // item 13370006
                                    if (_sw13370000_ === "simple") {
                                        
                                    } else {
                                        // item 13370007
                                        throw "Unexpected switch value: " + _sw13370000_;
                                    }
                                    // item 1484
                                    raise("Cannot delete: active link on \"" +
                                      field + "\"")
                                }
                            }
                        }
                    }
                }
            }
        }
        // item 13310003
        _ind1331++;
    }
}

function unlinkList(row, field, me, id) {
    // item 1531
    removeValue(
        row[field],
        me
    )
}

function unlinkMap(row, field, me, id) {
    // item 1532
    mapRemoveKernel(
        row,
        field,
        id
    )
}

function unlinkSimple(row, field, me, id) {
    // item 1534
    row[field] = null
}

function update(tableName, id, values) {
    // item 254
    var action = {
    	op: "update",
    	table: tableName,
    	id: id,
    	values: values
    }
    // item 255
    return dispatch(action)
}

function updateAction(action) {
    var id, row, tableName, values
    // item 809
    values = getMandatory(action, "values")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 811
    row = getRow(tableName, id, "update")
    // item 1300
    writeFields(
        tableName,
        id,
        values,
        row
    )
    // item 812
    return row
}

function updateAction_undo(action) {
    var id, link, links, newValues, oldValue, result, row, tableName, values
    // item 915
    newValues = getMandatory(action, "values")
    id = getMandatory(action, "id")
    tableName = getMandatory(action, "table")
    // item 916
    row = getRow(tableName, id, "undo update")
    // item 918
    values = {}
    // item 1539
    links = gLinks[tableName]
    // item 1540
    if (links) {
        // item 15430001
        var _ind1543 = 0;
        var _col1543 = newValues;
        var _keys1543 = Object.keys(_col1543); 
        var _len1543 = _keys1543.length;
        while (true) {
            // item 15430002
            if (_ind1543 < _len1543) {
                
            } else {
                break;
            }
            // item 15430004
            var key = _keys1543[_ind1543]; var newValue = _col1543[key];
            // item 1545
            oldValue = row[key]
            // item 1547
            link = links[key]
            // item 1548
            if ((link) && (oldValue)) {
                // item 1626
                if (link.type == "ptr-list") {
                    // item 1629
                    values[key] = makeUndoList(
                        link,
                        row,
                        oldValue
                    )
                } else {
                    // item 1554
                    values[key] = oldValue.id
                }
            } else {
                // item 1546
                values[key] = clone(oldValue)
            }
            // item 15430003
            _ind1543++;
        }
    } else {
        // item 9190001
        var _ind919 = 0;
        var _col919 = newValues;
        var _keys919 = Object.keys(_col919); 
        var _len919 = _keys919.length;
        while (true) {
            // item 9190002
            if (_ind919 < _len919) {
                
            } else {
                break;
            }
            // item 9190004
            var key = _keys919[_ind919]; var newValue = _col919[key];
            // item 921
            oldValue = row[key]
            // item 922
            values[key] = clone(oldValue)
            // item 9190003
            _ind919++;
        }
    }
    // item 917
    result = {
        op : "update",
        table : tableName,
        id : id,
        values : values
    }
    // item 1561
    return [result]
}

function writeFields(tableName, id, src, dst) {
    var changes, field, index, link, linkActions, linker, links, row, src2, type, unlinker, unlinks
    // item 1118
    links = gLinks[tableName]
    // item 1119
    if (links) {
        // item 1154
        linkActions = []
        unlinks = []
        src2 = {}
        // item 1229
        changes = {
            src2 : src2,
            dst : dst,
            src : src,
            links : linkActions,
            unlinks : unlinks
        }
        // item 11230001
        var _ind1123 = 0;
        var _col1123 = Object.keys(src);
        var _len1123 = _col1123.length;
        while (true) {
            // item 11230002
            if (_ind1123 < _len1123) {
                
            } else {
                break;
            }
            // item 11230004
            var field = _col1123[_ind1123];
            // item 1130
            link = links[field]
            // item 1231
            handleLink(
                link,
                field,
                changes
            )
            // item 11230003
            _ind1123++;
        }
        // item 1238
        shallowCopy(src2, dst)
        // item 12420001
        var _ind1242 = 0;
        var _col1242 = linkActions;
        var _len1242 = _col1242.length;
        while (true) {
            // item 12420002
            if (_ind1242 < _len1242) {
                
            } else {
                break;
            }
            // item 12420004
            var link = _col1242[_ind1242];
            // item 1244
            row = link[0]
            type = link[1]
            field = link[2]
            index = link[3]
            // item 1535
            linker = gLinkers[type]
            // item 1536
            linker(
                row,
                field,
                index,
                dst,
                id
            )
            // item 12420003
            _ind1242++;
        }
        // item 12540001
        var _ind1254 = 0;
        var _col1254 = unlinks;
        var _len1254 = _col1254.length;
        while (true) {
            // item 12540002
            if (_ind1254 < _len1254) {
                
            } else {
                break;
            }
            // item 12540004
            var link = _col1254[_ind1254];
            // item 1256
            row = link[0]
            type = link[1]
            field = link[2]
            // item 1537
            unlinker = gUnlinkers[type]
            // item 1538
            unlinker(
                row,
                field,
                dst,
                id
            )
            // item 12540003
            _ind1254++;
        }
    } else {
        // item 1153
        shallowCopy(src, dst)
    }
}


this.dispatch = dispatch
this.getState = getState
this.setState = setState
this.subscribe = subscribe
this.get = get
this.getRowOrNull = getRowOrNull
this.setNextId =setNextId

this.createTable = createTable
this.createLink = createLink

this.buildUndo = buildUndo

this.insert = insert
this.update = update
this.remove = remove
this.set = set
this.push = push

init()

}

if (typeof module != "undefined") {
	module.exports = TabGen4
}
