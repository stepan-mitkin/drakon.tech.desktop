function UtilsModule(undefined) {

var self = this;


var Lex = {
	initialized: false
}

function Globals() {
	var self = this;
	
	self.intFields = {x: true, y: true, w: true, h: true, a: true, b: true, flag1: true};
	self.boolFields = {isLine: true, isVertical: true};
	self.forbidden = {left: true, right: true, up: true, down: true, tb: true, tb2: true, text2: true, group: true, box: true};
	self.stringFields = {id: true, head: true, tail: true};
}

var globals = new Globals();

self.copyBox = copyBox;
self.expandBox = expandBox;
self.boxFromPoint = boxFromPoint;
self.mergeSets = mergeSets;
self.copyObject = copyObject;
self.copyObjectDeep = copyObjectDeep;
self.objectValues = objectValues;
self.assertNull = assertNull;
self.splitToLines = splitToLines;
self.snapMove = snapMove;
self.Snapper = Snapper;
self.snapUp = snapUp;
self.max = max;
self.assertNotNull = assertNotNull;
self.Box = Box;
self.Point = Point;
self.Size = Size;
self.Content = Content;
self.copyPoint = copyPoint;
self.Manhattan = Manhattan;
self.listToSet = listToSet;
self.hardWrap = hardWrap;
self.addNotNilToSet = addNotNilToSet;
self.hitBox = hitBox;
self.boxesIntersect = boxesIntersect;
self.Set = Set;
self.tokenize = tokenize;
self.buildBlock = buildBlock;
self.buildFlow = buildFlow;
self.Command = Command;
self.sanitizeDiagram = sanitizeDiagram;
self.copyItem = copyItem;
self.parseBool = parseBool;
self.unique = unique
self.copyList = copyList
self.subtract = subtract
self.makeErrorMessage = makeErrorMessage
self.count = count
self.swap = swap
self.SortedSet = SortedSet
self.sortLinkedList = sortLinkedList
self.snapPos = snapPos
self.isColor = isColor
self.buildFontString = buildFontString
self.parseFontString = parseFontString
self.canInsertInHorizontal = canInsertInHorizontal
self.shallowEquivalent = shallowEquivalent
self.lineFrom2Points = lineFrom2Points
self.checkSpaceName = checkSpaceName
self.findManySubstrings = findManySubstrings

self.monthsToSecs = monthsToSecs
self.daysToSecs = daysToSecs
self.timeNow = timeNow
self.localizeDate = localizeDate

self.parseSearch = parseSearch
self.checkCardNumber = checkCardNumber
self.pad = pad

self.prettyPrintCard = prettyPrintCard
self.caretToNonSpaces = caretToNonSpaces
self.nonSpacesToCaret = nonSpacesToCaret

self.printAmount = printAmount
self.parseYyyyMmDd = parseYyyyMmDd

self.copySize = copySize
self.findAngle = findAngle
self.rotatePoint = rotatePoint
self.oppositeAngle = oppositeAngle

self.checkEmail = checkEmail
self.randomString = randomString
self.split = split
self.extractUrls = extractUrls
self.checkPassword = checkPassword
self.truncateText = truncateText
self.throwError = throwError

self.normalizeString = normalizeString
self.findNormSubstring = findNormSubstring
self.addRange = addRange
self.stringContains = stringContains

self.LogicalTree = LogicalTree
self.getOrCreate = getOrCreate
self.addLogicalTreeNode = addLogicalTreeNode
self.createLogicalTreeLinks = createLogicalTreeLinks

self.findFirst = findFirst
self.deleteFirst = deleteFirst
self.startsWith = startsWith

self.buildFontFace = buildFontFace
self.fontToFace = fontToFace
self.parseFontFace = parseFontFace
self.validateModuleName = validateModuleName
self.findInList = findInList
self.endsWith = endsWith
self.arrayToString = arrayToString

self.copyFields = copyFields
self.sort = sort
self.listToMap = listToMap

lexInit();




// Autogenerated with DRAKON Editor 1.32


function Box(left, top, right, bottom) {
    // item 376
    this.left = left;
    this.top = top;
    this.right = right;
    this.bottom = bottom;
}

function Command(type, table, id, fields) {
    // item 1653
    this.type = type;
    this.table = table;
    this.id = id;
    this.fields = fields || {};
    this.undo = null;
}

function Content(text, text2) {
    // item 1441
    this.txt = text || "";
    this.txt2 = text2 || "";
}

function FlowMachine_InsideLineWs_normal(self, token) {
    // item 3360
    if (isBeyond(self, token)) {
        // item 3363
        addHangingToken(
        	self,
        	token
        )
    } else {
        // item 3347
        self.x = self.wsStart
        // item 3346
        addPendingWs(self)
        // item 3348
        addTokenToLine(
        	self,
        	token
        )
    }
    // item 3323
    self.state = "InsideLine";
}

function FlowMachine_InsideLineWs_whitespace(self, token) {
    // item 3344
    self.ws.push(token)
    // item 3345
    self.x += token.width
    // item 3343
    self.state = "InsideLineWs";
}

function FlowMachine_InsideLine_normal(self, token) {
    // item 3315
    if (isBeyond(self, token)) {
        // item 3339
        addHangingToken(
        	self,
        	token
        )
    } else {
        // item 3340
        addTokenToLine(
        	self,
        	token
        )
    }
    // item 3285
    self.state = "InsideLine";
}

function FlowMachine_InsideLine_whitespace(self, token) {
    // item 3331
    self.wsStart = self.x
    // item 3332
    self.ws.push(token)
    // item 3333
    self.x += token.width
    // item 3334
    self.state = "InsideLineWs";
}

function FlowMachine_LineStart_normal(self, token) {
    // item 3319
    addLongToken(
    	self,
    	token
    )
    // item 3282
    self.state = "InsideLine";
}

function FlowMachine_LineStart_whitespace(self, token) {
    // item 3297
    if (isBeyond(self, token)) {
        // item 3316
        addLineToBlock(self)
        // item 3308
        self.state = "InsideLine";
    } else {
        // item 3295
        addTokenToLine(
        	self,
        	token
        )
        // item 3296
        self.state = "LineStart";
    }
}

function Graph() {
    // item 3069
    this.nodes = {}
    // item 3070
    this.connect = Graph_connect
    this.getIslands = Graph_getIslands
}

function Graph_connect(node1, node2) {
    // item 3087
    if (node2) {
        // item 3085
        var nodes = this.nodes
        // item 3084
        var node1Links = getOrCreate(nodes, node1)
        var node2Links = getOrCreate(nodes, node2)
        // item 3086
        node1Links[node2] = true
        node2Links[node1] = true
    }
}

function Graph_getIslands() {
    // item 3116
    var itemToTeam = {}
    var nodes = this.nodes
    // item 31180001
    var _ind3118 = 0;
    var _col3118 = nodes;
    var _keys3118 = Object.keys(_col3118); 
    var _len3118 = _keys3118.length;
    while (true) {
        // item 31180002
        if (_ind3118 < _len3118) {
            
        } else {
            break;
        }
        // item 31180004
        var nodeId = _keys3118[_ind3118]; var _ = _col3118[nodeId];
        // item 3117
        Graph_traverse(
        	nodeId,
        	nodes,
        	nodeId,
        	itemToTeam
        )
        // item 31180003
        _ind3118++;
    }
    // item 3122
    var result = new Teams()
    // item 31200001
    var _ind3120 = 0;
    var _col3120 = itemToTeam;
    var _keys3120 = Object.keys(_col3120); 
    var _len3120 = _keys3120.length;
    while (true) {
        // item 31200002
        if (_ind3120 < _len3120) {
            
        } else {
            break;
        }
        // item 31200004
        var nodeId = _keys3120[_ind3120]; var teamId = _col3120[nodeId];
        // item 3124
        result.add(teamId, nodeId)
        // item 31200003
        _ind3120++;
    }
    // item 3123
    return result
}

function Graph_traverse(teamId, nodes, nodeId, visited) {
    // item 3107
    if (nodeId in visited) {
        
    } else {
        // item 3110
        visited[nodeId] = teamId
        // item 3113
        var links = nodes[nodeId]
        // item 3114
        if (links) {
            // item 31110001
            var _ind3111 = 0;
            var _col3111 = links;
            var _keys3111 = Object.keys(_col3111); 
            var _len3111 = _keys3111.length;
            while (true) {
                // item 31110002
                if (_ind3111 < _len3111) {
                    
                } else {
                    break;
                }
                // item 31110004
                var id = _keys3111[_ind3111]; var _ = _col3111[id];
                // item 3115
                Graph_traverse(teamId, nodes, id, visited)
                // item 31110003
                _ind3111++;
            }
        }
    }
}

function Lexer_identifier_digit(self, c) {
    // item 1133
    addChar(self, c);
    // item 1136
    self.state = "identifier";
}

function Lexer_identifier_letter(self, c) {
    // item 1132
    addChar(self, c);
    // item 1135
    self.state = "identifier";
}

function Lexer_identifier_operator(self, c) {
    // item 1179
    createIdentifier(self);
    // item 1134
    addChar(self, c);
    // item 1373
    createOperator(self);
    // item 1137
    self.state = "idle";
}

function Lexer_identifier_whitespace(self, c) {
    // item 1138
    createIdentifier(self);
    // item 1371
    addChar(self, c);
    // item 1372
    createSpace(self);
    // item 1104
    self.state = "idle";
}

function Lexer_idle_digit(self, c) {
    // item 1118
    addChar(self, c);
    // item 1121
    self.state = "number";
}

function Lexer_idle_letter(self, c) {
    // item 1117
    addChar(self, c);
    // item 1120
    self.state = "identifier";
}

function Lexer_idle_operator(self, c) {
    // item 1119
    addChar(self, c);
    // item 1377
    createOperator(self);
    // item 1122
    self.state = "idle";
}

function Lexer_idle_whitespace(self, c) {
    // item 1369
    addChar(self, c);
    // item 1370
    createSpace(self);
    // item 1096
    self.state = "idle";
}

function Lexer_number_digit(self, c) {
    // item 1149
    addChar(self, c);
    // item 1152
    self.state = "number";
}

function Lexer_number_letter(self, c) {
    // item 1148
    addChar(self, c);
    // item 1151
    self.state = "number";
}

function Lexer_number_operator(self, c) {
    // item 1155
    createNumber(self);
    // item 1150
    addChar(self, c);
    // item 1376
    createOperator(self);
    // item 1153
    self.state = "idle";
}

function Lexer_number_whitespace(self, c) {
    // item 1154
    createNumber(self);
    // item 1374
    addChar(self, c);
    // item 1375
    createSpace(self);
    // item 1107
    self.state = "idle";
}

function Line() {
    // item 1421
    this.tokens = [];
    this.width = 0;
}

function LogicalTree(rootId) {
    // item 3166
    this.nodes = {}
    this.links = {}
    this.root = rootId
}

function Manhattan() {
    // item 194
    this.items = {};
    this.edges = {};
    this.nodes = {};
    // item 195
    this.nonUpdatable = {
    	isLine: true,
    	isVertical: true,
    	up: true,
    	down: true,
    	left: true,
    	right: true
    };
    // item 395
    this.addItem = addItem;
    this.getNode = getNode;
    this.getItem = getItem;
    this.getEdge = getEdge;
    this.removeItem = removeItem;
    this.updateNode = updateNode;
    this.getNeighbourUp = getNeighbourUp;
    this.getNeighbourDown = getNeighbourDown;
    this.getMaxId = getMaxId;
    this.enumerateManhattan = enumerateManhattan;
    this.getHead = getHead;
    this.getTail = getTail;
    this.clone = cloneGraph;
    // item 452
    this.getNodeDown = getNodeDown;
    this.getNodeLeft = getNodeLeft;
    this.getNodeRight = getNodeRight;
    this.getNodeUp = getNodeUp;
    this.getNodeDownEx = getNodeDownEx;
    this.getNodeLeftEx = getNodeLeftEx;
    this.getNodeRightEx = getNodeRightEx;
    this.getNodeUpEx = getNodeUpEx;
    // item 557
    this.checkEdges = checkEdges
    this.edgesIntersect = edgesIntersect
    // item 676
    this.buildTeams = buildTeams;
    this.getVertical = getVertical;
    this.getHorizontal = getHorizontal;
    this.getVerticalUp = getVerticalUp;
    this.getVerticalDown = getVerticalDown;
    this.getHorizontalRight = getHorizontalRight;
}

function Point(x, y) {
    // item 382
    this.x = x;
    this.y = y;
}

function Set(list) {
    // item 681
    this.map = {};
    this.list = [];
    // item 682
    this.add = function(item) {
    	var map = this.map;
    	if (!(item in map)) {
    		map[item] = true;
    		this.list.push(item);
    	}
    }
    // item 1642
    if (list) {
        // item 16450001
        var _ind1645 = 0;
        var _col1645 = list;
        var _len1645 = _col1645.length;
        while (true) {
            // item 16450002
            if (_ind1645 < _len1645) {
                
            } else {
                break;
            }
            // item 16450004
            var item = _col1645[_ind1645];
            // item 1647
            this.add(item);
            // item 16450003
            _ind1645++;
        }
    }
}

function Size(w, h) {
    // item 388
    this.w = w;
    this.h = h;
}

function Snapper(size) {
    // item 327
    this.acc = 0;
    this.snapped = 0;
    this.step = false;
    this.SNAP_SIZE = size || 10;
    this.snapMove = snapMove;
}

function SortedSet() {
    // item 2038
    this.list = []
    this.set = {}
    // item 2064
    this.add = SortedSet_add
    this.remove = SortedSet_remove
    this.get = SortedSet_get
    this.bringToFront = SortedSet_bringToFront
    this.sendToBack = SortedSet_sendToBack
    this.getMaxId = SortedSet_getMaxId
}

function SortedSet_add(id, item) {
    // item 2066
    if (id in this.set) {
        // item 2069
        throwError("Item \"" + id
         + "\" already exists")
    } else {
        // item 2065
        this.set[id] = item
        this.list.push(id)
    }
}

function SortedSet_bringToFront(id) {
    // item 2112
    var ordinal = this.list.indexOf(id)
    var last = this.list.length - 1
    // item 2107
    if ((ordinal == -1) || (ordinal == last)) {
        
    } else {
        // item 2110
        swap(this.list, last, ordinal)
    }
}

function SortedSet_get(id) {
    // item 2088
    var item = this.set[id]
    // item 2086
    return item
}

function SortedSet_getMaxId() {
    // item 2125
    var maxIdValue = maxIntKey(this.set)
    // item 2126
    return maxIdValue;
}

function SortedSet_remove(id) {
    // item 2089
    var ordinal = this.list.indexOf(id)
    // item 2090
    if (ordinal == -1) {
        
    } else {
        // item 2093
        this.list.splice(ordinal, 1)
        delete this.set[id]
    }
}

function SortedSet_sendToBack(id) {
    // item 2106
    var ordinal = this.list.indexOf(id)
    // item 2095
    if ((ordinal == -1) || (ordinal == 0)) {
        
    } else {
        // item 2098
        swap(this.list, 0, ordinal)
    }
}

function StringNormalizer_Normal_space(self, ch, pos, lineNo) {
    // item 2922
    self.state = "Whitespace";
}

function StringNormalizer_Normal_symbol(self, ch, pos, lineNo) {
    // item 3020
    addCharToNorm(
    	self,
    	ch,
    	pos,
    	lineNo
    )
    // item 2909
    self.state = "Normal";
}

function StringNormalizer_Start_line(self, ch, pos, lineNo) {
    // item 2931
    self.state = "Start";
}

function StringNormalizer_Start_symbol(self, ch, pos, lineNo) {
    // item 3006
    addCharToNorm(
    	self,
    	ch,
    	pos,
    	lineNo
    )
    // item 2901
    self.state = "Normal";
}

function StringNormalizer_Whitespace_space(self, ch, pos, lineNo) {
    // item 2928
    self.state = "Whitespace";
}

function StringNormalizer_Whitespace_symbol(self, ch, pos, lineNo) {
    // item 3018
    self.result += " "
    // item 3021
    addCharToNorm(
    	self,
    	ch,
    	pos,
    	lineNo
    )
    // item 2904
    self.state = "Normal";
}

function Teams() {
    // item 692
    this.byTeam = {};
    this.byItem = {};
    // item 897
    this.add = Teams_add;
    this.get = Teams_get;
}

function TeamsBlock() {
    // item 688
    this.left = new Teams();
    this.up = new Teams();
}

function Teams_add(teamId, itemId) {
    // item 881
    var byTeam = this.byTeam;
    var byItem = this.byItem;
    var bucket;
    // item 1001
    if (teamId in byTeam) {
        // item 1004
        bucket = byTeam[teamId];
    } else {
        // item 1005
        bucket = new Set();
        // item 1006
        byTeam[teamId] = bucket;
    }
    // item 877
    if (itemId in bucket.map) {
        // item 880
        throwError(
         "Item " + itemId + " is already in team "
         + teamId);
    } else {
        // item 1015
        bucket.add(itemId);
        // item 889
        byItem[itemId] = teamId;
    }
}

function Teams_get(itemId) {
    // item 895
    var teamId = this.byItem[itemId];
    return this.byTeam[teamId];
}

function TextBlock() {
    // item 1382
    this.height = 0;
    this.width = 0;
    this.lines = [];
}

function Token(type, text) {
    // item 1345
    this.type = type;
    this.text = text;
}

function addBelow(render, parent, block, y) {
    // item 1555
    var lineHeight = render.getFontHeight();
    var spacing = Math.round(
      lineHeight * (Config.LINE_SPACING - 1)
    );
    // item 15560001
    var _ind1556 = 0;
    var _col1556 = block.lines;
    var _len1556 = _col1556.length;
    while (true) {
        // item 15560002
        if (_ind1556 < _len1556) {
            
        } else {
            break;
        }
        // item 15560004
        var line = _col1556[_ind1556];
        // item 1635
        if (y == 0) {
            
        } else {
            // item 1638
            y += spacing;
        }
        // item 1655
        y += lineHeight;
        // item 1560
        line.bottom = y;
        // item 1639
        parent.lines.push(line);
        // item 15560003
        _ind1556++;
    }
    // item 1558
    var count = block.lines.length;
    block.height = count * lineHeight +
     (count - 1) * spacing;
    // item 1654
    return y;
}

function addChar(data, c) {
    // item 1220
    data.current.push(c);
}

function addCharToNorm(self, ch, pos, lineNo) {
    // item 3005
    self.map[self.result.length] = {
    	pos: pos,
    	lineNo: lineNo
    }
    // item 3004
    self.result += ch
}

function addHangingToken(self, token) {
    // item 3357
    addLineToBlock(self)
    // item 3358
    addLongToken(
    	self,
    	token
    )
}

function addItem(item) {
    // item 17
    if (item.id) {
        
    } else {
        // item 20
        throwError("Missing positive item.id");
    }
    // item 7
    if (this.items[item.id]) {
        // item 10
        throwError("Item with id '" + item.id + "' already exists");
    }
    // item 11
    if (item.isLine) {
        // item 14
        this.edges[item.id] = item;
        // item 16
        connectEdge(
        	this,
        	item.id,
        	item.head,
        	item.tail,
        	item.isVertical
        );
    } else {
        // item 15
        this.nodes[item.id] = item;
        // item 21
        item.left = null;
        item.up = null;
        item.right = null;
        item.down = null;
    }
    // item 6
    this.items[item.id] = item;
}

function addLineToBlock(state) {
    // item 1959
    if (state.line.tokens.length == 0) {
        
    } else {
        // item 1942
        state.block.lines.push(state.line)
        state.x = 0
        state.ws = []
        // item 1941
        state.line = new Line()
    }
}

function addLineToTeam(graph, id, teams, lineMethod) {
    // item 1029
    var team = teams.byItem[id];
    // item 1026
    if (team) {
        
    } else {
        // item 1031
        team = id;
        // item 788
        var line = lineMethod(graph, id);
        // item 10320001
        var _ind1032 = 0;
        var _col1032 = line;
        var _len1032 = _col1032.length;
        while (true) {
            // item 10320002
            if (_ind1032 < _len1032) {
                
            } else {
                break;
            }
            // item 10320004
            var itemId = _col1032[_ind1032];
            // item 1034
            teams.add(team, itemId);
            // item 10320003
            _ind1032++;
        }
    }
}

function addLogicalTreeNode(tree, node) {
    // item 3173
    var content = copyObject(node.content)
    // item 3172
    var nodeCopy = {
    	id: node.id,
    	type: node.type,
    	w: node.w,
    	h: node.h,
    	content: content
    }
    // item 3411
    if ("a" in node) {
        // item 3414
        nodeCopy.a = node.a
    }
    // item 3174
    tree.nodes[node.id] = nodeCopy
}

function addLongToken(self, token) {
    while (true) {
        // item 3373
        if (token.width > self.width) {
            
        } else {
            break;
        }
        // item 3369
        var cut = findFirstFit(
        	self.render,
        	token,
        	self.width
        )
        // item 3371
        addTokenToLine(
        	self,
        	cut
        )
        // item 3372
        addLineToBlock(self)
        // item 3370
        token = getRest(token, cut)
        // item 3381
        token.width = findTokenWidth(
        	self.render,
        	token,
        	self.x
        )
    }
    // item 3378
    if (token.text) {
        // item 3376
        addTokenToLine(
        	self,
        	token
        )
    }
}

function addMate(teams, id, memberId) {
    // item 1060
    if (memberId) {
        // item 1059
        var teamId = teams.byItem[memberId];
        var bucket = teams.byTeam[teamId];
        bucket.add(id);
        teams.byItem[id] = teamId;
    }
}

function addMateDown(graph, teams, id, memberId) {
    // item 1070
    if (memberId) {
        // item 1068
        var hor = findHorizontal(graph, id);
        // item 10730001
        var _ind1073 = 0;
        var _col1073 = hor;
        var _len1073 = _col1073.length;
        while (true) {
            // item 10730002
            if (_ind1073 < _len1073) {
                
            } else {
                break;
            }
            // item 10730004
            var hid = _col1073[_ind1073];
            // item 1075
            addMate(teams, hid, memberId);
            // item 10730003
            _ind1073++;
        }
    }
}

function addMateLeft(graph, teams, id, memberId) {
    // item 1082
    if (memberId) {
        // item 1080
        var ver = findVertical(graph, id);
        // item 10850001
        var _ind1085 = 0;
        var _col1085 = ver;
        var _len1085 = _col1085.length;
        while (true) {
            // item 10850002
            if (_ind1085 < _len1085) {
                
            } else {
                break;
            }
            // item 10850004
            var vid = _col1085[_ind1085];
            // item 1087
            addMate(teams, vid, memberId);
            // item 10850003
            _ind1085++;
        }
    }
}

function addNotNilToSet(set, item) {
    // item 942
    if (item) {
        // item 945
        set[item] = true;
    }
}

function addPendingWs(state) {
    // item 32570001
    var _ind3257 = 0;
    var _col3257 = state.ws;
    var _len3257 = _col3257.length;
    while (true) {
        // item 32570002
        if (_ind3257 < _len3257) {
            
        } else {
            break;
        }
        // item 32570004
        var token = _col3257[_ind3257];
        // item 3256
        addTokenToLine(state, token)
        // item 32570003
        _ind3257++;
    }
    // item 3259
    state.ws = []
}

function addRange(src, dst) {
    // item 30460001
    var _ind3046 = 0;
    var _col3046 = src;
    var _len3046 = _col3046.length;
    while (true) {
        // item 30460002
        if (_ind3046 < _len3046) {
            
        } else {
            break;
        }
        // item 30460004
        var item = _col3046[_ind3046];
        // item 3048
        dst.push(item)
        // item 30460003
        _ind3046++;
    }
}

function addSpaceTokens(input) {
    // item 640
    var i, token;
    var result = [];
    var length = input.length;
    // item 6410001
    i = 0;
    while (true) {
        // item 6410002
        if (i < length) {
            
        } else {
            break;
        }
        // item 647
        token = input[i];
        // item 649
        if (token == "") {
            
        } else {
            // item 652
            result.push(token);
        }
        // item 643
        if (i == length - 1) {
            
        } else {
            // item 646
            result.push(" ");
        }
        // item 6410003
        i++;
    }
    // item 648
    return result;
}

function addToLine(line, token) {
    // item 1932
    line.tokens.push(token);
    line.width += token.width;
}

function addTokenToLine(state, token) {
    // item 1953
    token.left = state.x;
    // item 1935
    addToLine(state.line, token)
    state.x += token.width
}

function addWs(state, token) {
    // item 3271
    if (state.run.length == 0) {
        
    } else {
        // item 3268
        state.ws.push(token)
    }
}

function appendAccum(accum, line) {
    // item 608
    if (line.length > 0) {
        // item 607
        var text = line.join("");
        accum.push(text);
    }
}

function arrayToString(chars) {
    // item 1331
    var result = "";
    // item 13290001
    var _ind1329 = 0;
    var _col1329 = chars;
    var _len1329 = _col1329.length;
    while (true) {
        // item 13290002
        if (_ind1329 < _len1329) {
            
        } else {
            break;
        }
        // item 13290004
        var chr = _col1329[_ind1329];
        // item 1332
        result = result + String.fromCharCode(chr);
        // item 13290003
        _ind1329++;
    }
    // item 1333
    return result;
}

function assertNotNull(value, name) {
    // item 367
    if (value) {
        
    } else {
        // item 370
        throwError("Value is empty: " + name);
    }
}

function assertNull(value, name) {
    // item 252
    if (value) {
        // item 255
        throwError("Value not empty: " + name);
    }
}

function boxFromPoint(x, y, w, h) {
    // item 215
    return new Box(
    	x - w,
    	y - h,
    	x + w,
    	y + h
    );
}

function boxesIntersect(box1, box2) {
    // item 984
    if ((((box1.right <= box2.left) || (box2.right <= box1.left)) || (box1.bottom <= box2.top)) || (box2.bottom <= box1.top)) {
        // item 990
        return false;
    } else {
        // item 991
        return true;
    }
}

function buildBlock(render, text) {
    // item 1397
    var tokens = tokenize(text, false)
    // item 1398
    var line = new Line();
    var block = new TextBlock();
    var x = 0;
    // item 13990001
    var _ind1399 = 0;
    var _col1399 = tokens;
    var _len1399 = _col1399.length;
    while (true) {
        // item 13990002
        if (_ind1399 < _len1399) {
            
        } else {
            break;
        }
        // item 13990004
        var token = _col1399[_ind1399];
        // item 1403
        if (token.text == "\n") {
            // item 1407
            line.width = x;
            block.lines.push(line);
            // item 1417
            line = new Line();
            x = 0;
        } else {
            // item 1401
            var tokenWidth = findTokenWidth(
            	render,
            	token,
            	x
            );
            // item 1402
            token.left = x;
            token.width = tokenWidth;
            x += tokenWidth;
            // item 1406
            line.tokens.push(token);
        }
        // item 13990003
        _ind1399++;
    }
    // item 1408
    line.width = x;
    block.lines.push(line);
    // item 1413
    var lineHeight = render.getFontHeight();
    var spacing = Math.round(
      lineHeight * (Config.LINE_SPACING - 1)
    );
    // item 1411
    var width = 0;
    var y = lineHeight;
    // item 14090001
    var _ind1409 = 0;
    var _col1409 = block.lines;
    var _len1409 = _col1409.length;
    while (true) {
        // item 14090002
        if (_ind1409 < _len1409) {
            
        } else {
            break;
        }
        // item 14090004
        var line = _col1409[_ind1409];
        // item 1412
        width = Math.max(width, line.width);
        // item 1414
        line.bottom = y;
        y += (lineHeight + spacing);
        // item 14090003
        _ind1409++;
    }
    // item 1415
    block.width = width;
    // item 1416
    var count = block.lines.length;
    block.height = count * lineHeight +
     (count - 1) * spacing;
    // item 1435
    return block;
}

function buildFlow(render, text, width) {
    // item 1456
    var tokens = tokenize(text, false)
    // item 1457
    var lines = [];
    var line = new Line();
    // item 14580001
    var _ind1458 = 0;
    var _col1458 = tokens;
    var _len1458 = _col1458.length;
    while (true) {
        // item 14580002
        if (_ind1458 < _len1458) {
            
        } else {
            break;
        }
        // item 14580004
        var token = _col1458[_ind1458];
        // item 1462
        if (token.text == "\n") {
            // item 1466
            lines.push(line);
            // item 1468
            line = new Line();
        } else {
            // item 1465
            line.tokens.push(token)
        }
        // item 14580003
        _ind1458++;
    }
    // item 1467
    lines.push(line);
    // item 1477
    var y = 0;
    var block = new TextBlock();
    // item 14690001
    var _ind1469 = 0;
    var _col1469 = lines;
    var _len1469 = _col1469.length;
    while (true) {
        // item 14690002
        if (_ind1469 < _len1469) {
            
        } else {
            break;
        }
        // item 14690004
        var line = _col1469[_ind1469];
        // item 1472
        var paragraph = flowParagraph(
        	render,
        	line.tokens,
        	width
        );
        // item 1480
        y = addBelow(render, block, paragraph, y);
        // item 14690003
        _ind1469++;
    }
    // item 1486
    block.width = width;
    block.height = y;
    // item 1487
    return block;
}

function buildFontFace(italic, bold, family) {
    // item 3394
    var face = italic + "-" + bold +
     "-" + family
    // item 3392
    return face
}

function buildFontString(italic, bold, size, family) {
    // item 2217
    var result = ""
    // item 2218
    if (italic) {
        // item 2221
        result += "italic "
    }
    // item 2222
    if (bold) {
        // item 2225
        result += "bold "
    }
    // item 2226
    result += size.toString() + "px "
    // item 2265
    if (family.indexOf(" ") == -1) {
        
    } else {
        // item 2268
        family = "'" + family + "'"
    }
    // item 2227
    result += family
    // item 2228
    return result
}

function buildTeams(expands) {
    // item 855
    this.verticals = null;
    this.horizontals = null;
    // item 770
    var block = new TeamsBlock();
    // item 1000
    block.itemIds = Object.keys(this.items);
    // item 3155
    var hor = new Graph()
    var ver = new Graph()
    // item 7680001
    var _ind768 = 0;
    var _col768 = this.nodes;
    var _keys768 = Object.keys(_col768); 
    var _len768 = _keys768.length;
    while (true) {
        // item 7680002
        if (_ind768 < _len768) {
            
        } else {
            break;
        }
        // item 7680004
        var id = _keys768[_ind768]; var node = _col768[id];
        // item 3156
        hor.connect(id, id)
        hor.connect(id, node.up)
        hor.connect(id, node.down)
        // item 865
        ver.connect(id, id)
        ver.connect(id, node.left)
        ver.connect(id, node.right)
        // item 1049
        if (expands) {
            // item 1052
            var vmate = expands.vertical(this, node)
            var hmate = expands.horizontal(this, node)
            // item 3159
            hor.connect(id, hmate)
            ver.connect(id, vmate)
        }
        // item 7680003
        _ind768++;
    }
    // item 3160
    block.up = ver.getIslands()
    block.left = hor.getIslands()
    // item 772
    return block
}

function buildTeamsOld(expands) {
    // item 3134
    this.verticals = null;
    this.horizontals = null;
    // item 3130
    var block = new TeamsBlock();
    // item 3137
    block.itemIds = Object.keys(this.items);
    // item 31280001
    var _ind3128 = 0;
    var _col3128 = this.items;
    var _keys3128 = Object.keys(_col3128); 
    var _len3128 = _keys3128.length;
    while (true) {
        // item 31280002
        if (_ind3128 < _len3128) {
            
        } else {
            break;
        }
        // item 31280004
        var id = _keys3128[_ind3128]; var item = _col3128[id];
        // item 3135
        addLineToTeam(
        	this,
        	id,
        	block.left,
        	findVertical
        );
        // item 3136
        addLineToTeam(
        	this,
        	id,
        	block.up,
        	findHorizontal
        );
        // item 31280003
        _ind3128++;
    }
    // item 3149
    if (expands) {
        // item 3154
        var graph = this;
        // item 31470001
        var _ind3147 = 0;
        var _col3147 = this.items;
        var _keys3147 = Object.keys(_col3147); 
        var _len3147 = _keys3147.length;
        while (true) {
            // item 31470002
            if (_ind3147 < _len3147) {
                
            } else {
                break;
            }
            // item 31470004
            var id = _keys3147[_ind3147]; var item = _col3147[id];
            // item 3152
            var vmate = expands.vertical(graph, item);
            var hmate = expands.horizontal(graph, item);
            // item 3153
            addMateDown(graph, block.up, id, vmate);
            addMateLeft(graph, block.left, id, hmate);
            // item 31470003
            _ind3147++;
        }
    }
    // item 3131
    return block;
}

function canInsertInHorizontal(graph, edge) {
    // item 2264
    if (edge.isVertical) {
        // item 2263
        return false
    } else {
        // item 2256
        var left = graph.getHead(edge)
        var right = graph.getTail(edge)
        // item 2257
        if (((left.type == "question") && (right.type == "junction")) && (right.up)) {
            // item 2262
            return true
        } else {
            // item 2263
            return false
        }
    }
}

function caretToNonSpaces(text, caret) {
    // item 2689
    var result = 0
    var i
    // item 2684
    var count = Math.min(
    	text.length,
    	caret
    )
    // item 26820001
    i = 0;
    while (true) {
        // item 26820002
        if (i < count) {
            
        } else {
            break;
        }
        // item 2685
        if (text[i] == " ") {
            
        } else {
            // item 2688
            result++
        }
        // item 26820003
        i++;
    }
    // item 2690
    return result
}

function checkCardNumber(number) {
    // item 2534
    if (number) {
        // item 2533
        var digits = parseCardNumber(number)
        // item 2540
        if ((((digits) && (digits.length >= 13)) && (digits.length <= 19)) && (luhn(digits))) {
            // item 2537
            var result = formatCardNumber(digits)
            // item 2605
            return result
        } else {
            // item 2538
            return null
        }
    } else {
        // item 2538
        return null
    }
}

function checkEdge(edge, head, tail) {
    // item 544
    if (edge.isVertical) {
        // item 551
        if ((head.x == tail.x) && (head.y < tail.y)) {
            // item 555
            return null;
        } else {
            // item 556
            return "Invalid node positons for V edge:" + edge.id;
        }
    } else {
        // item 547
        if ((head.y == tail.y) && (head.x < tail.x)) {
            // item 554
            return null;
        } else {
            // item 549
            return "Invalid node positons for H edge:" + edge.id;
        }
    }
}

function checkEdges() {
    var error = null
    var edges = this.edges
    var edgeIds = Object.keys(edges)
    var count = edgeIds.length
    var _next_item_ = 0;
    _next_item_ = 5080001;
    while (true) {
        if (_next_item_ === 5080001) {
            var _ind508 = 0;
            var _col508 = edgeIds;
            var _len508 = _col508.length;
            _next_item_ = 5080002;
    
        } else if (_next_item_ === 5080002) {
            if (_ind508 < _len508) {
                // item 5080004
                var id = _col508[_ind508];
                _next_item_ = 2386;
            } else {
                // item 2389
                var i, ii
                _next_item_ = 23870001;
            }
    
        } else if (_next_item_ === 2386) {
            var edge = edges[id]
            _next_item_ = 507;
    
        } else if (_next_item_ === 507) {
            var head = this.getNode(edge.head);
            var tail = this.getNode(edge.tail);
            _next_item_ = 536;
    
        } else if (_next_item_ === 536) {
            error = checkEdge(edge, head, tail);
            _next_item_ = 510;
    
        } else if (_next_item_ === 510) {
            if (error) {
                _next_item_ = 2395;
            } else {
                // item 5080003
                _ind508++;
                _next_item_ = 5080002;
            }
    
        } else if (_next_item_ === 23870001) {
            i = 0;
            _next_item_ = 23870002;
    
        } else if (_next_item_ === 23870002) {
            if (i < count) {
                // item 23900001
                ii = i + 1;
                _next_item_ = 23900002;
            } else {
                _next_item_ = 2395;
            }
    
        } else if (_next_item_ === 23900002) {
            if (ii < count) {
                // item 2398
                var id1 = edgeIds[i]
                var id2 = edgeIds[ii]
                _next_item_ = 2392;
            } else {
                // item 23870003
                i++;
                _next_item_ = 23870002;
            }
    
        } else if (_next_item_ === 2392) {
            if (this.edgesIntersect(id1, id2)) {
                // item 2397
                error = "Edges " + id1
                 + " " + id2 + " intersect"
                _next_item_ = 2395;
            } else {
                // item 23900003
                ii++;
                _next_item_ = 23900002;
            }
    
        } else if (_next_item_ === 2395) {
            return error
    
        }
    }
}

function checkEmail(email) {
    // item 2758
    if (email) {
        // item 2763
        email = email.trim()
        // item 2764
        if (email) {
            // item 2765
            var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            // item 2766
            if (re.test(email)) {
                // item 2762
                return true
            } else {
                // item 2761
                return false
            }
        } else {
            // item 2761
            return false
        }
    } else {
        // item 2761
        return false
    }
}

function checkPassword(pass, pass2) {
    // item 2841
    if (pass) {
        // item 2845
        if (pass == pass2) {
            // item 2848
            if (pass.length < 6) {
                // item 2850
                return "ERR_PASSWORD_TOO_SHORT"
            } else {
                // item 2851
                return null
            }
        } else {
            // item 2847
            return "ERR_PASSWORDS_DIFFERENT"
        }
    } else {
        // item 2844
        return "ERR_PASSWORD_EMPTY"
    }
}

function checkSpaceName(name) {
    // item 2373
    if (name) {
        // item 2360
        name = name.trim()
        // item 2361
        if (name.length == 0) {
            // item 2365
            return "ERR_EMPTY_NAME"
        } else {
            // item 2369
            if (name.length < 2) {
                // item 2371
                return "ERR_NAME_TOO_SHORT"
            } else {
                // item 2366
                if (name.length > 70) {
                    // item 2368
                    return "ERR_NAME_TOO_LONG"
                } else {
                    // item 2374
                    if (containsValidChars(name)) {
                        // item 2364
                        return null
                    } else {
                        // item 2372
                        return "ERR_NAME_INVALID"
                    }
                }
            }
        }
    } else {
        // item 2365
        return "ERR_EMPTY_NAME"
    }
}

function cloneGraph() {
    // item 458
    var clone = new Manhattan();
    // item 4630001
    var _ind463 = 0;
    var _col463 = this.nodes;
    var _keys463 = Object.keys(_col463); 
    var _len463 = _keys463.length;
    while (true) {
        // item 4630002
        if (_ind463 < _len463) {
            
        } else {
            break;
        }
        // item 4630004
        var _ = _keys463[_ind463]; var node = _col463[_];
        // item 466
        var node2 = copyObject(node);
        // item 465
        clone.addItem(node2);
        // item 4630003
        _ind463++;
    }
    // item 4590001
    var _ind459 = 0;
    var _col459 = this.edges;
    var _keys459 = Object.keys(_col459); 
    var _len459 = _keys459.length;
    while (true) {
        // item 4590002
        if (_ind459 < _len459) {
            
        } else {
            break;
        }
        // item 4590004
        var _ = _keys459[_ind459]; var edge = _col459[_];
        // item 462
        var edge2 = copyObject(edge);
        // item 461
        clone.addItem(edge2);
        // item 4590003
        _ind459++;
    }
    // item 467
    return clone;
}

function compareByProperty(leftItem, rightItem, getter) {
    // item 3545
    var left = getter(leftItem)
    var right = getter(rightItem)
    // item 3546
    if (left < right) {
        // item 3549
        return -1
    } else {
        // item 3550
        if (left > right) {
            // item 3554
            return 1
        } else {
            // item 3553
            return 0
        }
    }
}

function connectEdge(manhattan, id, headId, tailId, isVertical) {
    // item 162
    var head = manhattan.getNode(headId);
    var tail = manhattan.getNode(tailId);
    // item 163
    if (isVertical) {
        // item 174
        if ((head.x == tail.x) && (head.y < tail.y)) {
            // item 169
            assertNull(head.down, "head.down");
            assertNull(tail.up, "tail.up");
            // item 168
            head.down = id;
            tail.up = id;
        } else {
            // item 177
            throwError("Invalid node positons for edge:" 
             + headId + ", " + tailId);
        }
    } else {
        // item 170
        if ((head.y == tail.y) && (head.x < tail.x)) {
            // item 167
            assertNull(head.right, "head.right");
            assertNull(tail.left, "tail.left");
            // item 166
            head.right = id;
            tail.left = id;
        } else {
            // item 172
            throwError(
            "Invalid node positons for edge:" 
             + headId + ", " + tailId);
        }
    }
}

function containsIdentifierChars(text) {
    // item 3453
    var length = text.length
    // item 34410001
    var i = 0;
    while (true) {
        // item 34410002
        if (i < length) {
            
        } else {
            // item 3459
            return true
        }
        // item 3449
        var c = text.charCodeAt(i);
        // item 3443
        if (((isDigit(c)) || (isLatin(c))) || (c == Lex.UNDER)) {
            
        } else {
            // item 3460
            return false
        }
        // item 34410003
        i++;
    }
}

function containsValidChars(text) {
    // item 2648
    var length = text.length
    var hasAlphaDigit = false
    // item 26360001
    var i = 0;
    while (true) {
        // item 26360002
        if (i < length) {
            
        } else {
            // item 2654
            return hasAlphaDigit
        }
        // item 2644
        var c = text.charCodeAt(i);
        // item 2638
        if ((isDigit(c)) || (isLatin(c))) {
            // item 2652
            hasAlphaDigit = true
        } else {
            // item 2645
            if (((c == Lex.UNDER) || (c == Lex.DASH)) || (c == Lex.DOT)) {
                
            } else {
                // item 2655
                return false
            }
        }
        // item 26360003
        i++;
    }
}

function copyBox(box) {
    // item 201
    var copy = new Box(
        box.left,
        box.top,
        box.right,
        box.bottom
    );
    // item 202
    return copy;
}

function copyFields(src, dst) {
    // item 3507
    if (src) {
        // item 35040001
        var _ind3504 = 0;
        var _col3504 = src;
        var _keys3504 = Object.keys(_col3504); 
        var _len3504 = _keys3504.length;
        while (true) {
            // item 35040002
            if (_ind3504 < _len3504) {
                
            } else {
                break;
            }
            // item 35040004
            var key = _keys3504[_ind3504]; var value = _col3504[key];
            // item 3506
            dst[key] = value
            // item 35040003
            _ind3504++;
        }
    }
}

function copyItem(original) {
    // item 1712
    var ints = globals.intFields;
    var bools = globals.boolFields;
    var forbidden = globals.forbidden;
    var strings = globals.stringFields;
    // item 1713
    var copy = {};
    var content = null;
    // item 17150001
    var _ind1715 = 0;
    var _col1715 = original;
    var _keys1715 = Object.keys(_col1715); 
    var _len1715 = _keys1715.length;
    while (true) {
        // item 17150002
        if (_ind1715 < _len1715) {
            
        } else {
            break;
        }
        // item 17150004
        var key = _keys1715[_ind1715]; var value = _col1715[key];
        // item 1717
        var enrichedValue = null;
        // item 1718
        if (((key in forbidden) || (value === null)) || (value === undefined)) {
            
        } else {
            // item 1728
            if (key in ints) {
                // item 1735
                enrichedValue = parseInt(value, 10);
                // item 1736
                if (isFinite(enrichedValue)) {
                    // item 1734
                    if (enrichedValue == null) {
                        
                    } else {
                        // item 1733
                        copy[key] = enrichedValue;
                    }
                }
            } else {
                // item 1723
                if (key == "text") {
                    // item 1755
                    if (content) {
                        
                    } else {
                        // item 1725
                        copy.content = new Content(
                        	String(value),
                        	""
                        );
                    }
                    // item 1740
                    enrichedValue = null;
                } else {
                    // item 1752
                    if (key == "content") {
                        // item 1754
                        content = value;
                        enrichedValue = value;
                    } else {
                        // item 1726
                        if (key in bools) {
                            // item 1738
                            enrichedValue = parseBool(value);
                        } else {
                            // item 1730
                            if (key in strings) {
                                // item 1737
                                enrichedValue = String(value);
                            } else {
                                // item 1739
                                enrichedValue = value;
                            }
                        }
                    }
                }
                // item 1734
                if (enrichedValue == null) {
                    
                } else {
                    // item 1733
                    copy[key] = enrichedValue;
                }
            }
        }
        // item 17150003
        _ind1715++;
    }
    // item 1714
    return copy;
}

function copyItemSet(oldItems) {
    // item 1702
    var items = {};
    // item 17040001
    var _ind1704 = 0;
    var _col1704 = oldItems;
    var _keys1704 = Object.keys(_col1704); 
    var _len1704 = _keys1704.length;
    while (true) {
        // item 17040002
        if (_ind1704 < _len1704) {
            
        } else {
            break;
        }
        // item 17040004
        var id = _keys1704[_ind1704]; var item = _col1704[id];
        // item 1706
        var copy = copyItem(item);
        items[id] = copy;
        // item 17040003
        _ind1704++;
    }
    // item 1703
    return items;
}

function copyList(src) {
    // item 1986
    var result = []
    // item 1989
    if (src) {
        // item 19840001
        var _ind1984 = 0;
        var _col1984 = src;
        var _len1984 = _col1984.length;
        while (true) {
            // item 19840002
            if (_ind1984 < _len1984) {
                
            } else {
                break;
            }
            // item 19840004
            var value = _col1984[_ind1984];
            // item 1988
            result.push(value)
            // item 19840003
            _ind1984++;
        }
    }
    // item 1987
    return result
}

function copyObject(src) {
    // item 231
    var result = {};
    // item 234
    if (src) {
        // item 2290001
        var _ind229 = 0;
        var _col229 = src;
        var _keys229 = Object.keys(_col229); 
        var _len229 = _keys229.length;
        while (true) {
            // item 2290002
            if (_ind229 < _len229) {
                
            } else {
                break;
            }
            // item 2290004
            var key = _keys229[_ind229]; var value = _col229[key];
            // item 233
            result[key] = value;
            // item 2290003
            _ind229++;
        }
    }
    // item 232
    return result;
}

function copyObjectDeep(src) {
    // item 663
    if ((src) && (typeof src == "object")) {
        // item 2862
        var result, copy
        // item 2863
        if (Array.isArray(src)) {
            // item 2868
            result = []
            // item 28660001
            var _ind2866 = 0;
            var _col2866 = src;
            var _len2866 = _col2866.length;
            while (true) {
                // item 28660002
                if (_ind2866 < _len2866) {
                    
                } else {
                    break;
                }
                // item 28660004
                var item = _col2866[_ind2866];
                // item 2876
                copy = copyObjectDeep(item)
                // item 2877
                result.push(copy)
                // item 28660003
                _ind2866++;
            }
        } else {
            // item 660
            result = {}
            // item 6580001
            var _ind658 = 0;
            var _col658 = src;
            var _keys658 = Object.keys(_col658); 
            var _len658 = _keys658.length;
            while (true) {
                // item 6580002
                if (_ind658 < _len658) {
                    
                } else {
                    break;
                }
                // item 6580004
                var key = _keys658[_ind658]; var value = _col658[key];
                // item 669
                copy = copyObjectDeep(value)
                // item 2874
                result[key] = copy
                // item 6580003
                _ind658++;
            }
        }
        // item 661
        return result
    } else {
        // item 670
        return src
    }
}

function copyPoint(point) {
    // item 394
    return new Point(
    	point.x,
    	point.y
    );
}

function copySize(size) {
    // item 2717
    return new Size(
    	size.w,
    	size.h
    )
}

function count(object) {
    // item 2030
    if (object) {
        // item 2028
        var keys = Object.keys(object)
        // item 2029
        return keys.length
    } else {
        // item 2033
        return 0
    }
}

function createIdentifier(data) {
    // item 1226
    createToken(data, "id");
}

function createLogicalTreeLinks(tree, nodeId, isVertical, children) {
    // item 3181
    var type
    // item 3182
    if (isVertical) {
        // item 3186
        type = "vertical"
    } else {
        // item 3185
        type = "horizontal"
    }
    // item 3180
    var links = {
    	type: type,
    	children: children
    }
    // item 3187
    tree.links[nodeId] = links
}

function createNumber(data) {
    // item 1242
    createToken(data, "num");
}

function createOperator(data) {
    // item 1248
    createToken(data, "op");
}

function createSpace(data) {
    // item 1368
    createToken(data, "ws");
}

function createToken(data, type) {
    // item 1232
    if (data.current.length === 0) {
        
    } else {
        // item 1235
        var text = data.current;
        data.current = [];
        // item 1236
        var str = arrayToString(text);
        var token = new Token(type, str);
        data.tokens.push(token);
    }
}

function daysToSecs(days) {
    // item 2453
    return days * 24 * 3600
}

function deleteFirst(array, criterion) {
    // item 3228
    var i
    // item 3217
    if (array) {
        // item 32210001
        i = 0;
        while (true) {
            // item 32210002
            if (i < array.length) {
                
            } else {
                // item 3223
                return null
            }
            // item 3227
            var item = array[i]
            // item 3224
            if (criterion(item)) {
                // item 3229
                array.splice(i, 1)
                // item 3226
                return item
            }
            // item 32210003
            i++;
        }
    } else {
        // item 3220
        return null
    }
}

function disconnectEdge(manhattan, id, headId, tailId, isVertical) {
    // item 453
    var head = manhattan.getNode(headId);
    var tail = manhattan.getNode(tailId);
    // item 184
    if (isVertical) {
        // item 190
        assertNotNull(head.down, "head.down");
        assertNotNull(tail.up, "tail.up");
        // item 189
        head.down = null;
        tail.up = null;
    } else {
        // item 188
        assertNotNull(head.right, "head.right");
        assertNotNull(tail.left, "tail.left");
        // item 187
        head.right = null;
        tail.left = null;
    }
}

function distanceToPoint(x, y) {
    // item 2298
    return (this.a * x + this.b * y + this.c) / this.div
}

function edgesIntersect(edgeId1, edgeId2) {
    // item 2404
    var edges = this.edges
    var nodes = this.nodes
    var edge1 = edges[edgeId1]
    var edge2 = edges[edgeId2]
    // item 2405
    if (edge1.isVertical) {
        // item 2408
        if (edge2.isVertical) {
            // item 2414
            return false
        } else {
            // item 2440
            return edgesIntersectCore(
            	this,
            	edge1,
            	edge2
            )
        }
    } else {
        // item 2411
        if (edge2.isVertical) {
            // item 2439
            return edgesIntersectCore(
            	this,
            	edge2,
            	edge1
            )
        } else {
            // item 2413
            return false
        }
    }
}

function edgesIntersectCore(graph, vedge, hedge) {
    // item 2422
    var nodes = graph.nodes
    // item 2420
    var up = nodes[vedge.head]
    var down = nodes[vedge.tail]
    // item 2421
    var left = nodes[hedge.head]
    var right = nodes[hedge.tail]
    // item 2423
    if (((((left.y > up.y) && (left.y < down.y)) && (left.x <= up.x)) && (right.x >= up.x)) || ((((left.y >= up.y) && (left.y <= down.y)) && (left.x < up.x)) && (right.x > up.x))) {
        // item 2431
        return true
    } else {
        // item 2438
        return false
    }
}

function endsWith(str, substr) {
    // item 3491
    if (((str) && (substr)) && (str.length >= substr.length)) {
        // item 3495
        var sub = str.substring(
        	str.length - substr.length,
        	str.length
        )
        // item 3498
        return sub == substr
    } else {
        // item 3496
        return false
    }
}

function enumerateManhattan(nodeId, nodes, edges) {
    // item 131
    var id;
    // item 117
    if (nodeId in nodes) {
        
    } else {
        // item 126
        nodes[nodeId] = true;
        // item 123
        var node = this.getNode(nodeId);
        // item 120
        if (node.left) {
            // item 124
            edges[node.left] = true;
            id = this.getNodeLeft(node);
            // item 125
            this.enumerateManhattan(
            	id,
            	nodes,
            	edges
            );
        }
        // item 127
        if (node.up) {
            // item 130
            edges[node.up] = true;
            var id = this.getNodeUp(node);
            // item 132
            this.enumerateManhattan(
            	id,
            	nodes,
            	edges
            );
        }
        // item 133
        if (node.right) {
            // item 136
            edges[node.right] = true;
            var id = this.getNodeRight(node);
            // item 137
            this.enumerateManhattan(
            	id,
            	nodes,
            	edges
            );
        }
        // item 138
        if (node.down) {
            // item 141
            edges[node.down] = true;
            var id = this.getNodeDown(node);
            // item 142
            this.enumerateManhattan(
            	id,
            	nodes,
            	edges
            );
        }
    }
}

function expandBox(box, amount) {
    // item 208
    var copy = new Box(
            box.left - amount,
            box.top - amount,
            box.right + amount,
            box.bottom + amount
    );
    // item 209
    return copy;
}

function extractUrls(text) {
    // item 2826
    var tokens = split(text, gUrlSeparators)
    // item 2827
    return tokens.filter(isUrl)
}

function findAngle(x1, y1, x2, y2) {
    // item 2725
    var h = x2 - x1
    var v = y2 - y1
    // item 2724
    var hyp = Math.sqrt(h * h + v * v)
    // item 2726
    var cos = h / hyp
    // item 2727
    var angle = Math.acos(cos)
    // item 2728
    if (v >= 0) {
        // item 2723
        return angle
    } else {
        // item 2731
        return -angle
    }
}

function findFirst(array, criterion) {
    // item 3201
    if (array) {
        // item 32050001
        var _ind3205 = 0;
        var _col3205 = array;
        var _len3205 = _col3205.length;
        while (true) {
            // item 32050002
            if (_ind3205 < _len3205) {
                
            } else {
                // item 3207
                return null
            }
            // item 32050004
            var item = _col3205[_ind3205];
            // item 3208
            if (criterion(item)) {
                // item 3210
                return item
            }
            // item 32050003
            _ind3205++;
        }
    } else {
        // item 3204
        return null
    }
}

function findFirstFit(render, token, width) {
    // item 1542
    var text = token.text;
    // item 1543
    var previous = text.substring(0, 1);
    var prevLen = render.measureTextWidth(
    	previous
    );
    // item 15400001
    var i = 2;
    while (true) {
        // item 15400002
        if (i < text.length) {
            
        } else {
            break;
        }
        // item 1544
        var sub = text.substring(0, i);
        var runWidth = render.measureTextWidth(sub);
        // item 1545
        if (runWidth > width) {
            break;
        }
        // item 1549
        previous = sub;
        prevLen = runWidth;
        // item 15400003
        i++;
    }
    // item 1548
    var output = new Token(
    	token.type,
    	previous
    );
    output.width = prevLen;
    output.left = 0;
    // item 1561
    return output;
}

function findHorizontal(graph, itemId) {
    // item 930
    var cached = graph.horizontals;
    // item 846
    if (cached) {
        
    } else {
        // item 852
        cached = {};
        graph.horizontals = cached;
    }
    // item 849
    if (itemId in cached) {
        // item 853
        return cached[itemId];
    } else {
        // item 812
        var result = graph.getHorizontal(itemId);
        // item 854
        cached[itemId] = result;
        // item 815
        return result;
    }
}

function findInList(startNode, getNext, criterion) {
    // item 3484
    var node = startNode
    while (true) {
        // item 3473
        if ((node) && (!(criterion(node)))) {
            
        } else {
            break;
        }
        // item 3483
        node = getNext(node)
    }
    // item 3480
    return node
}

function findManyInLine(lineNo, line, needle, result, original) {
    // item 2985
    var first
    var current = line
    var start = 0
    while (true) {
        // item 2984
        first = current.indexOf(needle)
        // item 2986
        if (first == -1) {
            break;
        }
        // item 2993
        var after = first + needle.length
        var last = start + after
        // item 2989
        var item = {
        	line: original,
        	first: first + start + 1,
        	last: last,
        	lineNo: lineNo
        }
        // item 2990
        result.push(item)
        // item 2991
        current = current.substring(after)
        // item 2992
        start += after
    }
}

function findManySubstrings(haystack, needle, ignoreCase) {
    // item 2973
    var original, i
    // item 2963
    var result = []
    // item 2965
    if ((haystack) && (needle)) {
        // item 2969
        var lines = haystack.split("\n")
        // item 29700001
        i = 0;
        while (true) {
            // item 29700002
            if (i < lines.length) {
                
            } else {
                break;
            }
            // item 2978
            line = lines[i]
            original = line
            // item 2974
            if (ignoreCase) {
                // item 2977
                line = line.toLowerCase()
            }
            // item 2972
            findManyInLine(
            	i + 1,
            	line,
            	needle,
            	result,
            	original
            )
            // item 29700003
            i++;
        }
    }
    // item 2964
    return result
}

function findNormSubstring(haystack, needle) {
    // item 3049
    if ((haystack) && (needle)) {
        // item 3027
        var norm = normalizeString(haystack)
        var start = norm.text.indexOf(needle)
        // item 3028
        if (start == -1) {
            // item 3031
            return null
        } else {
            // item 3033
            var lines = haystack.split("\n")
            // item 3034
            var firstItem = norm.map[start]
            var line = lines[firstItem.lineNo]
            var lastIndex = start + 
            	needle.length - 1
            var lastItem = norm.map[lastIndex]
            // item 3040
            if (lastItem.lineNo == firstItem.lineNo) {
                // item 3039
                var end = lastItem.pos + 1
                // item 3035
                if (end > line.length) {
                    // item 3038
                    end = line.length
                }
            } else {
                // item 3038
                end = line.length
            }
            // item 3032
            return {
            	line: line,
            	start: firstItem.pos,
            	length: end - firstItem.pos
            }
        }
    } else {
        // item 3031
        return null
    }
}

function findOnOneSide(graph, startId, propertyN, propertyE, result) {
    // item 803
    var nodeId = startId;
    while (true) {
        // item 798
        var node = graph.getNode(nodeId);
        var edgeId = node[propertyN];
        // item 799
        if (edgeId) {
            
        } else {
            break;
        }
        // item 898
        var edge = graph.getEdge(edgeId);
        nodeId = edge[propertyE];
        // item 802
        result.push(edgeId);
        result.push(nodeId);
    }
}

function findTokenWidth(render, token, x) {
    // item 1430
    var TAB = 4;
    var width;
    // item 1427
    if (token.text == "\t") {
        // item 1433
        var spaceWidth = render.measureTextWidth(" ");
        var tabWidth = TAB * spaceWidth;
        // item 1434
        var right = x + spaceWidth;
        var tabCount = Math.ceil(right / tabWidth);
        var x2 = tabCount * tabWidth;
        width = x2 - x;
    } else {
        // item 1431
        width = render.measureTextWidth(token.text);
    }
    // item 1432
    return width;
}

function findVertical(graph, itemId) {
    // item 935
    var cached = graph.verticals;
    // item 931
    if (cached) {
        
    } else {
        // item 934
        cached = {};
        graph.verticals = cached;
    }
    // item 857
    if (itemId in cached) {
        // item 863
        return cached[itemId];
    } else {
        // item 707
        var result = graph.getVertical(itemId);
        // item 864
        cached[itemId] = result;
        // item 806
        return result;
    }
}

function firstChar(text) {
    // item 1339
    return text.charCodeAt(0);
}

function flowParagraph(render, tokens, width) {
    // item 1965
    if (tokens.length == 0) {
        // item 1968
        var block = new TextBlock()
        block.lines.push(new Line())
        // item 1915
        return block
    } else {
        // item 3386
        var machine = new FlowMachine()
        // item 1856
        machine.render = render
        machine.width = width
        machine.block = new TextBlock()
        machine.line = new Line()
        machine.ws = []
        machine.x = 0
        // item 18210001
        var _ind1821 = 0;
        var _col1821 = tokens;
        var _len1821 = _col1821.length;
        while (true) {
            // item 18210002
            if (_ind1821 < _len1821) {
                
            } else {
                break;
            }
            // item 18210004
            var token = _col1821[_ind1821];
            // item 1857
            flowToken(machine, token)
            // item 18210003
            _ind1821++;
        }
        // item 1964
        addLineToBlock(machine)
        // item 1837
        return machine.block
    }
}

function flowToken(state, token) {
    // item 1863
    token.width = findTokenWidth(
    	state.render,
    	token,
    	state.x
    );
    // item 1869
    if (token.type == "ws") {
        // item 3385
        state.whitespace(token)
    } else {
        // item 3384
        state.normal(token)
    }
}

function fontToFace(fontStr) {
    // item 3401
    var font = parseFontString(fontStr)
    // item 3400
    var face = buildFontFace(
    	font.italic,
    	font.bold,
    	font.family
    )
    // item 3402
    return face
}

function formatCardNumber(digits) {
    // item 2569
    var digit0 = "0".charCodeAt(0)
    // item 2570
    var plain = ""
    var formatted = ""
    // item 2628
    if (digits) {
        // item 2627
        var length = digits.length
        var i
        // item 25720001
        i = 0;
        while (true) {
            // item 25720002
            if (i < length) {
                
            } else {
                break;
            }
            // item 2576
            if ((i > 0) && (i % 4 == 0)) {
                // item 2580
                formatted += " "
            }
            // item 2574
            var code = digits[i] + digit0
            // item 2575
            var chr = String.fromCharCode(code)
            plain += chr
            formatted += chr
            // item 25720003
            i++;
        }
    }
    // item 2571
    return {
    	plain: plain,
    	formatted: formatted
    }
}

function getEdge(id) {
    // item 49
    var item = this.edges[id];
    // item 50
    if (item) {
        // item 53
        return item;
    } else {
        // item 54
        throwError("Edge '" + id + "' not found");
    }
}

function getHead(edge) {
    // item 148
    var node = this.getNode(edge.head);
    // item 149
    return node;
}

function getHorizontal(itemId) {
    // item 936
    var nodeId = toNodeId(this, itemId);
    // item 926
    var result = [nodeId];
    // item 927
    findOnOneSide(
    	this,
    	nodeId,
    	"left",
    	"head",
    	result
    );
    // item 929
    findOnOneSide(
    	this,
    	nodeId,
    	"right",
    	"tail",
    	result
    );
    // item 928
    return result;
}

function getHorizontalRight(itemId) {
    // item 1025
    var nodeId = toNodeId(this, itemId);
    // item 1021
    var result = [];
    // item 1024
    findOnOneSide(
    	this,
    	nodeId,
    	"right",
    	"tail",
    	result
    );
    // item 1023
    return result;
}

function getItem(id) {
    // item 38
    var item = this.items[id];
    // item 39
    if (item) {
        // item 42
        return item;
    } else {
        // item 43
        throwError("Item '" + id + "' not found");
    }
}

function getMaxId() {
    // item 109
    var maxIdValue = maxIntKey(this.items)
    // item 110
    return maxIdValue;
}

function getNeighbourDown(id) {
    // item 100
    var node = this.getNode(id);
    // item 101
    var down = this.getEdge(node.down);
    // item 102
    return down.tail;
}

function getNeighbourUp(id) {
    // item 92
    var node = this.getNode(id);
    // item 93
    var up = this.getEdge(node.up);
    // item 94
    return up.head;
}

function getNode(id) {
    // item 27
    var item = this.nodes[id];
    // item 28
    if (item) {
        // item 31
        return item;
    } else {
        // item 32
        throwError("Node '" + id + "' not found");
    }
}

function getNodeDown(node) {
    // item 401
    var edge = this.getEdge(node.down);
    // item 402
    return edge.tail;
}

function getNodeDownEx(node) {
    // item 429
    var edge = this.getEdge(node.down);
    // item 430
    return this.getNode(edge.tail);
}

function getNodeLeft(node) {
    // item 408
    var edge = this.getEdge(node.left);
    // item 409
    return edge.head;
}

function getNodeLeftEx(node) {
    // item 436
    var edge = this.getEdge(node.left);
    // item 437
    return this.getNode(edge.head);
}

function getNodeRight(node) {
    // item 415
    var edge = this.getEdge(node.right);
    // item 416
    return edge.tail;
}

function getNodeRightEx(node) {
    // item 443
    var edge = this.getEdge(node.right);
    // item 444
    return this.getNode(edge.tail);
}

function getNodeUp(node) {
    // item 422
    var edge = this.getEdge(node.up);
    // item 423
    return edge.head;
}

function getNodeUpEx(node) {
    // item 450
    var edge = this.getEdge(node.up);
    // item 451
    return this.getNode(edge.head);
}

function getOrCreate(map, key, def) {
    // item 3078
    if (key in map) {
        // item 3081
        return map[key]
    } else {
        // item 3195
        var value
        // item 3190
        if (def == null) {
            // item 3193
            value = {}
        } else {
            // item 3194
            value = def
        }
        // item 3083
        map[key] = value
        // item 3082
        return value
    }
}

function getRest(token, cut) {
    // item 1907
    var oldText = token.text;
    var endText = oldText.substring(
    	cut.text.length,
    	oldText.length
    );
    var rest = new Token(token.type, endText);
    // item 1908
    return rest;
}

function getTail(edge) {
    // item 155
    var node = this.getNode(edge.tail);
    // item 156
    return node;
}

function getVertical(itemId) {
    // item 919
    var nodeId = toNodeId(this, itemId);
    // item 904
    var result = [nodeId];
    // item 905
    findOnOneSide(
    	this,
    	nodeId,
    	"up",
    	"head",
    	result
    );
    // item 907
    findOnOneSide(
    	this,
    	nodeId,
    	"down",
    	"tail",
    	result
    );
    // item 906
    return result;
}

function getVerticalDown(itemId) {
    // item 978
    var nodeId = toNodeId(this, itemId);
    // item 974
    var result = [nodeId];
    // item 977
    findOnOneSide(
    	this,
    	nodeId,
    	"down",
    	"tail",
    	result
    );
    // item 976
    return result;
}

function getVerticalUp(itemId) {
    // item 968
    var nodeId = toNodeId(this, itemId);
    // item 964
    var result = [nodeId];
    // item 965
    findOnOneSide(
    	this,
    	nodeId,
    	"up",
    	"head",
    	result
    );
    // item 966
    return result;
}

function hardWrap(text, limit) {
    // item 575
    var result;
    // item 572
    if ((text) && (!(text.length <= limit))) {
        // item 579
        var lines = text.split("\n");
        // item 580
        var lines2 = [];
        // item 5820001
        var _ind582 = 0;
        var _col582 = lines;
        var _len582 = _col582.length;
        while (true) {
            // item 5820002
            if (_ind582 < _len582) {
                
            } else {
                break;
            }
            // item 5820004
            var line = _col582[_ind582];
            // item 584
            hardWrapLine(line, limit, lines2);
            // item 5820003
            _ind582++;
        }
        // item 581
        result = lines2.join("\n");
    } else {
        // item 577
        result = text;
    }
    // item 574
    return result;
}

function hardWrapLine(line, limit, output) {
    // item 590
    if (line.length <= limit) {
        // item 593
        output.push(line);
    } else {
        // item 594
        var tokens0 = line.split(" ");
        var accum = 0;
        var line = [];
        var tokens = addSpaceTokens(tokens0);
        // item 5950001
        var _ind595 = 0;
        var _col595 = tokens;
        var _len595 = _col595.length;
        while (true) {
            // item 5950002
            if (_ind595 < _len595) {
                
            } else {
                break;
            }
            // item 5950004
            var token = _col595[_ind595];
            // item 612
            if (token.length + accum > limit) {
                // item 597
                if (token.length > limit) {
                    // item 617
                    var token2 = token;
                    while (true) {
                        // item 618
                        var divider = limit - accum;
                        var head = token2.substring(0, divider);
                        token2 = token2.substring(divider, token2.length);
                        // item 626
                        line.push(head);
                        // item 623
                        if (head.length + accum == limit) {
                            // item 627
                            appendAccum(output, line);
                            accum = 0;
                            line = [];
                        } else {
                            // item 619
                            accum += head.length;
                        }
                        // item 620
                        if (token2.length > 0) {
                            
                        } else {
                            break;
                        }
                    }
                } else {
                    // item 601
                    appendAccum(output, line);
                    line = [token];
                    accum = token.length;
                }
            } else {
                // item 613
                line.push(token);
                accum += token.length;
            }
            // item 5950003
            _ind595++;
        }
        // item 614
        appendAccum(output, line);
    }
}

function hitBox(box, x, y) {
    // item 952
    if ((((x < box.left) || (x > box.right)) || (y < box.top)) || (y > box.bottom)) {
        // item 958
        return false;
    } else {
        // item 951
        return true;
    }
}

function isBeyond(self, token) {
    // item 3305
    var right = self.x + token.width
    // item 3307
    return right > self.width
}

function isColor(color) {
    // item 2202
    if ((((color) && (typeof color == "string")) && (color.length == "7")) && (color[0] = "#")) {
        // item 2207
        var hex = "0x" + color.slice(1)
        var number = parseInt(hex)
        // item 2210
        if (isNaN(number)) {
            // item 2205
            return false
        } else {
            // item 2206
            return true
        }
    } else {
        // item 2205
        return false
    }
}

function isDigit(c) {
    // item 1318
    if ((c >= Lex.ZERO) && (c <= Lex.NINE)) {
        // item 1322
        return true;
    } else {
        // item 1323
        return false;
    }
}

function isLatin(c) {
    // item 2336
    if (((c >= Lex.a) && (c <= Lex.z)) || ((c >= Lex.A) && (c <= Lex.Z))) {
        // item 2344
        return true
    } else {
        // item 2345
        return false
    }
}

function isOperator(c) {
    // item 1267
    if (Lex.OP_CHARS[c]) {
        // item 1270
        return true;
    } else {
        // item 1266
        return false;
    }
}

function isPunctuation(ch) {
    // item 3060
    return ch in gPunctuation
}

function isUrl(text) {
    // item 2833
    var expr = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/gi;
    // item 2834
    var regex = RegExp(expr)
    // item 2835
    return text.match(regex)
}

function isWhitespace(c) {
    // item 1303
    if ((((c == 32) || (c == 9)) || (c == 10)) || (c == 13)) {
        // item 1311
        return true;
    } else {
        // item 1312
        return false;
    }
}

function lexInit() {
    // item 1290
    if (Lex.initialized) {
        
    } else {
        // item 1289
        Lex.OP_CHARS = []
        Lex.initialized = true
        // item 12940001
        var i = 0;
        while (true) {
            // item 12940002
            if (i < 256) {
                
            } else {
                break;
            }
            // item 1296
            Lex.OP_CHARS[i] = false
            // item 12940003
            i++;
        }
        // item 1293
        saveOpChar("!")
        saveOpChar(";")
        saveOpChar("?")
        saveOpChar("=")
        saveOpChar("<")
        saveOpChar(">")
        saveOpChar("-")
        saveOpChar("+")
        saveOpChar("/")
        saveOpChar("\\")
        saveOpChar("*")
        saveOpChar("%")
        saveOpChar("(")
        saveOpChar(")")
        saveOpChar("(")
        saveOpChar(")")
        saveOpChar("{")
        saveOpChar("}")
        saveOpChar("[")
        saveOpChar("]")
        saveOpChar(":")
        saveOpChar(".")
        saveOpChar("#")
        saveOpChar(",")
        saveOpChar("^")
        saveOpChar("|")
        saveOpChar("&")
        saveOpChar("'")
        saveOpChar("\"")
        // item 1297
        Lex.ZERO = firstChar("0")
        Lex.NINE = firstChar("9")
        Lex.UNDER = firstChar("_")
        Lex.SPACE = firstChar(" ")
        Lex.a = firstChar("a")
        Lex.z = firstChar("z")
        Lex.A = firstChar("A")
        Lex.Z = firstChar("Z")
        Lex.DOT = firstChar(".")
        Lex.DASH = firstChar("-")
    }
}

function lineFrom2Points(x1, y1, x2, y2) {
    // item 2299
    var a = y1 - y2
    var b = x2 - x1
    var c = x1 * y2 - x2 * y1
    // item 2300
    var div = Math.sqrt(a * a + b * b)
    // item 2291
    var result = {
    	a: a,
    	b: b,
    	c: c,
    	div: div,
    	distanceToPoint: distanceToPoint
    }
    // item 2292
    return result
}

function listToMap(list, prop) {
    // item 3533
    var result = {};
    // item 3530
    if (list) {
        // item 35350001
        var _ind3535 = 0;
        var _col3535 = list;
        var _len3535 = _col3535.length;
        while (true) {
            // item 35350002
            if (_ind3535 < _len3535) {
                
            } else {
                break;
            }
            // item 35350004
            var item = _col3535[_ind3535];
            // item 3538
            var key = item[prop]
            // item 3537
            result[key] = item
            // item 35350003
            _ind3535++;
        }
    }
    // item 3534
    return result;
}

function listToSet(list) {
    // item 498
    var result = {};
    // item 495
    if (list) {
        // item 5000001
        var _ind500 = 0;
        var _col500 = list;
        var _len500 = _col500.length;
        while (true) {
            // item 5000002
            if (_ind500 < _len500) {
                
            } else {
                break;
            }
            // item 5000004
            var item = _col500[_ind500];
            // item 502
            result[item] = true;
            // item 5000003
            _ind500++;
        }
    }
    // item 499
    return result;
}

function localizeDate(secs, translate) {
    // item 2464
    var date = new Date(secs * 1000)
    // item 2465
    var month = date.getMonth() + 1
    var day = date.getDate()
    var year = date.getFullYear()
    // item 2466
    var monthId = "MES_MONTH_" + month
    var monthStr = translate(monthId)
    // item 2467
    return day + "-" + monthStr
      + "-" + year
}

function luhn(digits) {
    // item 2585
    var sum = 0
    var length = digits.length
    var i
    // item 25860001
    i = 0;
    while (true) {
        // item 25860002
        if (i < length) {
            
        } else {
            break;
        }
        // item 2588
        var index = length - i - 1
        var digit = digits[index]
        // item 2594
        var d3
        // item 2589
        if (i % 2 == 1) {
            // item 2592
            var d2 = digit * 2
            // item 2596
            if (d2 > 9) {
                // item 2600
                d3 = d2 - 9
            } else {
                // item 2599
                d3 = d2
            }
        } else {
            // item 2595
            d3 = digit
        }
        // item 2593
        sum += d3
        // item 25860003
        i++;
    }
    // item 2602
    return (sum % 10 == 0)
}

function makeErrorMessage(data) {
    // item 2013
    var message
    // item 2010
    if (data) {
        // item 2014
        if (data.error) {
            // item 2017
            message = data.error
        } else {
            // item 2018
            if (typeof data == "string") {
                // item 2019
                message = data
            } else {
                // item 2022
                message = data.toString()
            }
        }
    } else {
        // item 2020
        message = "ERR_ERROR"
    }
    // item 2016
    return message
}

function max(array) {
    // item 358
    if (array.length === 0) {
        // item 361
        return 0;
    } else {
        // item 350
        var found = -Number.MAX_VALUE;
        // item 3450001
        var _ind345 = 0;
        var _col345 = array;
        var _len345 = _col345.length;
        while (true) {
            // item 3450002
            if (_ind345 < _len345) {
                
            } else {
                break;
            }
            // item 3450004
            var item = _col345[_ind345];
            // item 352
            var itemNumber;
            // item 353
            if (isNaN(item)) {
                // item 356
                itemNumber = parseFloat(item);
            } else {
                // item 357
                itemNumber = item;
            }
            // item 347
            if (found < itemNumber) {
                // item 344
                found = itemNumber;
            }
            // item 3450003
            _ind345++;
        }
        // item 351
        return found;
    }
}

function maxIntKey(map) {
    // item 2116
    var allIds = Object.keys(map);
    // item 2119
    var ids = allIds.map(function(id) {
    	return parseInt(id, 10);
    });
    // item 2117
    var maxIdValue = max(ids);
    // item 2118
    return maxIdValue;
}

function mergeSets(dst, src) {
    // item 2210001
    var _ind221 = 0;
    var _col221 = src;
    var _keys221 = Object.keys(_col221); 
    var _len221 = _keys221.length;
    while (true) {
        // item 2210002
        if (_ind221 < _len221) {
            
        } else {
            break;
        }
        // item 2210004
        var rightKey = _keys221[_ind221]; var rightValue = _col221[rightKey];
        // item 223
        dst[rightKey] = rightValue;
        // item 2210003
        _ind221++;
    }
}

function monthsToSecs(months) {
    // item 2446
    var secsInMonth = 3600 * 24 * 365.25 / 12
    // item 2447
    return Math.round(months * secsInMonth)
}

function nonSpacesToCaret(text, nonSpaces) {
    // item 2680
    var i
    // item 26730001
    i = 0;
    while (true) {
        // item 26730002
        if ((i < text.length) && (!(nonSpaces == 0))) {
            
        } else {
            break;
        }
        // item 2676
        if (text[i] == " ") {
            
        } else {
            // item 2679
            nonSpaces--
        }
        // item 26730003
        i++;
    }
    // item 2681
    return i
}

function normalizeString(text) {
    // item 2884
    text = text || ""
    var low = text.toLowerCase()
    // item 2887
    var i
    var machine = new StringNormalizer()
    machine.result = ""
    machine.map = []
    var lineNo = 0
    var pos = 0
    // item 28850001
    i = 0;
    while (true) {
        // item 28850002
        if (i < low.length) {
            
        } else {
            break;
        }
        // item 2935
        var ch = low[i]
        var code = low.charCodeAt(i);
        machine.map.push(null)
        // item 3051
        if (isPunctuation(ch)) {
            // item 3054
            ch = " "
            code = 32
        }
        // item 3012
        if (code == 10) {
            // item 3025
            machine.space(
            	" ",
            	pos,
            	lineNo
            )
            // item 3019
            lineNo++
            pos = 0
        } else {
            // item 3013
            if (code == 13) {
                
            } else {
                // item 3010
                if ((code == 32) || (code == 9)) {
                    // item 2892
                    machine.space(
                    	" ",
                    	pos,
                    	lineNo
                    )
                } else {
                    // item 2891
                    machine.symbol(
                    	ch,
                    	pos,
                    	lineNo
                    )
                }
            }
            // item 3023
            pos++
        }
        // item 28850003
        i++;
    }
    // item 2883
    return {
    	text: machine.result,
    	map: machine.map
    }
}

function objectValues(dictionary) {
    // item 242
    var values = [];
    // item 2440001
    var _ind244 = 0;
    var _col244 = dictionary;
    var _keys244 = Object.keys(_col244); 
    var _len244 = _keys244.length;
    while (true) {
        // item 2440002
        if (_ind244 < _len244) {
            
        } else {
            break;
        }
        // item 2440004
        var key = _keys244[_ind244]; var value = _col244[key];
        // item 246
        values.push(value);
        // item 2440003
        _ind244++;
    }
    // item 243
    return values;
}

function oppositeAngle(angle) {
    // item 2747
    if (angle > 0) {
        // item 2750
        return angle - Math.PI
    } else {
        // item 2751
        return angle + Math.PI
    }
}

function pad(number, size) {
    // item 2662
    var s = "000000000000" + number.toString()
    return s.substr(s.length - size)
}

function parseBool(value) {
    // item 1747
    if (typeof value == "boolean") {
        // item 1750
        return value;
    } else {
        // item 1751
        return value == "true";
    }
}

function parseCardNumber(number) {
    // item 2563
    if (number) {
        // item 2546
        var digit0 = "0".charCodeAt(0)
        var digit9 = "9".charCodeAt(0)
        var tab = 9
        var space = 32
        // item 2547
        var digits = []
        var length = number.length
        var i
        // item 25490001
        i = 0;
        while (true) {
            // item 25490002
            if (i < length) {
                
            } else {
                // item 2548
                return digits
            }
            // item 2551
            var code = number.charCodeAt(i)
            // item 2552
            if ((code >= digit0) && (code <= digit9)) {
                // item 2562
                var digit = code - digit0
                digits.push(digit)
            } else {
                // item 2556
                if ((code == tab) || (code == space)) {
                    
                } else {
                    // item 2561
                    return null
                }
            }
            // item 25490003
            i++;
        }
    } else {
        // item 2561
        return null
    }
}

function parseFontFace(faceStr) {
    // item 3408
    var parts = faceStr.split("-")
    // item 3409
    var result = {
    	italic: parts[0] == "true",
    	bold: parts[1] == "true",
    	family: parts[2]
    }
    // item 3410
    return result
}

function parseFontString(font) {
    // item 2234
    var parts = font.split(" ")
    // item 2235
    var current = 0
    var result = {}
    // item 2236
    if (parts[current] == "italic") {
        // item 2245
        current++
        // item 2239
        result.italic = true
    } else {
        // item 2246
        result.italic = false
    }
    // item 2240
    if (parts[current] == "bold") {
        // item 2248
        current++
        // item 2243
        result.bold = true
    } else {
        // item 2247
        result.bold = false
    }
    // item 2244
    var sizeStr = parts[current]
    current++
    sizeStr = sizeStr.slice(0, sizeStr.length - 2)
    result.size = parseInt(sizeStr)
    // item 2285
    var familyParts = parts.slice(current)
    // item 2249
    result.family = familyParts.map(stripQuotes)
                               .join(" ")
    // item 2250
    return result
}

function parseSearch(search) {
    // item 2473
    var result = {}
    // item 2475
    if (search) {
        // item 2478
        search = search.substring(1)
        // item 2479
        var parts = search.split("&")
        // item 24800001
        var _ind2480 = 0;
        var _col2480 = parts;
        var _len2480 = _col2480.length;
        while (true) {
            // item 24800002
            if (_ind2480 < _len2480) {
                
            } else {
                break;
            }
            // item 24800004
            var part = _col2480[_ind2480];
            // item 2482
            var partParts = part.split("=")
            // item 2483
            var key = partParts[0]
            var value = partParts[1]
            // item 2484
            if ((key.length) && (value.length)) {
                // item 2488
                result[key] = value
            }
            // item 24800003
            _ind2480++;
        }
    }
    // item 2474
    return result
}

function parseYyyyMmDd(text) {
    // item 2710
    var parts = text.split("-")
    var yyyy = parseInt(parts[0])
    var mm = parseInt(parts[1]) - 1
    var dd = parseInt(parts[2])
    // item 2711
    return new Date(yyyy, mm, dd)
}

function prettyPrintCard(number) {
    // item 2619
    var digits = parseCardNumber(number)
    // item 2620
    var result = formatCardNumber(digits)
    // item 2621
    return result
}

function printAmount(amount, currency) {
    // item 2700
    if ((isNaN(amount)) || (!(currency))) {
        // item 2703
        return ""
    } else {
        // item 2699
        return currency + " " + amount.toFixed(2)
    }
}

function randomString(length) {
    // item 2774
    var text = ""
    var i
    // item 2771
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    // item 27760001
    i = 0;
    while (true) {
        // item 27760002
        if (i < length) {
            
        } else {
            break;
        }
        // item 2778
        text += possible.charAt(Math.floor(Math.random() * possible.length));
        // item 27760003
        i++;
    }
    // item 2775
    return text
}

function removeItem(id) {
    // item 67
    var item = this.getItem(id);
    // item 61
    if (item.isLine) {
        // item 66
        disconnectEdge(
        	this,
        	item.id,
        	item.head,
        	item.tail,
        	item.isVertical
        );
        // item 64
        delete this.edges[id];
    } else {
        // item 68
        if ((((item.left) || (item.right)) || (item.up)) || (item.down)) {
            // item 73
            throwError(
             "Node " + id + " has edges");
        } else {
            // item 65
            delete this.nodes[id];
        }
    }
    // item 60
    delete this.items[id];
}

function rotatePoint(angle, point) {
    // item 2740
    var x = point.x
    var y = point.y
    // item 2737
    var cos = Math.cos(angle)
    var sin = Math.sin(angle)
    // item 2738
    var x1 = x * cos - y * sin
    var y1 = x * sin + y * cos
    // item 2739
    return new Point(x1, y1)
}

function sanitizeDiagram(oldDiagram) {
    // item 1696
    var diagram = {
    	name: oldDiagram.name,
    	type: oldDiagram.type,
    	nodes: copyItemSet(oldDiagram.nodes),
    	edges: copyItemSet(oldDiagram.edges)
    }
    // item 2752
    diagram.background = oldDiagram.background || ""
    diagram.diaLine = oldDiagram.diaLine || ""
    diagram.diaLineThickness = oldDiagram.diaLineThickness || ""
    diagram.font = oldDiagram.font || ""
    diagram.version = oldDiagram.version || 0
    // item 2180
    if (oldDiagram.free) {
        // item 2183
        diagram.free = copyItemSet(oldDiagram.free)
    }
    // item 2179
    return diagram
}

function saveOpChar(text) {
    // item 1358
    var code = firstChar(text);
    Lex.OP_CHARS[code] = true;
}

function shallowEquivalent(leftMap, rightMap) {
    // item 473
    if (leftMap) {
        // item 476
        if (rightMap) {
            // item 480
            var leftKeys = Object.keys(leftMap);
            var rightKeys = Object.keys(rightMap);
            // item 484
            if (leftKeys.length === rightKeys.length) {
                // item 485
                var length = leftKeys.length;
                // item 4860001
                var i = 0;
                while (true) {
                    // item 4860002
                    if (i < length) {
                        
                    } else {
                        // item 482
                        return true;
                    }
                    // item 488
                    var key = leftKeys[i];
                    var left = leftMap[key];
                    var right = rightMap[key];
                    // item 489
                    if (left == right) {
                        
                    } else {
                        // item 483
                        return false;
                    }
                    // item 4860003
                    i++;
                }
            } else {
                // item 483
                return false;
            }
        } else {
            // item 483
            return false;
        }
    } else {
        // item 478
        if (rightMap) {
            // item 483
            return false;
        } else {
            // item 481
            return true;
        }
    }
}

function snapMove(delta) {
    // item 315
    var snap = this.SNAP_SIZE;
    this.acc += delta;
    var snapped = Math.round(this.acc / snap) * snap;
    // item 316
    if (snapped == 0) {
        // item 320
        this.step = false;
        this.snapped = 0;
    } else {
        // item 319
        this.acc -= snapped;
        // item 321
        this.step = true;
        this.snapped = snapped;
    }
}

function snapPos(value) {
    // item 2176
    var value = snapUpCore(value, Config.SNAP)
    // item 2177
    return value
}

function snapUp(value) {
    // item 336
    var value = snapUpCore(value, Config.SIZE_SNAP)
    // item 337
    return value;
}

function snapUpCore(value, snap) {
    // item 2168
    var times = Math.floor(value / snap);
    var rebuilt = times * snap;
    // item 2165
    if (rebuilt === value) {
        // item 2169
        return value;
    } else {
        // item 2170
        return (times + 1) * snap;
    }
}

function sort(array, property) {
    // item 3539
    var getter, comparer
    // item 3518
    if (typeof property == "string") {
        // item 3521
        getter = function (item) {
        	return item[property]
        }
    } else {
        // item 3522
        getter = property
    }
    // item 3523
    comparer = function (left, right) {
    	return compareByProperty(left, right, getter)
    }
    // item 3524
    array.sort(comparer)
}

function sortLinkedList(items, nextProp) {
    // item 2132
    var links = {}
    var last = null
    // item 21330001
    var _ind2133 = 0;
    var _col2133 = items;
    var _keys2133 = Object.keys(_col2133); 
    var _len2133 = _keys2133.length;
    while (true) {
        // item 21330002
        if (_ind2133 < _len2133) {
            
        } else {
            break;
        }
        // item 21330004
        var id = _keys2133[_ind2133]; var item = _col2133[id];
        // item 2135
        var next = item[nextProp]
        // item 2136
        if (next) {
            // item 2194
            if (next in items) {
                // item 2139
                links[next] = id
            } else {
                // item 2196
                throwError("Bad next")
            }
        } else {
            // item 2148
            last = id
        }
        // item 21330003
        _ind2133++;
    }
    // item 2187
    if ((last == null) && (!(Object.keys(items).length == 0))) {
        // item 2193
        throwError("No end in linked list")
    }
    // item 2149
    var result = []
    var current = last
    while (true) {
        // item 2150
        if (current) {
            
        } else {
            break;
        }
        // item 2154
        result.push(items[current])
        // item 2153
        current = links[current]
    }
    // item 2155
    result.reverse()
    // item 2156
    return result
}

function split(text, separators) {
    // item 2805
    if (text) {
        // item 2784
        var idle = true
        var result = []
        var buffer = ""
        // item 2809
        var length = text.length;
        // item 28100001
        var i = 0;
        while (true) {
            // item 28100002
            if (i < length) {
                
            } else {
                break;
            }
            // item 2812
            var c = text[i]
            // item 2787
            if (idle) {
                // item 2793
                if (c in separators) {
                    
                } else {
                    // item 2814
                    buffer += c
                    // item 2803
                    idle = false
                }
            } else {
                // item 2791
                if (c in separators) {
                    // item 2820
                    result.push(buffer)
                    // item 2819
                    buffer = ""
                    // item 2802
                    idle = true
                } else {
                    // item 2796
                    buffer += c
                }
            }
            // item 28100003
            i++;
        }
        // item 2815
        if (buffer) {
            // item 2818
            result.push(buffer)
        }
        // item 2804
        return result
    } else {
        // item 2808
        return []
    }
}

function splitToLines(text) {
    // item 304
    var result = [];
    // item 303
    if (text) {
        // item 269
        var buffer = "";
        var whiteBuffer = "";
        var CHARS = 1;
        var SPACE = 2;
        var state = CHARS;
        // item 262
        var r = "\r".charCodeAt(0);
        var n = "\n".charCodeAt(0);
        var t = "\t".charCodeAt(0);
        var space = " ".charCodeAt(0);
        // item 261
        var length = text.length;
        // item 2630001
        var i = 0;
        while (true) {
            // item 2630002
            if (i < length) {
                
            } else {
                break;
            }
            // item 265
            var c = text.charCodeAt(i);
            // item 266
            if (c === r) {
                
            } else {
                // item 2710001
                if (state === CHARS) {
                    // item 2760001
                    if (c === n) {
                        // item 285
                        result.push(buffer);
                        buffer = "";
                    } else {
                        // item 2760002
                        if (c === t) {
                            // item 287
                            whiteBuffer = "    ";
                            state = SPACE;
                        } else {
                            // item 2760003
                            if (c === space) {
                                // item 288
                                whiteBuffer = " ";
                                state = SPACE;
                            } else {
                                // item 286
                                buffer += String.fromCharCode(c);
                            }
                        }
                    }
                } else {
                    // item 2710002
                    if (state === SPACE) {
                        
                    } else {
                        // item 2710003
                        throw "Unexpected switch value: " + state;
                    }
                    // item 3010001
                    if (c === n) {
                        // item 297
                        result.push(buffer);
                        buffer = "";
                        whiteBuffer = "";
                        state = CHARS;
                    } else {
                        // item 3010002
                        if (c === t) {
                            // item 299
                            whiteBuffer += "    ";
                        } else {
                            // item 3010003
                            if (c === space) {
                                // item 300
                                whiteBuffer += " ";
                            } else {
                                // item 298
                                buffer += whiteBuffer;
                                whiteBuffer = "";
                                buffer += String.fromCharCode(c);
                                state = CHARS;
                            }
                        }
                    }
                }
            }
            // item 2630003
            i++;
        }
        // item 306
        if (buffer.length === 0) {
            
        } else {
            // item 308
            result.push(buffer);
        }
    }
    // item 270
    return result;
}

function startsWith(str, start) {
    // item 3235
    if (((str) && (start)) && (str.length >= start.length)) {
        // item 3239
        var sub = str.substring(
        	0,
        	start.length
        )
        // item 3243
        return sub == start
    } else {
        // item 3240
        return false
    }
}

function stringContains(haystack, needle) {
    // item 2942
    if (((haystack) && (needle)) && (!(haystack.indexOf(needle) == -1))) {
        // item 2946
        return true
    } else {
        // item 2945
        return false
    }
}

function stripQuotes(text) {
    // item 2283
    if ((text.length == 0) || (!(text[0] == "'"))) {
        
    } else {
        // item 2277
        text = text.slice(1)
    }
    // item 2278
    if ((text.length == 0) || (!(text[text.length - 1] == "'"))) {
        
    } else {
        // item 2281
        text = text.slice(0, text.length-1)
    }
    // item 2284
    return text
}

function subtract(set1, set2) {
    // item 1999
    var result = []
    // item 19970001
    var _ind1997 = 0;
    var _col1997 = set1;
    var _keys1997 = Object.keys(_col1997); 
    var _len1997 = _keys1997.length;
    while (true) {
        // item 19970002
        if (_ind1997 < _len1997) {
            
        } else {
            break;
        }
        // item 19970004
        var key = _keys1997[_ind1997]; var value = _col1997[key];
        // item 2001
        if (key in set2) {
            
        } else {
            // item 2004
            result.push(key)
        }
        // item 19970003
        _ind1997++;
    }
    // item 2000
    return result
}

function swap(array, id1, id2) {
    // item 2105
    var element = array[id1]
    array[id1] = array[id2]
    array[id2] = element
}

function throwError(message) {
    // item 2306
    var error = new Error(message)
    // item 2308
    CallTrace.add(
    	"Exception",
    	[message, error.stack]
    )
    // item 2307
    throw error
}

function timeNow() {
    // item 2457
    var date = new Date()
    // item 2458
    return Math.round(date.getTime() / 1000)
}

function toNodeId(graph, itemId) {
    // item 913
    var item = graph.getItem(itemId);
    // item 914
    if (item.isLine) {
        // item 918
        return item.head;
    } else {
        // item 917
        return itemId;
    }
}

function tokenize(text, ops) {
    // item 1189
    var lexer = new Lexer();
    lexer.current = [];
    lexer.tokens = [];
    // item 1211
    if (text) {
        // item 1214
        var length = text.length;
        // item 11900001
        var i = 0;
        while (true) {
            // item 11900002
            if (i < length) {
                
            } else {
                break;
            }
            // item 1208
            var c = text.charCodeAt(i);
            // item 1198
            if (isDigit(c)) {
                // item 1205
                lexer.digit(c);
            } else {
                // item 1202
                if ((ops) && (isOperator(c))) {
                    // item 1206
                    lexer.operator(c);
                } else {
                    // item 1359
                    if (c == 13) {
                        
                    } else {
                        // item 1362
                        if (isWhitespace(c)) {
                            // item 1209
                            lexer.whitespace(c);
                        } else {
                            // item 1201
                            lexer.letter(c);
                        }
                    }
                }
            }
            // item 11900003
            i++;
        }
        // item 1210
        lexer.whitespace(Lex.SPACE);
        // item 1378
        lexer.tokens.pop();
    }
    // item 1192
    return lexer.tokens;
}

function truncateText(text, length) {
    // item 2857
    if (text.length <= length) {
        // item 2860
        return text
    } else {
        // item 2861
        return text.substring(0, length) + "..."
    }
}

function unique(array) {
    // item 1974
    var set = {}
    // item 19750001
    var _ind1975 = 0;
    var _col1975 = array;
    var _len1975 = _col1975.length;
    while (true) {
        // item 19750002
        if (_ind1975 < _len1975) {
            
        } else {
            break;
        }
        // item 19750004
        var item = _col1975[_ind1975];
        // item 1977
        set[item] = true
        // item 19750003
        _ind1975++;
    }
    // item 1978
    return Object.keys(set)
}

function updateNode(node) {
    // item 79
    var old = this.getNode(node.id);
    // item 800001
    var _ind80 = 0;
    var _col80 = node;
    var _keys80 = Object.keys(_col80); 
    var _len80 = _keys80.length;
    while (true) {
        // item 800002
        if (_ind80 < _len80) {
            
        } else {
            break;
        }
        // item 800004
        var name = _keys80[_ind80]; var value = _col80[name];
        // item 83
        if (this.nonUpdatable[name]) {
            // item 86
            throwError(
             "Field '" + name + "' cannot be updated.");
            break;
        }
        // item 82
        old[name] = value;
        // item 800003
        _ind80++;
    }
}

function validateModuleName(name, language) {
    // item 3433
    if (name) {
        // item 3420
        name = name.trim()
        // item 3421
        if (name.length == 0) {
            // item 3425
            return "ERR_EMPTY_NAME"
        } else {
            // item 3429
            if (name.length < 2) {
                // item 3431
                return "ERR_NAME_TOO_SHORT"
            } else {
                // item 3426
                if (name.length > 70) {
                    // item 3428
                    return "ERR_NAME_TOO_LONG"
                } else {
                    // item 3510
                    if (language === "LANG_HUMAN") {
                        // item 3424
                        return null
                    } else {
                        // item 3434
                        if (containsIdentifierChars(name)) {
                            // item 3466
                            var first = name.charCodeAt(0)
                            // item 3463
                            if (isDigit(first)) {
                                // item 3467
                                return "MES_IDENTIFIER_FIRST"
                            } else {
                                // item 3424
                                return null
                            }
                        } else {
                            // item 3432
                            return "ERR_NAME_INVALID_IDENTIFIER"
                        }
                    }
                }
            }
        }
    } else {
        // item 3425
        return "ERR_EMPTY_NAME"
    }
}

function Lexer() {
  var _self = this;
  _self.type_name = "Lexer";
  _self.state = "idle";
  _self.digit = function(c) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Lexer_idle_digit(_self, c);
    }
    else if (_state_ == "identifier") {
      return Lexer_identifier_digit(_self, c);
    }
    else if (_state_ == "number") {
      return Lexer_number_digit(_self, c);
    }
    return null;
  };
  _self.letter = function(c) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Lexer_idle_letter(_self, c);
    }
    else if (_state_ == "identifier") {
      return Lexer_identifier_letter(_self, c);
    }
    else if (_state_ == "number") {
      return Lexer_number_letter(_self, c);
    }
    return null;
  };
  _self.operator = function(c) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Lexer_idle_operator(_self, c);
    }
    else if (_state_ == "identifier") {
      return Lexer_identifier_operator(_self, c);
    }
    else if (_state_ == "number") {
      return Lexer_number_operator(_self, c);
    }
    return null;
  };
  _self.whitespace = function(c) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Lexer_idle_whitespace(_self, c);
    }
    else if (_state_ == "identifier") {
      return Lexer_identifier_whitespace(_self, c);
    }
    else if (_state_ == "number") {
      return Lexer_number_whitespace(_self, c);
    }
    return null;
  };
}

function StringNormalizer() {
  var _self = this;
  _self.type_name = "StringNormalizer";
  _self.state = "Start";
  _self.line = function(ch, pos, lineNo) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return StringNormalizer_Start_line(_self, ch, pos, lineNo);
    }
    return null;
  };
  _self.space = function(ch, pos, lineNo) {
    var _state_ = _self.state;
    if (_state_ == "Normal") {
      return StringNormalizer_Normal_space(_self, ch, pos, lineNo);
    }
    else if (_state_ == "Whitespace") {
      return StringNormalizer_Whitespace_space(_self, ch, pos, lineNo);
    }
    return null;
  };
  _self.symbol = function(ch, pos, lineNo) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return StringNormalizer_Start_symbol(_self, ch, pos, lineNo);
    }
    else if (_state_ == "Normal") {
      return StringNormalizer_Normal_symbol(_self, ch, pos, lineNo);
    }
    else if (_state_ == "Whitespace") {
      return StringNormalizer_Whitespace_symbol(_self, ch, pos, lineNo);
    }
    return null;
  };
}

function FlowMachine() {
  var _self = this;
  _self.type_name = "FlowMachine";
  _self.state = "LineStart";
  _self.normal = function(token) {
    var _state_ = _self.state;
    if (_state_ == "LineStart") {
      return FlowMachine_LineStart_normal(_self, token);
    }
    else if (_state_ == "InsideLine") {
      return FlowMachine_InsideLine_normal(_self, token);
    }
    else if (_state_ == "InsideLineWs") {
      return FlowMachine_InsideLineWs_normal(_self, token);
    }
    return null;
  };
  _self.whitespace = function(token) {
    var _state_ = _self.state;
    if (_state_ == "LineStart") {
      return FlowMachine_LineStart_whitespace(_self, token);
    }
    else if (_state_ == "InsideLine") {
      return FlowMachine_InsideLine_whitespace(_self, token);
    }
    else if (_state_ == "InsideLineWs") {
      return FlowMachine_InsideLineWs_whitespace(_self, token);
    }
    return null;
  };
}


var gUrlSeparators = {
	" " : true,
	"\t" : true,
	"\r" : true,
	"\n" : true,
	"," : true,
	";" : true,
	"(" : true,
	")" : true,
	"[" : true,
	"]" : true,
	"<" : true,
	">" : true,
	"|" : true
}

var gPunctuation = {
	"{" : true,
	"}" : true,
	"-" : true,
	"_" : true,
	"/" : true,
	"+" : true,
	"*" : true,
	"\\" : true,
	"%" : true,
	"&" : true,
	"^" : true,
	"=" : true,
	"?" : true,
	"!" : true,
	"\"" : true,
	"\'" : true,
	"." : true,
	"," : true,
	";" : true,
	":" : true,
	"(" : true,
	")" : true,
	"[" : true,
	"]" : true,
	"<" : true,
	">" : true,
	"|" : true
}

}

var Utils = new UtilsModule();
if (typeof exports !== 'undefined') {
	exports.Utils = Utils;
}
