function Multitouch(view) {

var beh = null;

var gCenter = null;
var gDistance = 0;
var gZoom = 1;

var gX = 0;
var gY = 0;

var gPrev = null;
var gAcc = null;


// Autogenerated with DRAKON Editor 1.32


function Multi_detection_touchcancel(self, evt) {
    // item 123
    self.state = "idle";
}

function Multi_detection_touchend(self, evt) {
    // item 123
    self.state = "idle";
}

function Multi_detection_touchmove(self, evt) {
    // item 125
    var events = convertTouches(evt);
    // item 443
    if (events) {
        // item 127
        if (detectPinchNever(events)) {
            // item 345
            initZoom();
            // item 132
            var zoom = getPinch(events);
            // item 134
            view.zoomAt(gCenter, zoom);
            // item 129
            self.state = "zoom";
        } else {
            // item 131
            var pan = getPan(events);
            // item 133
            panCanvas(pan.x, pan.y);
            // item 124
            self.state = "pan";
        }
    } else {
        // item 445
        self.state = "detection";
    }
}

function Multi_detection_touchstart(self, evt) {
    // item 20
    self.state = "idle";
}

function Multi_idle_touchcancel(self, evt) {
    // item 9
    self.state = "idle";
}

function Multi_idle_touchend(self, evt) {
    // item 9
    self.state = "idle";
}

function Multi_idle_touchmove(self, evt) {
    // item 9
    self.state = "idle";
}

function Multi_idle_touchstart(self, evt) {
    var _sw850000_ = 0;
    // item 350
    gX = null;
    gY = null;
    // item 83
    var events = convertTouches(evt);
    // item 433
    if (events) {
        // item 95
        setPrevious(events);
        gAcc = [];
        // item 850000
        _sw850000_ = events.length;
        // item 850001
        if (_sw850000_ === 1) {
            // item 94
            beh.setTimeout(self, 100);
            // item 36
            self.state = "one_or_two";
        } else {
            // item 850002
            if (_sw850000_ === 2) {
                // item 93
                self.state = "detection";
            } else {
                // item 9
                self.state = "idle";
            }
        }
    } else {
        // item 9
        self.state = "idle";
    }
}

function Multi_one_or_two_timeout(self, evt) {
    // item 322
    sendAccumulated();
    // item 240
    self.state = "single";
}

function Multi_one_or_two_touchcancel(self, evt) {
    // item 323
    sendAccumulated();
    // item 253
    sendEnd(gPrev)
    // item 251
    self.state = "idle";
}

function Multi_one_or_two_touchend(self, evt) {
    // item 323
    sendAccumulated();
    // item 253
    sendEnd(gPrev)
    // item 251
    self.state = "idle";
}

function Multi_one_or_two_touchmove(self, evt) {
    // item 254
    var events = convertTouches(evt);
    // item 437
    if (events) {
        // item 307
        gAcc.push(events);
    }
    // item 306
    self.state = "one_or_two";
}

function Multi_one_or_two_touchstart(self, evt) {
    // item 259
    var events = convertTouches(evt);
    // item 434
    if (events) {
        // item 273
        setPrevious(events);
        // item 262
        self.state = "detection";
    } else {
        // item 436
        self.state = "one_or_two";
    }
}

function Multi_pan_touchcancel(self, evt) {
    // item 145
    self.state = "idle";
}

function Multi_pan_touchend(self, evt) {
    // item 145
    self.state = "idle";
}

function Multi_pan_touchmove(self, evt) {
    // item 234
    var events = convertTouches(evt);
    // item 446
    if (events) {
        // item 147
        var pan = getPan(events);
        // item 332
        panCanvas(pan.x, pan.y);
    }
    // item 146
    self.state = "pan";
}

function Multi_pan_touchstart(self, evt) {
    // item 23
    self.state = "idle";
}

function Multi_single_touchcancel(self, evt) {
    // item 403
    sendEnd(gPrev)
    // item 106
    self.state = "idle";
}

function Multi_single_touchend(self, evt) {
    // item 403
    sendEnd(gPrev)
    // item 106
    self.state = "idle";
}

function Multi_single_touchmove(self, evt) {
    // item 109
    var events = convertTouches(evt);
    // item 440
    if (events) {
        // item 370
        setPrevious(events);
        // item 111
        sendMove(events);
    }
    // item 112
    self.state = "single";
}

function Multi_single_touchstart(self, evt) {
    // item 402
    sendEnd(gPrev)
    // item 17
    self.state = "idle";
}

function Multi_zoom_touchcancel(self, evt) {
    // item 344
    beh.finishZoom();
    // item 161
    self.state = "idle";
}

function Multi_zoom_touchend(self, evt) {
    // item 344
    beh.finishZoom();
    // item 161
    self.state = "idle";
}

function Multi_zoom_touchmove(self, evt) {
    // item 235
    var events = convertTouches(evt);
    // item 449
    if (events) {
        // item 342
        var zoom = getPinch(events);
        // item 343
        view.zoomAt(gCenter, zoom);
    }
    // item 162
    self.state = "zoom";
}

function Multi_zoom_touchstart(self, evt) {
    // item 12
    self.state = "idle";
}

function convertTouches(evt) {
    // item 84
    var touchList = evt.touches;
    // item 42
    var result = [];
    // item 440001
    var i = 0;
    while (true) {
        // item 440002
        if (i < touchList.length) {
            
        } else {
            break;
        }
        // item 46
        var touch = touchList.item(i);
        var mouse = touchToMouse(touch);
        // item 54
        result.push(mouse);
        // item 440003
        i++;
    }
    // item 351
    if (result.length == 0) {
        // item 432
        return null
    } else {
        // item 354
        var mainTouch = result[0];
        // item 355
        if (gX == null) {
            
        } else {
            // item 357
            mainTouch.dx = mainTouch.pageX - gX;
            mainTouch.dy = mainTouch.pageY - gY;
        }
        // item 356
        gX = mainTouch.pageX;
        gY = mainTouch.pageY;
        // item 43
        return result;
    }
}

function detectPinch(events) {
    // item 284
    var olds = eventsToStr(gPrev);
    var news = eventsToStr(events);
    // item 221
    var old0 = gPrev[0];
    var old1 = gPrev[1];
    var new0 = events[0];
    var new1 = events[1];
    // item 222
    var oldDistance = distance(old0, old1);
    var newDistance = distance(new0, new1);
    var d0 = distance(old0, new0);
    var d1 = distance(old1, new1);
    var diff = Math.abs(newDistance - oldDistance);
    var total = d0 + d1;
    // item 226
    if (diff > total * 0.7) {
        // item 229
        return true;
    } else {
        // item 230
        return false;
    }
}

function detectPinchNever(events) {
    // item 416
    return false;
}

function distance(touch0, touch1) {
    // item 193
    var dx = touch0.pageX - touch1.pageX;
    var dy = touch0.pageY - touch1.pageY;
    // item 194
    return Math.sqrt(dx * dx + dy * dy);
}

function dotProduct(v0, v1) {
    // item 200
    return v0.x * v1.x + v0.y * v1.y;
}

function eventsToStr(events) {
    // item 279
    var result = "";
    // item 2800001
    var _ind280 = 0;
    var _col280 = events;
    var _len280 = _col280.length;
    while (true) {
        // item 2800002
        if (_ind280 < _len280) {
            
        } else {
            break;
        }
        // item 2800004
        var evt = _col280[_ind280];
        // item 282
        result += " " + evt.screenX + "," + evt.screenY;
        // item 2800003
        _ind280++;
    }
    // item 283
    return result;
}

function findCenter(events) {
    // item 177
    var evt0 = events[0];
    var evt1 = events[1];
    // item 178
    var x = Math.round((evt0.clientX + evt1.clientX) / 2);
    var y = Math.round((evt0.clientY + evt1.clientY) / 2);
    // item 404
    return new Utils.Point(
    	x,
    	y
    );
}

function getPan(evts) {
    // item 184
    var evt0 = gPrev[0];
    var evt1 = evts[0];
    // item 371
    setPrevious(evts);
    // item 186
    return subtract(evt1, evt0);
}

function getPinch(events) {
    // item 213
    var new0 = events[0];
    var new1 = events[1];
    // item 214
    var newDistance = distance(new0, new1);
    // item 224
    return newDistance / gDistance * gZoom;
}

function initZoom() {
    // item 339
    var old0 = gPrev[0];
    var old1 = gPrev[1];
    // item 340
    gDistance = distance(old0, old1);
    // item 338
    gCenter = findCenter(gPrev);
    // item 341
    gZoom = view.getZoom();
}

function panCanvas(dx, dy) {
    // item 329
    var zoom = view.getZoom();
    // item 331
    dx /= zoom;
    dy /= zoom;
    // item 330
    view.scrollBy(dx, dy);
}

function print(evt, tag) {
    // item 424
    if (DTools.isOn()) {
        // item 4220001
        var _ind422 = 0;
        var _col422 = evt.touches;
        var _len422 = _col422.length;
        while (true) {
            // item 4220002
            if (_ind422 < _len422) {
                
            } else {
                break;
            }
            // item 4220004
            var touch = _col422[_ind422];
            // item 430
            var message = tag + " "
             + Math.floor(touch.clientX) + " "
             + Math.floor(touch.clientY) + " "
             + touch.identifier + " "
             + evt.changedTouches.length
            // item 431
            DTools.print(message)
            // item 4220003
            _ind422++;
        }
    }
}

function printTouches(name, touches) {
    // item 291
    var result = name + " ";
    // item 2920001
    var i = 0;
    while (true) {
        // item 2920002
        if (i < touches.length) {
            
        } else {
            break;
        }
        // item 295
        var touch = touches.item(i);
        // item 296
        result +=
        touch.identifier + ":" + 
        Math.floor(touch.pageX) + "," + 
        Math.floor(touch.pageY) + " ";
        // item 2920003
        i++;
    }
    // item 294
    print(result);
}

function sendAccumulated() {
    // item 317
    sendStart(gPrev);
    // item 3180001
    var _ind318 = 0;
    var _col318 = gAcc;
    var _len318 = _col318.length;
    while (true) {
        // item 3180002
        if (_ind318 < _len318) {
            
        } else {
            break;
        }
        // item 3180004
        var ev = _col318[_ind318];
        // item 316
        sendMove(ev);
        // item 320
        setPrevious(ev)
        // item 3180003
        _ind318++;
    }
    // item 321
    gAcc = [];
}

function sendEnd(events) {
    // item 399
    var event = events[0];
    // item 397
    var diaEvent = view.toDiagram(event);
    // item 398
    beh.touchEnd(diaEvent);
}

function sendMove(events) {
    // item 400
    var event = events[0];
    // item 390
    var diaEvent = view.toDiagram(event);
    // item 391
    beh.touchMove(diaEvent);
}

function sendStart(events) {
    // item 401
    var event = events[0];
    // item 383
    var diaEvent = view.toDiagram(event);
    // item 384
    beh.touchStart(diaEvent);
}

function setPrevious(value) {
    // item 369
    gPrev = value;
}

function subtract(p0, p1) {
    // item 206
    var dx = p0.pageX - p1.pageX;
    var dy = p0.pageY - p1.pageY;
    // item 207
    return new Utils.Point(dx, dy);
}

function touchToMouse(touch) {
    // item 52
    var mouse = {
    	button: 0,
    	screenX: touch.screenX,
    	screenY: touch.screenY,
    	clientX: touch.clientX,
    	clientY: touch.clientY,
    	pageX: touch.pageX,
    	pageY: touch.pageY,
    	target: touch.target
    };
    // item 53
    return mouse;
}

function touchcancel(evt) {
    // item 82
    gMachine.touchcancel(evt);
}

function touchend(evt) {
    // item 68
    gMachine.touchend(evt);
}

function touchmove(evt) {
    // item 429
    print(evt, "move")
    // item 75
    gMachine.touchmove(evt);
}

function touchstart(evt) {
    // item 428
    print(evt, "start")
    // item 61
    gMachine.touchstart(evt);
}

function Multi() {
  var _self = this;
  _self.type_name = "Multi";
  _self.state = "idle";
  _self.timeout = function(evt) {
    var _state_ = _self.state;
    if (_state_ == "one_or_two") {
      return Multi_one_or_two_timeout(_self, evt);
    }
    return null;
  };
  _self.touchcancel = function(evt) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Multi_idle_touchcancel(_self, evt);
    }
    else if (_state_ == "one_or_two") {
      return Multi_one_or_two_touchcancel(_self, evt);
    }
    else if (_state_ == "single") {
      return Multi_single_touchcancel(_self, evt);
    }
    else if (_state_ == "detection") {
      return Multi_detection_touchcancel(_self, evt);
    }
    else if (_state_ == "pan") {
      return Multi_pan_touchcancel(_self, evt);
    }
    else if (_state_ == "zoom") {
      return Multi_zoom_touchcancel(_self, evt);
    }
    return null;
  };
  _self.touchend = function(evt) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Multi_idle_touchend(_self, evt);
    }
    else if (_state_ == "one_or_two") {
      return Multi_one_or_two_touchend(_self, evt);
    }
    else if (_state_ == "single") {
      return Multi_single_touchend(_self, evt);
    }
    else if (_state_ == "detection") {
      return Multi_detection_touchend(_self, evt);
    }
    else if (_state_ == "pan") {
      return Multi_pan_touchend(_self, evt);
    }
    else if (_state_ == "zoom") {
      return Multi_zoom_touchend(_self, evt);
    }
    return null;
  };
  _self.touchmove = function(evt) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Multi_idle_touchmove(_self, evt);
    }
    else if (_state_ == "one_or_two") {
      return Multi_one_or_two_touchmove(_self, evt);
    }
    else if (_state_ == "single") {
      return Multi_single_touchmove(_self, evt);
    }
    else if (_state_ == "detection") {
      return Multi_detection_touchmove(_self, evt);
    }
    else if (_state_ == "pan") {
      return Multi_pan_touchmove(_self, evt);
    }
    else if (_state_ == "zoom") {
      return Multi_zoom_touchmove(_self, evt);
    }
    return null;
  };
  _self.touchstart = function(evt) {
    var _state_ = _self.state;
    if (_state_ == "idle") {
      return Multi_idle_touchstart(_self, evt);
    }
    else if (_state_ == "one_or_two") {
      return Multi_one_or_two_touchstart(_self, evt);
    }
    else if (_state_ == "single") {
      return Multi_single_touchstart(_self, evt);
    }
    else if (_state_ == "detection") {
      return Multi_detection_touchstart(_self, evt);
    }
    else if (_state_ == "pan") {
      return Multi_pan_touchstart(_self, evt);
    }
    else if (_state_ == "zoom") {
      return Multi_zoom_touchstart(_self, evt);
    }
    return null;
  };
}


this.touchstart = touchstart;
this.touchend = touchend;
this.touchmove = touchmove;
this.touchcancel = touchcancel;
this.setBeh = function(behaviour) { beh = behaviour; }

var gMachine = new Multi();

}
