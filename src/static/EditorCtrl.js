function EditorCtrl(window, document, elementId, userId) {

var SecondBackground = "#455A64"
var LightBack = "#E2EDF5"

var globals = {}
globals.groups = []
globals.delay = false
globals.readonly = false
globals.onReadonly = null
globals.toolName = "basic"
globals.toolNameFree = "free-basic"
globals.toolNameMind = "dia-mind"
globals.userColors = []
globals.movable = null
globals.leftButts = []
globals.rightButts = []
globals.positions = {}

var fontFiles = {}

var SideSize = 40
var tbWidth = 115

// Autogenerated with DRAKON Editor 1.33


function ButtonInfo(id, image, tooltip, command) {
    this.id = id
    this.image = image
    this.tooltip = tooltip
    this.command = command
}

function ManyFontLoader_Normal_fontLoaded(self, msg) {
    self.current++
    if (self.current == self.faces.length) {
        self.onLoaded()
        self.state = null;
    } else {
        loadNextFont(self)
        self.state = "Normal";
    }
}

function ManyFontLoader_Normal_start(self, msg) {
    self.current = 0
    self.faces = msg
    loadNextFont(self)
    self.state = "Normal";
}

function Persistence() {
    this.add = add
    this.persist = persist
    this.remove = remove
    this.update = update
    this.updateDiagram = updateDiagram
}

function SameValue(name) {
    this.name = name
    this.different = false
    this.value = null
}

function add(item) {
    globals.added.push(Utils.copyObject(item))
}

function add2Buttons(name, id, image, tooltip, command, id2, image2, tooltip2, command2) {
    var group = findIconGroup(name)
    var item1 = {
    	id: id,
    	image: image,
    	tooltip: tooltip,
    	command: addStartTrace(id, command)
    }
    var row = [item1]
    if (id2) {
        var item2 = {
        	id: id2,
        	image: image2,
        	tooltip: tooltip2,
        	command: addStartTrace(id2, command2)
        }
        row.push(item2)
    }
    group.rows.push(row)
}

function addColor(parent, getColor, title, onChange) {
    var onClick = function() {
    	var color = getColor()
    	showColorPicker(
    		parent,
    		color,
    		title,
    		onChange
    	)
    }
    var color = getColor()
    return addColorButton(
    	parent,
    	color,
    	5,
    	onClick
    )
}

function addColorButton(parent, color, margin, onClick) {
    var div = make(parent, "div")
    div.style.display = "inline-block"
    div.style.margin = margin + "px"
    div.style.width = "30px"
    div.style.height = "30px"
    div.style.cursor = "pointer"
    div.style.border = "solid 1px #a0a0a0"
    div.style.borderRadius = "5px"
    setColorButColor(div, color)
    div.onclick = onClick
    return div
}

function addFontFile(italic, bold, family, file) {
    var key = makeFontKey(
    	italic,
    	bold,
    	family
    )
    fontFiles[key] = file
}

function addFree(evt, type, subtype) {
    addTrace("ec:addFree", [type])
    var view = globals.view
    var cnv = globals.canvas
    var zoom = view.getZoom()
    var cbox = cnv.getBoundingClientRect()
    var cx = cbox.left + 100 * zoom
    var cy = evt.clientY
    var dia = view.clientToDiagram(cx, cy)
    globals.editor.insertFreeItem(
    	dia.x,
    	dia.y,
    	type,
    	subtype
    )
    globals.view.redraw()
}

function addFreeButtons() {
    var rect = new ButtonInfo("f_rectangle", "rectangle.png", "BUT_FREE_RECTANGLE", function(e){addFree(e, "f_rectangle")})
    var label = new ButtonInfo("f_label", "text.png", "BUT_TEXT", function(e){addFree(e,"f_label")})
    var line = new ButtonInfo("f_line", "line.png", "BUT_LINE", function(e){addFree(e, "f_line")})
    var arrow = new ButtonInfo("f_arrow", "arrow.png", "BUT_ARROW", function(e){addFree(e, "f_arrow")})
    var begin = new ButtonInfo("f_begin", "f_begin.png", "BUT_FBEGIN", function(e){addFree(e, "f_begin")})
    var rounded = new ButtonInfo("f_rounded", "rounded.png", "BUT_ROUNDED", function(e){addFree(e, "f_rounded")})
    var left = new ButtonInfo("f_ptr_left", "ptr-left.png", "BUT_PTR_LEFT", function(e){addFree(e, "f_ptr_left")})
    var right = new ButtonInfo("f_ptr_right", "ptr-right.png", "BUT_PTR_RIGHT", function(e){addFree(e, "f_ptr_right")})
    var insertion = new ButtonInfo("f_insertion", "f_insertion.png", "BUT_INSERTION", function(e){addFree(e, "f_insertion")})
    var shelf = new ButtonInfo("f_shelf", "f_shelf.png", "BUT_SHELF", function(e){addFree(e, "f_shelf")})
    var callout = new ButtonInfo("f_callout", "callout.png", "BUT_CALLOUT", function(e){addFree(e,"callout")})
    var circle = new ButtonInfo("f_circle", "circle.png", "BUT_CIRCLE", function(e){addFree(e,"f_circle")})
    var vscroll = new ButtonInfo("f_ui_vscroll", "f_ui_vscroll.png", "BUT_UI_VSCROLL",
         function(e){addFree(e, "f_more", "f_ui_vscroll")})
    var hscroll = new ButtonInfo("f_ui_hscroll", "f_ui_hscroll.png", "BUT_UI_HSCROLL",
         function(e){addFree(e, "f_more", "f_ui_hscroll")})
    addToIconGroup("free-basic", [rect, label])
    addToIconGroup("free-basic", [line, arrow])
    addToIconGroup("free-basic", [begin, rounded])
    addToIconGroup("free-basic", [left, right])
    addToIconGroup("free-basic", [insertion, shelf])
    addToIconGroup("free-basic", [callout, circle])
    addToIconGroup("full", [rect, label])
    addToIconGroup("full", [line, arrow])
    addToIconGroup("full", [left, right])
    var cross = new ButtonInfo("f_ui_cross", "f_cross.png", "BUT_UI_CROSS",
         function(e){addFree(e, "f_more", "f_ui_cross")})
    var check = new ButtonInfo("f_ui_check", "check.png", "BUT_UI_CHECK",
         function(e){addFree(e, "f_more", "f_ui_check")})
    var menu = new ButtonInfo("f_ui_menu", "f_menu.png", "BUT_UI_MENU",
         function(e){addFree(e, "f_more", "f_ui_menu")})
    var combo = new ButtonInfo("f_ui_combo", "f_combo.png", "BUT_UI_COMBO",
         function(e){addFree(e, "f_more", "f_ui_combo")})
    var left1 = new ButtonInfo("f_ui_left", "left-angle.png", "BUT_UI_LEFT",
         function(e){addFree(e, "f_more", "f_ui_left")})
    var right1 = new ButtonInfo("f_ui_right", "right-angle.png", "BUT_UI_RIGHT",
         function(e){addFree(e, "f_more", "f_ui_right")})
    var up = new ButtonInfo("f_ui_up", "up-angle.png", "BUT_UI_UP",
         function(e){addFree(e, "f_more", "f_ui_up")})
    var down = new ButtonInfo("f_ui_down", "down-angle.png", "BUT_UI_DOWN",
         function(e){addFree(e, "f_more", "f_ui_down")})
    var left2 = new ButtonInfo("f_ui_left2", "left-angle2.png", "BUT_UI_LEFT2",
         function(e){addFree(e, "f_more", "f_ui_left2")})
    var right2 = new ButtonInfo("f_ui_right2", "right-angle2.png", "BUT_UI_RIGHT2",
         function(e){addFree(e, "f_more", "f_ui_right2")})
    var placeholder = new ButtonInfo("f_ui_placeholder", "placeholder.png", "BUT_UI_PLACEHOLDER",
         function(e){addFree(e, "f_placeholder")})
    var tab = new ButtonInfo("f_ui_tab", "f_tab.png", "BUT_UI_TAB",
         function(e){addFree(e, "f_tab")})
    var check_false = new ButtonInfo("f_ui_check_false", "check_false.png", "BUT_UI_CHECK_FALSE",
         function(e){addFree(e, "f_more", "f_ui_check_false")})
    var check_true = new ButtonInfo("f_ui_check_true", "check_true.png", "BUT_UI_CHECK_TRUE",
         function(e){addFree(e, "f_more", "f_ui_check_true")})
    var radio_false = new ButtonInfo("f_ui_radio_false", "radio_false.png", "BUT_UI_RADIO_FALSE",
         function(e){addFree(e, "f_more", "f_ui_radio_false")})
    var radio_true = new ButtonInfo("f_ui_radio_true", "radio_true.png", "BUT_UI_RADIO_TRUE",
         function(e){addFree(e, "f_more", "f_ui_radio_true")})
    var dots3h = new ButtonInfo("f_ui_dots3h", "dots3h.png", "BUT_UI_DOTS3H",
         function(e){addFree(e, "f_more", "f_ui_dots3h")})
    var dots3v = new ButtonInfo("f_ui_dots3v", "dots3v.png", "BUT_UI_DOTS3V",
         function(e){addFree(e, "f_more", "f_ui_dots3v")})
    var close = new ButtonInfo("f_ui_close", "close.png", "BUT_UI_CLOSE",
         function(e){addFree(e, "f_more", "f_ui_close")})
    var close_mac = new ButtonInfo("f_ui_close_mac", "close_mac.png", "BUT_UI_CLOSE_MAC",
         function(e){addFree(e, "f_more", "f_ui_close_mac")})
    var search = new ButtonInfo("f_ui_search", "search.png", "BUT_UI_SEARCH",
         function(e){addFree(e, "f_more", "f_ui_search")})
    addToIconGroup("free-ui", [rect, label])
    addToIconGroup("free-ui", [line, arrow])
    addToIconGroup("free-ui", [begin, rounded])
    addToIconGroup("free-ui", [left, right])
    addToIconGroup("free-ui", [callout, shelf])
    addToIconGroup("free-ui", [circle, placeholder])
    addToIconGroup("free-ui", [hscroll, vscroll])
    addToIconGroup("free-ui", [check_true, check_false])
    addToIconGroup("free-ui", [radio_true, radio_false])
    addToIconGroup("free-ui", [cross, check])
    addToIconGroup("free-ui", [menu, combo])
    addToIconGroup("free-ui", [left1, right1])
    addToIconGroup("free-ui", [up, down])
    addToIconGroup("free-ui", [left2, right2])
    addToIconGroup("free-ui", [tab, search])
    addToIconGroup("free-ui", [close, close_mac])
    addToIconGroup("free-ui", [dots3h, dots3v])
    var pc = new ButtonInfo("f_ar_pc", "pc.png", "BUT_AR_PC",
         function(e){addFree(e, "f_more", "f_ar_pc")})
    var human = new ButtonInfo("f_ar_human", "human.png", "BUT_AR_HUMAN",
         function(e){addFree(e, "f_more", "f_ar_human")})
    var server1 = new ButtonInfo("f_ar_server1", "server1.png", "BUT_AR_SERVER1",
         function(e){addFree(e, "f_more", "f_ar_server1")})
    var server2 = new ButtonInfo("f_ar_server2", "server2.png", "BUT_AR_SERVER2",
         function(e){addFree(e, "f_more", "f_ar_server2")})
    var phone = new ButtonInfo("f_ar_phone", "phone.png", "BUT_AR_PHONE",
         function(e){addFree(e, "f_more", "f_ar_phone")})
    var tablet = new ButtonInfo("f_ar_tablet", "tablet.png", "BUT_AR_TABLET",
         function(e){addFree(e, "f_more", "f_ar_tablet")})
    var notebook = new ButtonInfo("f_ar_notebook", "notebook.png", "BUT_AR_NOTEBOOK",
         function(e){addFree(e, "f_more", "f_ar_notebook")})
    var portrait = new ButtonInfo("f_ar_portrait", "portrait.png", "BUT_AR_PORTRAIT",
         function(e){addFree(e, "f_more", "f_ar_portrait")})
    var cloud = new ButtonInfo("f_cloud", "cloud.png", "BUT_AR_CLOUD",
         function(e){addFree(e, "f_cloud", "")})
    var db = new ButtonInfo("f_db", "db.png", "BUT_AR_DATABASE",
         function(e){addFree(e, "f_db", "")})
    addToIconGroup("free-ar", [rect, label])
    addToIconGroup("free-ar", [line, arrow])
    addToIconGroup("free-ar", [begin, rounded])
    addToIconGroup("free-ar", [left, right])
    addToIconGroup("free-ar", [insertion, shelf])
    addToIconGroup("free-ar", [callout, circle])
    addToIconGroup("free-ar", [cloud, db])
    addToIconGroup("free-ar", [human, portrait])
    addToIconGroup("free-ar", [pc, notebook])
    addToIconGroup("free-ar", [server1, server2])
    addToIconGroup("free-ar", [phone, tablet])
}

function addMindButtons() {
    var action = {
    	id: "mind_action",
    	image: "rectangle.png",
    	tooltip: "BUT_RECTANGLE",
    	shortcut: "A",
    	command: function() { showMindSockets("action") }
    }
    var raction = {
    	id: "mind_raction",
    	image: "rounded.png",
    	tooltip: "BUT_ROUNDED",
    	shortcut: "R",
    	command: function() { showMindSockets("raction") }
    }
    var collection = {
    	id: "mind_collection",
    	image: "collection.png",
    	tooltip: "BUT_COLLECTION",
    	shortcut: "C",
    	command: function() { showMindSockets("collection") }
    }
    var beginend = {
    	id: "mind_beginend",
    	image: "f_begin.png",
    	tooltip: "BUT_FBEGIN",
    	shortcut: "S",
    	command: function() { showMindSockets("beginend") }
    }
    var minsertion = {
    	id: "mind_insertion",
    	image: "insertion.png",
    	tooltip: "BUT_INSERTION",
    	shortcut: "N",
    	command: function() { showMindSockets("insertion") }
    }
    var horver = {
    	id: "mind_horver",
    	image: "horver.png",
    	tooltip: "MES_TOGGLE_TREE",
    	command: toggleTreeType
    }
    var callout = new ButtonInfo("f_callout", "callout.png", "BUT_CALLOUT", function(e){addFree(e,"callout")})
    var circle = new ButtonInfo("f_circle", "circle.png", "BUT_CIRCLE", function(e){addFree(e,"f_circle")})
    var line = new ButtonInfo("f_line", "line.png", "BUT_LINE", function(e){addFree(e, "f_line")})
    var arrow = new ButtonInfo("f_arrow", "arrow.png", "BUT_ARROW", function(e){addFree(e, "f_arrow")})
    var left = new ButtonInfo("f_ptr_left", "ptr-left.png", "BUT_PTR_LEFT", function(e){addFree(e, "f_ptr_left")})
    var right = new ButtonInfo("f_ptr_right", "ptr-right.png", "BUT_PTR_RIGHT", function(e){addFree(e, "f_ptr_right")})
    var rect = new ButtonInfo(
    	"f_rectangle", "rectangle.png", "BUT_FREE_RECTANGLE",
    	function(e){addFree(e, "f_rectangle")}
    )
    var shelf = {
    	id: "tt_shelf",
    	image: "shelf.png",
    	shortcut: "F",
    	tooltip: "BUT_SHELF",
    	command: function() { showSockets("shelf") }
    }
    addToIconGroup("dia-mind", [action, raction])
    addToIconGroup("dia-mind", [collection, beginend])
    addToIconGroup("dia-mind", [minsertion, shelf])
    addToIconGroup("dia-mind", [horver])
    addToIconGroup("dia-mind2", [line, arrow])
    addToIconGroup("dia-mind2", [left, right])
    addToIconGroup("dia-mind2", [rect, callout])
}

function addOption(select, value, textId) {
    var text = globals.translate(textId)
    var option = make(select, "option")
    HtmlUtils.setDivText(option, text)
    option.value = value
}

function addParameters() {
    addTrace("ec:addParameters")
    globals.editor.addParameters()
    home()
}

function addSmallButton(div, id, text, tooltip, action) {
    var button = make(div, "button")
    HtmlUtils.setDivText(button, text)
    button.id = id
    button.className = "panic_button"
    button.style.margin = "0px"
    button.style.marginLeft = "5px"
    button.style.fontSize = "12px"
    button.style.display = "inline-block"
    button.style.padding = "3px 10px"
    if (tooltip) {
        globals.tooltip.make(
        	button,
        	tooltip
        )
    }
    if (action) {
        button.onclick = action
    }
    return button
}

function addStartTrace(id, command) {
    return function(e) {
    	CallTrace.reset()
    	addTrace(id)
    	command(e)
    }
}

function addTitle(parent, titleId) {
    if (titleId) {
        var div = make(parent, "div")
        var title = globals.translate(titleId)
        HtmlUtils.setDivText(div, title)
        div.style.background = LightBack
        div.style.padding = "5px"
    }
}

function addToIconGroup(name, row) {
    var group = findIconGroup(name)
    group.rows.push(row)
}

function addToolCombo(parent, value) {
    var select = make(parent, "select")
    select.style.width = "93px"
    select.style.fontSize = "80%"
    select.style.height = "30px"
    addOption(select, "basic", "MES_BASIC")
    addOption(select, "medic", "MES_MEDIC")
    addOption(select, "full", "MES_FULL")
    select.value = value
    select.onchange = onToolNameChanged
}

function addToolComboFree(parent, value) {
    var select = make(parent, "select")
    select.style.width = "93px"
    select.style.fontSize = "80%"
    select.style.height = "30px"
    addOption(select, "free-basic", "MES_BASIC")
    addOption(select, "free-ui", "UI")
    addOption(select, "free-ar", "MES_ARCHITECTURE")
    select.value = value
    select.onchange = onToolNameFreeChanged
}

function addToolGroup(parent, group) {
    var table = make(parent, "table")
    table.className = "toolbox"
    var _ind755 = 0;
    var _col755 = group.rows;
    var _len755 = _col755.length;
    while (true) {
        if (_ind755 < _len755) {
            
        } else {
            break;
        }
        var row = _col755[_ind755];
        var tr = make(table, "tr")
        makeRowUi(tr, row)
        _ind755++;
    }
}

function addTrace(name, args) {
    CallTrace.add(name, args)
}

function applySearchOutput(options) {
    var status = get("find_status")
    if (options.output.number) {
        status.style.color = ""
        HtmlUtils.setDivText(
        	status,
        	options.output.number + " " + translate("MES_REPLACED")
        )
    } else {
        if (options.output.total == 0) {
            HtmlUtils.setDivText(
            	status,
            	translate("MES_NOTHING_FOUND")
            )
            status.style.color = "red"
        } else {
            status.style.color = ""
            if (options.output.current == -1) {
                HtmlUtils.setDivText(
                	status,
                	translate("MES_FOUND") + " " +
                		options.output.total
                )
            } else {
                var current = options.output.current + 1
                if (current > options.output.total) {
                    HtmlUtils.setDivText(
                    	status,
                    	translate("MES_REACHED_END")
                    )
                } else {
                    HtmlUtils.setDivText(
                    	status,
                    	current + " " + translate("MES_FOUND_OF") + " " +
                    		options.output.total
                    )
                }
            }
        }
    }
    if (options.output.canNext) {
        enableButton(get("find_next"))
    } else {
        disableButton(get("find_next"))
    }
    if (options.output.canPrev) {
        enableButton(get("find_prev"))
    } else {
        disableButton(get("find_prev"))
    }
    if (options.output.canReplace) {
        enableButton(get("find_do_replace"))
    } else {
        disableButton(get("find_do_replace"))
    }
    if (options.output.canReplaceAll) {
        enableButton(get("find_replace_all"))
    } else {
        disableButton(get("find_replace_all"))
    }
    var line = get("find_line")
    line.innerHTML = ""
    var span1 = make(line, "span")
    HtmlUtils.setDivText(span1, options.output.before)
    var span2 = make(line, "span")
    HtmlUtils.setDivText(span2, options.output.match)
    span2.style.fontWeight = "bold"
    span2.style.background = "#ffd0a0"
    var span3 = make(line, "span")
    HtmlUtils.setDivText(span3, options.output.after)
}

function arrowDown(ctrl, shift, alt) {
    addTrace("ec:down")
    if (alt) {
        pan(0, 1)
    } else {
        var visible = globals.view.getVisibleBox()
        globals.editor.arrowDown(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function arrowLeft(ctrl, shift, alt) {
    addTrace("ec:left")
    if (alt) {
        pan(-1, 0)
    } else {
        var visible = globals.view.getVisibleBox()
        globals.editor.arrowLeft(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function arrowRight(ctrl, shift, alt) {
    addTrace("ec:right")
    if (alt) {
        pan(1, 0)
    } else {
        var visible = globals.view.getVisibleBox()
        globals.editor.arrowRight(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function arrowUp(ctrl, shift, alt) {
    addTrace("ec:up")
    if (alt) {
        pan(0, -1)
    } else {
        var visible = globals.view.getVisibleBox()
        globals.editor.arrowUp(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function autoResize() {
    addTrace("ec:autoResize")
    globals.delay = true
    globals.editor.autoSizeIcons()
    globals.delay = false
    persist()
}

function bText() {
    var onSave = function(){}
    if (globals.readonly) {
        
    } else {
        onSave = function() {}
    }
    var content = globals.editor.toBText()
    var title = globals.translate("MES_DIAGRAM_SOURCE")
    globals.inputBox.show(
    	title,
    	content,
    	onSave,
    	checkSource
    )
}

function bindSearchShortcuts(input) {
    input.onkeydown = handleSearchShortcuts
}

function buildChanges(src) {
    var change = {
    	editType: "edit",
    	added: src.added,
    	removed: src.removed,
    	updated: src.updated
    }
    Utils.mergeSets(change, src.diagramUpdate)
    increaseTag(src, change)
    return change
}

function buildDiagramFromItems(src) {
    var name = src.name
    var items = src.items
    var background = src.background
    var diaLine = src.diaLine
    var diaLineThickness = src.diaLineThickness
    var font = src.font
    var diagram = {
    	name: name,
    	type: src.type,
    	background: background,
    	diaLine: diaLine,
    	diaLineThickness: diaLineThickness,
    	version: src.version,
    	font: font,
    	nodes: {},
    	edges: {},
    	free: {}
    }
    var _ind422 = 0;
    var _col422 = items;
    var _len422 = _col422.length;
    while (true) {
        if (_ind422 < _len422) {
            
        } else {
            break;
        }
        var item = _col422[_ind422];
        var copy = Utils.copyObject(item)
        var id = copy.id
        if (copy.free) {
            diagram.free[id] = copy
        } else {
            if (copy.isLine) {
                diagram.edges[id] = copy
            } else {
                diagram.nodes[id] = copy
            }
        }
        _ind422++;
    }
    return diagram
}

function buildThemeDefinitions() {
    var row1 = [
    	["theme11.png", "#FFFFFF", "#000000", "#000000", "#000000", "#000000", "#c0d0ff", "#b0b0b0", [
    		["insertion", "#ffffff", "#000000", "#000000", "#ffffff"],
    		["loopbegin", "#FFFFE0", "#000000", "#000000"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme12.png", "#FFFFFF", "#000000", "#000000", "#000000", "#000000", "#FFFFFF", "#ffffff", [
    	["insertion", "#ffffff", "#000000", "#000000", "#ffffff"]
            ]],
    	["theme13.png", "#FFFFFF", "#000000", "#827D7D", "#000000", "#000000", "#DADEFF", "#b0b0b0", [
    		["insertion", "#ffffff", "#000000", "#827D7D", "#ffffff"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme14.png", "#FFFFFF", "#000000", "#000000", "#000000", "#000000", "#c0d0ff", "#b0b0b0", [
    		["insertion", "#ffffff", "#000000", "#000000", "#ffffff"],
    		["question", "#ffffd3", "#000000", "#000000"],
    		["select", "#ffdbdb", "#000000", "#000000"],
    		["loopbegin", "#deffde", "#000000", "#000000"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]]
     ]
    var row2 = [
    
    	["theme21.png", "#568FFF", "#ffffff", "none", "#000000", "#000000", "#ffffff", "#B1CAFF", [
    		["question", "#436AB9", "#ffffff", "none"],
    		["insertion", "#568FFF", "#ffffff", "none", "#436AB9"],
    		["loopbegin", "#5A72A2", "#ffffff", "none"],
    		["callout", "#FFFC96", "#000000", "#626262"],
    		["comment", "#568FFF", "#ffffff", "none"]
    	]],
    
    	["theme22.png", "#568FFF", "#ffffff", "none", "#000000", "#000000", "#ffffff", "#B1CAFF", [
    		["question", "#2A9E4B", "#ffffff", "none"],
    		["insertion", "#568FFF", "#ffffff", "none", "#436AB9"],
    		["loopbegin", "#3EBD62", "#ffffff", "none"],
    		["callout", "#FFFC96", "#000000", "#626262"],
    		["comment", "#568FFF", "#ffffff", "none"]
    	]],	
    
    	["theme23.png", "#568FFF", "#ffffff", "none", "#000000", "#000000", "#ffffff", "#B1CAFF", [
    		["question", "#ffffff", "#000000", "#00137F"],
    		["insertion", "#568FFF", "#ffffff", "none", "#436AB9"],
    		["loopbegin", "#5A72A2", "#ffffff", "none"],
    		["callout", "#FFFC96", "#000000", "#626262"],
    		["comment", "#568FFF", "#ffffff", "none"]
    	]],
    
    	["theme24.png", "#FFE26C", "#000000", "none", "#000000", "#000000", "#ffffff", "#FFA849", [
    		["question", "#FFA849", "#000000", "none"],
    		["insertion", "#FFE26C", "#000000", "none", "#CBB145"],
    		["loopbegin", "#F2C371", "#000000", "none"],
    		["callout", "#FCFCFC", "#000000", "#626262"],
    		["comment", "#FFE26C", "#000000", "none"]
    	]]
     ]
    var row3 = [
    	["theme31.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#DE3E26", "#ffffff", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#FF5454", "#000000", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],	
    
    	["theme32.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#EDEEF0", "#000000", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#EDEEF0", "#000000", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],	
    	
    	["theme33.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#C2C0C0", "#000000", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#A0A0A0", "#000000", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],	
    	
    	["theme34.png", "#ffffff", "#000000", "none", "#000000", "#000000", "#3BAD4D", "#9EC85C", [
    		["question", "#215B2A", "#ffffff", "none"],
    		["insertion", "#EDEEF0", "#000000", "none", "#9EC85C"],
    		["loopbegin", "#9EC85C", "#000000", "none"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "none"]
    	]]
    ]
    var row4 = [
    	["theme41.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#436AB9", "#ffffff", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#5A72A2", "#ffffff", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],
    	
    	["theme42.png", "#F5EBE4", "#000000", "#000000", "#000000", "#000000", "#FFFFFF", "#b0b0b0", [
    		["insertion", "#F5EBE4", "#000000", "#000000", "#F5EBE4"],
    		["question", "#e5e6e4", "#000000", "#000000"],
    		["select", "#cfd2cd", "#000000", "#000000"],
    		["loopbegin", "#CAC8C8", "#000000", "#000000"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme43.png", "#bfd8bd", "#000000", "#597A62", "#000000", "#000000", "#FFFFFF", "#70b070", [
    		["insertion", "#bfd8bd", "#000000", "#597A62", "#bfd8bd"],
    		["question", "#edeec9", "#000000", "#597A62"],
    		["select", "#98c9a3", "#000000", "#597A62"],
    		["loopbegin", "#98c9a3", "#000000", "#597A62"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme44.png", "#ffffff", "#000000", "none", "#000000", "#000000", "#0094FF", "#7FC9FF", [
    		["question", "#12279F", "#ffffff", "none"],
    		["insertion", "#ffffff", "#000000", "none", "#7FC9FF"],
    		["loopbegin", "#7FC9FF", "#000000", "none"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#ffffff", "#000000", "none"]
    	]]
     ]
    var row5 = [
    	["theme51.png", "#000000", "#ffffff", "#B2B2B2", "#ffffff", "#ffffff", "#000000", "#000000", [
    		["insertion", "#000000", "#ffffff", "#B2B2B2", "#000000"],
    		["callout", "#000000", "#ffffff", "#B2B2B2"]
    	]],
    	["theme52.png", "#000000", "#ace4ff", "#6B6DFF", "#ace4ff", "#ace4ff", "#000540", "#000080", [
    		["insertion", "#000000", "#ace4ff", "#6B6DFF", "#000000"],
    		["callout", "#000590", "#ace4ff", "#6B6DFF"]
    	]],
    	["theme53.png", "#000000", "#fff1c8", "#797954", "#fff1c8", "#fff1c8", "#000020", "#000080", [
    		["insertion", "#000000", "#fff1c8", "#797954", "#000000"],
    		["question", "#1f1f00", "#fff1c8", "#999974"],
    		["select", "#250100", "#fff1c8", "#999974"],
    		["loopbegin", "#042d00", "#fff1c8", "#999974"],
    		["callout", "#000590", "#fff1c8", "#999974"]
    	]],
    	["theme54.png", "#000000", "#4aff4d", "#008000", "#4aff4d", "#4aff4d", "#000000", "#007000", [
    		["insertion", "#000000", "#4aff4d", "#008000", "#000000"],
    		["question", "#002400", "#4aff4d", "#008000"],
    		["select", "#000000", "#4aff4d", "#008000"],
    		["loopbegin", "#005100", "#4aff4d", "#008000"],
    		["callout", "#002400", "#4aff4d", "#008000"]
    	]]
     ]
    var row6 = [
    	["theme61.png", "#FFFFFF", "#000000", "#b0b0b0", "#000000", "#000000", "#FFFFFF", "#d0d0d0", [
    	["insertion", "#ffffff", "#000000", "#b0b0b0", "#ffffff"],
    	["callout", "#FFFFF0", "#000000", "#b0b0b0"]
            ], 2],	
    
    	["theme62.png", "#AFF0DD", "#000000", "#00987E", "#000000", "#000000", "#ffffff", "#8FD6C2", [
    		["question", "#8FD6C2", "#000000", "#00987E"],
    		["insertion", "#AFF0DD", "#000000", "#00987E", "#8FD6C2"],
    		["loopbegin", "#85C2C5", "#000000", "#00987E"],
    		["callout", "#FFFFF0", "#000000", "#00987E"],
    		["comment", "#AFF0DD", "#000000", "#00987E"]
    	], 2],	
    	
    	["theme63.png", "#C4E2F8", "#000000", "#5C9CCB", "#000000", "#000000", "#ffffff", "#80BFEF", [
    		["question", "#96CBF3", "#000000", "#5C9CCB"],
    		["insertion", "#C4E2F8", "#000000", "#5C9CCB", "#80BFEF"],
    		["loopbegin", "#80BFEF", "#000000", "#5C9CCB"],
    		["callout", "#FFFFF0", "#000000", "#5C9CCB"],
    		["comment", "#C4E2F8", "#000000", "#5C9CCB"]
    	], 2],
    
    	["theme64.png", "#fff68f", "#000000", "#9B9262", "#000000", "#000000", "#FFFFFF", "#E6C543", [
    	["question", "#E6C543", "#000000", "#9B9262"],
    	["insertion", "#fff68f", "#000000", "#9B9262", "#E6C543"],
    	["callout", "#fff64f", "#000000", "#9B9262"]
            ], 2]
    ]
    var row7 = [
    	["theme71.png", "#FFFFFF", "#000000", "#b0b0b0", "#000000", "#000000", "#FFFFFF", "#d0d0d0", [
    	["insertion", "#ffffff", "#000000", "#b0b0b0", "#ffffff"],
    	["callout", "#FFFFF0", "#000000", "#b0b0b0"]
            ], 3],	
    
    	["theme72.png", "#AFF0DD", "#000000", "#00987E", "#000000", "#000000", "#ffffff", "#8FD6C2", [
    		["question", "#8FD6C2", "#000000", "#00987E"],
    		["insertion", "#AFF0DD", "#000000", "#00987E", "#8FD6C2"],
    		["loopbegin", "#85C2C5", "#000000", "#00987E"],
    		["callout", "#FFFFF0", "#000000", "#00987E"],
    		["comment", "#AFF0DD", "#000000", "#00987E"]
    	], 3],	
    	
    	["theme73.png", "#C4E2F8", "#000000", "#5C9CCB", "#000000", "#000000", "#ffffff", "#80BFEF", [
    		["question", "#96CBF3", "#000000", "#5C9CCB"],
    		["insertion", "#C4E2F8", "#000000", "#5C9CCB", "#80BFEF"],
    		["loopbegin", "#80BFEF", "#000000", "#5C9CCB"],
    		["callout", "#FFFFF0", "#000000", "#5C9CCB"],
    		["comment", "#C4E2F8", "#000000", "#5C9CCB"]
    	], 3],
    
    	["theme74.png", "#fff68f", "#000000", "#9B9262", "#000000", "#000000", "#FFFFFF", "#E6C543", [
    	["question", "#E6C543", "#000000", "#9B9262"],
    	["insertion", "#fff68f", "#000000", "#9B9262", "#E6C543"],
    	["callout", "#fff64f", "#000000", "#9B9262"]
            ], 3]	
    ]
    return [row1, row2, row3, row4, row5, row6, row7]
}

function buildThemeMenuItem(key) {
    var callback = function() {
    	setTheme(key)
    }
    var draw = function(canvas, width, height) {
    	drawThemeIcon(canvas, key, width, height)
    }
    return {
    	draw: draw,
    	callback: callback
    };
}

function centerItem(itemId) {
    if (itemId) {
        var editor = globals.editor
        var item = editor.getItem(itemId)
        if (item) {
            var width = globals.box.width
            if (globals.showToolbar) {
                width -= tbWidth
            }
            var zoom = globals.view.getZoom();
            var dx = width / 2 / zoom
            var dy = globals.box.height / 2 / zoom
            globals.view.pan(
            	-item.x + dx,
            	-item.y + dy
            )
            editor.selectOneItem(itemId)
        }
    }
}

function changeBackground(x, y) {
    diaClear()
    diaAddHeader("MES_BACKGROUND")
    var fill = diaAddSection("MES_FILL")
    var fillDiv = make(fill, "div")
    var getColor = function() {
    	var color = globals.background ||
    		 Theme.get("back")
    	return color
    }
    var backColor = addColor(
    	fillDiv,
    	getColor,
    	"MES_BACKGROUND_COLOR",
    	setBackgroundColor
    )
    globals.dialogs.backColorButt = backColor
    backColor.style.cursor = "pointer"
    if ((isDrakon()) || (isMind())) {
        var line = diaAddSection("MES_LINE")
        var lineDiv = make(line, "div")
        var getLineColor = function() {
        	var color = globals.diaLine ||
        		 Theme.getLine()
        	return color
        }
        var lineColor = addColor(
        	lineDiv,
        	getLineColor,
        	"MES_LINE_COLOR",
        	setDiaLineColor
        )
        globals.dialogs.diaLineColorButt = lineColor
        lineColor.style.cursor = "pointer"
        lineColor.style.verticalAlign = "bottom"
        var thickButt = createImageButton(
        	lineDiv,
        	"thickness.png",
        	40,
        	30,
        	function(data) {
        	  showThicknessItems(
                    data, 1, 
                    globals.diaLineThickness || 1,
                    setDLT)
        	},
        	false
        )
    }
    var defaults = diaAddSection(null)
    diaAddButton(
    	defaults,
    	"MES_CLEAR_BACKGROUND",
    	clearBackground
    )
    diaAddButton(
    	defaults,
    	"MES_SET_DEFAULT_BACK",
    	setDefaultBackground
    )
    diaAddButton(
    	defaults,
    	"MES_CLEAR_DEFAULT_BACK",
    	clearDefaultBackground
    )
    showDialog(x, y)
}

function changeFormat(x, y, ids) {
    var dialogs = globals.dialogs
    diaClear()
    diaAddHeader("MES_FORMAT")
    var format = globals.editor.getFormat(ids)
    var fonts = globals.editor.getFontsForItems(ids)
    parseFormat(format, fonts)
    dialogs.ids = ids
    var thickStart
    if (format.hasLine) {
        thickStart = 1
    } else {
        thickStart = 0
    }
    if (format.lineOnly) {
        
    } else {
        var fill = diaAddSection("MES_FILL")
        var fillDiv = make(fill, "div")
        var getFillColor = function() {
        	return dialogs.fillColor0 ||	
        	  Theme.getIconBack("action")
        }
        var fillColorButt = addColor(
        	fillDiv,
        	getFillColor,
        	"MES_FILL_COLOR",
        	setFillColor
        )
        fillColorButt.style.verticalAlign = "bottom"
        fillColorButt.style.margin = "0px"
        fillColorButt.style.marginRight = "5px"
        dialogs.fillColorButt = fillColorButt
        fillDiv.style.padding = "5px"
        makeCheck(
        	fillDiv,
        	"MES_GRADIENT",
        	(dialogs.fillType == "gradient"),
        	onGradChanged
        )
        var shad = makeCheck(
        	fillDiv,
        	"MES_SHADOW",
        	!!dialogs.shadow,
        	onShadowChanged
        )
        shad.style.marginLeft = "10px"
        if (dialogs.allowSecondary) {
            var secondary = diaAddSection("MES_SECONDARY")
            var secondaryDiv = make(secondary, "div")
            secondaryDiv.style.padding = "5px"
            var getSecondaryColor = function() {
            	return dialogs.secondaryColor ||	
            	  Theme.getCommentBack()
            }
            var secondaryColorButt = addColor(
            	secondaryDiv,
            	getSecondaryColor,
            	"MES_SECONDARY",
            	setSecondaryColor
            )
            secondaryColorButt.style.verticalAlign = "bottom"
            secondaryColorButt.style.margin = "0px"
            secondaryColorButt.style.marginRight = "5px"
            dialogs.secondaryColorButt = secondaryColorButt
        }
    }
    var text = diaAddSection("MES_TEXT")
    var textDiv = make(text, "div")
    var getTextColor = function() {
    	return dialogs.textColor ||
    	  Theme.getIconFont("action")
    }
    var textColorButt = addColor(
    	textDiv,
    	getTextColor,
    	"MES_TEXT_COLOR",
    	setTextColor
    )
    dialogs.textColorButt = textColorButt
    textColorButt.style.verticalAlign = "bottom"
    dialogs.boldButt = createFontButton(
    	textDiv,
    	"bold.png",
    	onBoldClicked
    )
    dialogs.italicButt = createFontButton(
    	textDiv,
    	"italics.png",
    	onItalicClicked
    )
    dialogs.alignLeftButt = createFontButton(
    	textDiv,
    	"align-left.png",
    	function() { onAlign("left") }
    )
    dialogs.alignCenterButt = createFontButton(
    	textDiv,
    	"align-center.png",
    	function() { onAlign("center") }
    )
    dialogs.alignRightButt = createFontButton(
    	textDiv,
    	"align-right.png",
    	function() { onAlign("right") }
    )
    dialogs.alignLeftButt.div.style.marginLeft
     = "5px"
    flatRight(dialogs.alignLeftButt.div)
    var midStyle = dialogs.alignCenterButt.div.style
    midStyle.borderRadius = "0px"
    midStyle.borderLeft = ""
    midStyle.borderRight = ""
    
    flatLeft(dialogs.alignRightButt.div)
    flatLeft(dialogs.italicButt.div)
    flatRight(dialogs.boldButt.div)
    dialogs.boldButt.div.style.borderRight = ""
    switchButton(dialogs.boldButt, dialogs.bold)
    switchButton(dialogs.italicButt, dialogs.italic)
    if (dialogs.align) {
        showAlign(dialogs.align)
    }
    var text2 = make(text, "div")
    text2.style.paddingRight = "5px"
    var families = makeFamilies(dialogs.family)
    createCombo(
    	text2,
    	"MES_FONT_FAMILY",
    	150,
    	families,
    	onFamilyChanged
    )
    createCombo(
    	text2,
    	"MES_FONT_SIZE",
    	50,
    	makeSizes(dialogs.size),
    	onSizeChanged
    )
    var text3 = make(text, "div")
    createDialogButton(
    	text3,
    	"MES_SET_DEFAULT_FONT",
    	setDefaultFont
    )
    var line = diaAddSection("MES_LINE")
    var lineDiv = make(line, "div")
    var getLineColor = function() {
    	return dialogs.lineColor ||
    	  Theme.getIconFont("action")
    }
    var lineColorButt = addColor(
    	lineDiv,
    	getLineColor,
    	"MES_LINE_COLOR",
    	setLineColor
    )
    lineColorButt.style.verticalAlign = "bottom"
    dialogs.lineColorButt = lineColorButt
    var thickButt = createImageButton(
    	lineDiv,
    	"thickness.png",
    	40,
    	30,
    	function(data) {
    	  showThicknessItems(
                data, thickStart, 
                dialogs.lineThickness,
    	    setThickness)
    	},
    	false
    )
    var styleButt = createImageButton(
    	lineDiv,
    	"style.png",
    	40,
    	30,
    	showStyleItems,
    	false
    )
    styleButt.div.style.marginLeft = "5px"
    if (format.lineOnly) {
        var arrowStart = createImageButton(
        	lineDiv, "arrow-left.png", 40, 30,
        	showArrowStartItems,
        	false
        )
        arrowStart.div.style.marginLeft = "5px"
        var arrowEnd = createImageButton(
        	lineDiv, "arrow-right.png", 40, 30,
        	showArrowEndItems,
        	false
        )
        arrowEnd.div.style.marginLeft = "5px"
    } else {
        var buttonsDiv = diaAddSection("")
        buttonsDiv.style.paddingTop = "10px"
        createDialogButton(
        	buttonsDiv,
        	"MES_CLEAR_FORMAT",
        	clearFormat
        )
        createDialogButton(
        	buttonsDiv,
        	"MES_SET_DEFAULT_STYLE",
        	setDefaultStyle
        )
        createDialogButton(
        	buttonsDiv,
        	"MES_CLEAR_DEFAULT_STYLE",
        	clearDefaultStyle
        )
    }
    if (ids.length == 1) {
        var rect = globals.editor.getItemRect(
        	ids[0]
        )
        var pos = diagramToClient(
        	rect.right,
        	rect.top
        )
        x = pos.x + 30
        y = pos.y
    }
    showDialog(x, y)
}

function changeSearch() {
    debounce(doChangeSearch, 400)
}

function changeYesNo() {
    window.location.href = "/account?page=language&ref=diagram"
}

function checkSource() {
    if (globals.readonly) {
        return globals.translate("ERR_READONLY")
    } else {
        return null
    }
}

function chooseFontComponent(component, italic, bold, size, family) {
    var value
    if (component === "italic") {
        value = italic
    } else {
        if (component === "bold") {
            value = bold
        } else {
            if (component === "size") {
                value = size
            } else {
                if (component === "family") {
                    
                } else {
                    throw "Unexpected switch value: " + component;
                }
                value = family
            }
        }
    }
    return value
}

function clearBackground() {
    addTrace("ec:clearBackground")
    globals.userBackground = ""
    globals.userDiaLine = ""
    globals.userDiaLineThickness = ""
    var fields = {
    	diaLineThickness: "",
    	diaLine: "",
    	background: ""
    }
    globals.editor.setBackground(fields)
    globals.view.redraw()
}

function clearDefaultBackground() {
    setDefaultBgCore("", "", "")
}

function clearDefaultStyle() {
    var settings = {
    	shape: ""
    }
    globals.saveUserSettings(settings)
    globals.userShape = ""
    hideDialog()
}

function clearFormat() {
    addTrace("ec:clearFormat")
    var family = Config.FONT_FAMILY
    var file = getFontFile(false, false, family)
    globals.loadFont(
    	false,
    	false,
    	family,
    	file,
    	finishClearFormat
    )
}

function clearLink() {
    setLink("")
}

function colorFromRgb(red, green, blue) {
    return "#"
     + red.toString(16)
     + green.toString(16)
     + blue.toString(16)
}

function commandDone() {
    
}

function copy() {
    addTrace("ec:copy")
    globals.editor.copy()
    globals.view.redraw()
}

function copyToClipboard(type, data) {
    globals.clipboard.copyToClipboard(type, data)
}

function createButton(parent, onClick, isToggle) {
    var idle = "#fcfcfc"
    var active = "#a0a0a0"
    var div = make(parent, "div")
    div.style.background = idle
    div.style.display = "inline-block"
    div.style.verticalAlign = "bottom"
    div.style.cursor = "pointer"
    div.style.border = "solid 1px #a0a0a0"
    div.style.borderRadius = "5px"
    div.style.marginBottom = "5px"
    var data = {
    	isToggle: isToggle,
    	on: false,
    	down: false,
    	div: div,
    	idle: idle,
    	active: active,
    	onClick: onClick
    }
    var down = function() {
    	onButtonDown(data)
    }
    var move = function() {
    	onButtonMove(data)
    }
    var up = function() {
    	onButtonUp(data)
    }
    var leave = function() {
    	onButtonLeave(data)
    }
    HtmlUtils.registerDown(div, down)
    HtmlUtils.registerMove(div, move)
    HtmlUtils.registerUp(div, up)
    div.onmouseleave = leave
    div.ontouchcancel = leave
    div.oncontextmenu = function() { return false }
    return data
}

function createCheckHack(div, id, text, tooltip) {
    var checkbox = make(div, "input")
    checkbox.type = "checkbox"
    checkbox.id = id
    checkbox.className = "toggle_button"
    var label = make(div, "label")
    HtmlUtils.setDivText(label, text)
    label.className = "toggle_label"
    label.style.fontSize = "12px"
    label.htmlFor = id
    if (tooltip) {
        globals.tooltip.make(
        	label,
        	tooltip
        )
    }
    return checkbox
}

function createCombo(parent, title, labelWidth, items, onClick) {
    var data = createButton(
    	parent,
    	showComboDropDown,
    	false
    )
    data.title = title
    data.items = items
    data.onSelected = onClick
    var div = data.div
    var label = make(div, "div")
    label.style.display = "inline-block"
    label.style.overflowX = "hidden"
    label.style.width = labelWidth + "px"
    label.style.whiteSpace = "nowrap"
    data.label = label
    div.style.marginLeft = "5px"
    div.style.paddingRight = "5px"
    label.style.paddingLeft = "5px"
    label.style.paddingBottom = "5px"
    setComboText(data)
    var img = make(div, "img")
    img.width = 13
    img.height = 30
    img.src = globals.imageBase + "tri-down.png"
    img.verticalAlign = "middle"
    return data
}

function createDialogButton(parent, textId, onClick) {
    var div = make(parent, "div")
    div.className = "panic_button"
    div.style.margin = "5px"
    div.style.marginTop = "0px"
    HtmlUtils.setDivText(
    	div,
    	globals.translate(textId)
    )
    div.style.fontSize = "80%"
    div.onclick = onClick
    return div
}

function createFontButton(parent, image, onClick) {
    return createImageButton(
    	parent,
    	image,
    	30,
    	30,
    	onClick,
    	true
    )
}

function createIconGroup(name, type) {
    var group = {
    	name: name,
    	type: type,
    	rows: []
    }
    globals.groups.push(group)
}

function createImageButton(parent, image, width, height, onClick, isToggle) {
    var data = createButton(
    	parent,
    	onClick,
    	isToggle
    )
    var div = data.div
    var img = make(div, "img")
    img.width = width
    img.height = height
    img.src = globals.imageBase + image
    img.verticalAlign = "middle"
    div.style.width = width + "px"
    div.style.height = height + "px"
    return data
}

function createLeftButton(command, direction, background, image) {
    var index = globals.leftButts.length
    var button = {
    	command: command,
    	side: "left",
    	direction: direction,
    	background: background,
    	image: image || null
    }
    var div = createSideButton(button)
    var item = {
    	div : div,
    	visible: true,
    	button: button
    }
    globals.leftButts.push(item)
    return index
}

function createPopup() {
    var popup = HtmlUtils.createPopup(null)
    globals.dialogs.popup = popup
    return popup
}

function createRightButton(command, direction, background) {
    var index = globals.rightButts.length
    var button = {
    	command: command,
    	side: "right",
    	direction: direction,
    	background: background
    }
    var div = createSideButton(button)
    var item = {
    	div : div,
    	visible: true,
    	button: button
    }
    globals.rightButts.push(item)
    return index
}

function createSearchWindow() {
    var HeaderHeight = 30
    var root = make(document.body, "div")
    root.className = "popup"
    root.style.maxWidth = "100%"
    root.style.maxHeight = "100vh"
    root.style.display = "inline-block"
    root.style.position = "fixed"
    root.style.zIndex = 32
    root.style.top = "10px"
    root.style.right = "10px"
    root.style.width = "500px"
    var winTitle = InputBox.makeWindowTitle(
    	root,
    	translate("MES_FIND_REPLACE")
    )
    winTitle.cross.onclick = destroySearchWindow
    var client = make(root, "div")
    root.style.background = "white"
    client.style.boxModel = "border-box"
    client.style.maxHeight = "calc(100vh - 30px)"
    client.style.overflowY = "auto"
    client.style.background = LightBack
    if (HtmlUtils.isMobile()) {
        
    } else {
        HtmlUtils.setUpMovable(root, HeaderHeight)
    }
    return {
    	client: client,
    	root: root
    }
}

function createSideButton(button) {
    var _sw30540000_ = 0;
    var border = "solid 1px #b0b0b0"
    var img = make(globals.root, "img")
    img.width = SideSize
    img.height = SideSize
    img.src = getImageForDirection(
    	button,
    	button.direction
    )
    var style = img.style
    var radius = "7px"
    style.background = button.background
    style.borderBottom = border
    style.borderTop = border
    style.cursor = "pointer"
    img.onclick = button.command
    _sw30540000_ = button.side;
    if (_sw30540000_ === "left") {
        style.borderBottomRightRadius = radius
        style.borderTopRightRadius = radius
        style.borderRight = border
    } else {
        if (_sw30540000_ === "right") {
            
        } else {
            throw "Unexpected switch value: " + _sw30540000_;
        }
        style.borderBottomLeftRadius = radius
        style.borderTopLeftRadius = radius
        style.borderLeft = border
    }
    return img
}

function cut() {
    addTrace("ec:cut")
    globals.editor.cut()
    globals.view.redraw()
}

function debSchedule(self, action, timeout) {
    if (self.timer) {
        clearTimeout(self.timer)
        self.timer = undefined
    }
    var callback = function() {
    	try {
    		self.timer = undefined
    		action()
    	} catch (e) {
    		panicOnError(e)
    	}
    }
    self.timer = setTimeout(
    	callback,
    	timeout
    )
}

function debounce(action, timeout) {
    if (globals.deb) {
        
    } else {
        globals.deb = {}
    }
    debSchedule(
    	globals.deb,
    	action,
    	timeout
    )
}

function deleteSelection() {
    addTrace("ec:deleteSelection")
    globals.editor.deleteSelection()
    globals.view.redraw()
}

function destroySearchWindow() {
    if (globals.search) {
        document.body.removeChild(
        	globals.search.root
        )
        globals.search = undefined
    }
}

function diaAddButton(parent, textId, action) {
    var container = make(parent, "div")
    var text = globals.translate(textId)
    var callback = function() {
    	action()
    	hideDialog()
    }
    var div = make(container, "div")
    HtmlUtils.setDivText(div, text)
    div.className = "panic_button"
    div.onclick = callback
    return div
}

function diaAddHeader(textId) {
    var text = globals.translate(textId)
    var dialog = globals.dialogs.dialog
    var hp = make(dialog, "div")
    hp.style.background = SecondBackground
    var header = make(hp, "table")
    header.style.width = "280px"
    header.style.color = "white"
    var tr = make(header, "tr")
    var td0 = make(tr, "td")
    td0.width = "250"
    td0.style.paddingLeft = "5px"
    td0.style.cursor = "default"
    var td1 = make(tr, "td")
    
    td1.width = "30"
    td1.onclick = hideDialog
    td1.ontouchstart = hideDialog
    var cross = make(td1, "img")
    cross.className = "common_button"
    cross.src = globals.imageBase + "cross.png"
    cross.width = "30"
    cross.height = "30"
    cross.verticalAlign = "middle"
    cross.style.cursor = "pointer"
    HtmlUtils.setDivText(td0, text)
}

function diaAddSection(titleId) {
    var section = make(globals.dialogs.dialog, "div")
    section.style.background = "white"
    section.style.borderTop = "solid 1px #455A64"
    addTitle(section, titleId)
    return section
}

function diaClear() {
    var dialogs = globals.dialogs
    dialogs.dialog = HtmlUtils.createPopup(
    	globals.beh.externalClick
    )
    setDialogStyle(dialogs.dialog)
}

function diagramHasFocus() {
    if (dialogs.dialog.style.display == "none") {
        return true
    } else {
        return false
    }
}

function diagramToClient(x, y) {
    var pos = HtmlUtils.rect(globals.canvas)
    var result = globals.view.diagramToClient(x, y)
    result.x = Math.round(result.x + pos.left)
    result.y = Math.round(result.y + pos.top)
    return result
}

function disableButton(button) {
    button.style.background = "#909090"
    button.disabled = true
}

function doChangeSearch() {
    if (globals.search) {
        var input = getSearchInput()
        var options = globals.editor.changeSearch(input)
        onSearchChange(options)
    }
}

function drawThemeIcon(canvas, key, width, height) {
    var theme = Theme.getTheme(key)
    canvas.style.background = Theme.getProp(theme, "back")
    canvas.width = width
    canvas.height = height
    var ctx = canvas.getContext("2d")
    ctx.fillStyle = Theme.getIconProp(theme, "question", "iconback") 
    ctx.fillRect(4, 4, 32, 10);
    var stroke = Theme.getIconProp(theme, "question", "iconline")
    if (stroke == "none") {
        
    } else {
        ctx.strokeStyle = stroke
        ctx.strokeRect(4, 4, 32, 10)
    }
    ctx.fillStyle = Theme.getIconProp(theme, "action", "iconback") 
    ctx.fillRect(4, 18, 32, 20)
    stroke = Theme.getIconProp(theme, "action", "iconline")
    if (stroke == "none") {
        
    } else {
        ctx.strokeStyle = stroke
        ctx.strokeRect(4, 18, 32, 20)
    }
    var x = 8
    var w = 6
    var y = 24
    var h = 10
    ctx.fillStyle = Theme.getProp(theme, "keyword") 
    ctx.fillRect(x, y, w, h)
    x += w
    ctx.fillStyle = Theme.getProp(theme, "identifier") 
    ctx.fillRect(x, y, w, h)
    x += w
    ctx.fillStyle = Theme.getProp(theme, "string") 
    ctx.fillRect(x, y, w, h)
    x += w
    ctx.fillStyle = Theme.getProp(theme, "operator") 
    ctx.fillRect(x, y, w, h)
    x += w
}

function editLink(itemId, content, x, y) {
    var dialogs = globals.dialogs
    diaClear()
    diaAddHeader("MES_EXTERNAL_LINK")
    var defaults = diaAddSection(null)
    dialogs.itemId = itemId
    dialogs.content = content
    var width = 280
    var margin = 10
    var edit = make(defaults, "textarea")
    edit.id = "link_text"
    edit.style.boxSizing = "border-box"
    edit.style.resize = "none"
    edit.style.outline = "none"
    edit.style.width = width - margin * 2 + "px"
    edit.style.padding = "5px"
    
    edit.style.height = "70px"
    edit.style.margin = margin + "px"
    edit.style.border = "solid 1px #707070"
    edit.style.fontSize = "12pt"
    edit.style.fontFamily = Config.FONT_FAMILY
    edit.style.verticalAlign = "top"
    edit.autocorrect="off"
    edit.autocapitalize="off"
    edit.spellcheck="false"
    var message = make(defaults, "div")
    message.id = "link_message"
    message.style.color = "red"
    message.style.padding = "10px"
    if (content.link) {
        edit.value = content.link
    }
    diaAddButton(
    	defaults,
    	"MES_CLEAR",
    	clearLink
    )
    var save = diaAddButton(
    	defaults,
    	"MES_SAVE",
    	saveLink
    )
    save.style.background = "coral"
    y = putInUpperPart(y, 287)
    showDialog(x - 100, y)
    edit.select()
    edit.focus()
}

function enableButton(button) {
    button.style.background = ""
    button.disabled = false
}

function endPan() {
    if (globals.freeScroll) {
        
    } else {
        globals.beh.endFreeScroll()
    }
}

function exportPng(canvasElement, zoom) {
    var editor = globals.editor
    var view = globals.view
    var box = editor.measureDiagram();
    var w = Math.floor((box.right - box.left) * zoom)
    var h = Math.floor((box.bottom - box.top) * zoom)
    	
    canvasElement.style.left = "0px";
    canvasElement.style.top = "0px";
    canvasElement.style.display = "inline-block";	
    canvasElement.style.width = w + "px";
    canvasElement.style.height = h + "px";
    canvasElement.width = w;
    canvasElement.height = h;
    
    var ctx = canvasElement.getContext("2d");
    
    var x = 0;
    var y = 0;
    
    ctx.fillStyle = getBackground()
    ctx.fillRect(x, y, w, h);
    
    ctx.scale(zoom, zoom);
    ctx.translate(-box.left, -box.top);
    var oldZoom = globals.cnv.zoom
    var dx = globals.cnv.dx
    var dy = globals.cnv.dy
    var retina = globals.cnv.retina
    globals.cnv.setTransform(-box.left, -box.top, zoom, 1)
    globals.editor.redraw()
    globals.cnv.draw(ctx)
    globals.cnv.setTransform(dx, dy, oldZoom, retina)
    globals.editor.redraw()
    globals.view.rebuild()
    var image = canvasElement.toDataURL("image/png");
    
    return image
}

function exportSvg() {
    var editor = globals.editor
    var view = globals.view
    var canvas = globals.cnv
    var zoom = 1
    
    var box = editor.measureDiagram();
    var w = Math.floor((box.right - box.left) * zoom)
    var h = Math.floor((box.bottom - box.top) * zoom)
    var ctx = new C2S(w, h)
    
    var x = 0;
    var y = 0;
    
    ctx.fillStyle = getBackground()
    ctx.fillRect(x, y, w, h);
    
    ctx.scale(zoom, zoom);
    ctx.translate(-box.left, -box.top);	
    
    canvas.renderToTexture = false
    editor.redraw()
    canvas.draw(ctx)
    canvas.renderToTexture = true
    editor.redraw()
    
    var image = ctx.getSerializedSvg(true)
    
    return image
}

function findFontsToLoad(component, value) {
    var faces = globals.dialogs.faces
    var faceSet = Utils.listToSet(faces)
    var faces2 = []
    var _ind3432 = 0;
    var _col3432 = faces;
    var _len3432 = _col3432.length;
    while (true) {
        if (_ind3432 < _len3432) {
            
        } else {
            break;
        }
        var face = _col3432[_ind3432];
        var pf = Utils.parseFontFace(face)
        pf[component] = value
        var face2 = Utils.buildFontFace(
        	pf.italic,
        	pf.bold,
        	pf.family
        )
        if (face2 in faceSet) {
            
        } else {
            faces2.push(face2)
        }
        _ind3432++;
    }
    return faces2
}

function findIconGroup(name) {
    var _ind128 = 0;
    var _col128 = globals.groups;
    var _len128 = _col128.length;
    while (true) {
        if (_ind128 < _len128) {
            
        } else {
            throw Error("Group '" + name +
             "' not found")
        }
        var group = _col128[_ind128];
        if (group.name == name) {
            return group
        }
        _ind128++;
    }
}

function findSameValues(fonts, result) {
    var italic = new SameValue("italic")
    var bold = new SameValue("bold")
    var size = new SameValue("size")
    var family = new SameValue("family")
    var _ind3524 = 0;
    var _col3524 = fonts;
    var _len3524 = _col3524.length;
    while (true) {
        if (_ind3524 < _len3524) {
            
        } else {
            break;
        }
        var font = _col3524[_ind3524];
        var parsed = Utils.parseFontString(font)
        setSameValue(italic, parsed)
        setSameValue(bold, parsed)
        setSameValue(size, parsed)
        setSameValue(family, parsed)
        _ind3524++;
    }
    getSameValue(italic, result)
    getSameValue(bold, result)
    getSameValue(size, result)
    getSameValue(family, result)
}

function findTrueRoot(div) {
    while (true) {
        if (div.parentElement == document.body) {
            break;
        }
        div = div.parentElement
    }
    return div
}

function finishClearFormat() {
    var dialogs = globals.dialogs
    globals.editor.clearFormat(
    	dialogs.ids
    )
    globals.view.redraw()
    hideDialog()
}

function finishIconGroups() {
    var tb = globals.toolbar
    tb.innerHTML = ""
    var generic = findIconGroup("dia-main")
    addToolGroup(tb, generic)
    var others = make(tb, "div")
    others.id = "dia-icons"
    hide(others.id)
    var name = globals.toolName
    name = "basic"
    //addToolCombo(others, name)
    var icons = findIconGroup(name)
    addToolGroup(others, icons)
    var free = make(tb, "div")
    free.id = "dia-free"
    hide(free.id)
    var nameFree = globals.toolNameFree
    addToolComboFree(free, nameFree)
    var freeGroup = findIconGroup(nameFree)
    addToolGroup(free, freeGroup)
    var mind = make(tb, "div")
    mind.id = "dia-mind"
    hide(mind.id)
    var nameMind = globals.toolNameMind
    var mindGroup = findIconGroup(nameMind)
    addToolGroup(mind, mindGroup)
    var mindGroup2 = findIconGroup("dia-mind2")
    addToolGroup(mind, mindGroup2)
}

function finishSetFont(component, value) {
    var key = "font-" + component
    var format = {}
    format[key] = value
    setFormat(format)
}

function flatLeft(div) {
    div.style.borderRadius = "0px 5px 5px 0px"
}

function flatRight(div) {
    div.style.borderRadius = "5px 0px 0px 5px"
}

function followLink(url) {
    url = url || ""
    url = url.trim()
    if (url) {
        if (url.indexOf("://") == -1) {
            url = "http://" + url
        }
        window.open(url, '_blank')
    }
}

function fontsToFaces(fonts) {
    var faceList = fonts.map(Utils.fontToFace)
    var faceSet = Utils.listToSet(faceList)
    return Object.keys(faceSet)
}

function generateTag() {
    var r = Math.random();
    var number = Math.floor(r * 1000000000);
    return number.toString();
}

function get(id) {
    var element = document.getElementById(id)
    if (element) {
        return element
    } else {
        throw Error("Element '" + id + "' not found")
    }
}

function getBackground() {
    var background = globals.cnv.getBackground()
    background = background || Theme.get("back")
    return background
}

function getClipboard() {
    return globals.clipboard.getClipboard()
}

function getClipboardType() {
    return globals.clipboard.getClipboardType()
}

function getCurrentFillColor() {
    var dialogs = globals.dialogs
    var color = dialogs.fillColor0 || "#ffffff"
    if (dialogs.fillType == "gradient") {
        var color1 = makeLighter(color)
        return "gradient " + color1
         + " " + color
    } else {
        return color
    }
}

function getDefault(key) {
    if (key === "background") {
        return globals.userBackground
    } else {
        if (key === "diaLine") {
            return globals.userDiaLine
        } else {
            if (key === "diaLineThickness") {
                return globals.userDiaLineThickness
            } else {
                if (key === "font") {
                    return globals.userFont
                } else {
                    if (key === "shape") {
                        return globals.userShape
                    } else {
                        return null
                    }
                }
            }
        }
    }
}

function getDefaultFont() {
    return Utils.buildFontString(
    	false,
    	false,
    	Config.FONT_SIZE,
    	Config.FONT_FAMILY
    )
}

function getDiagram() {
    var content = globals.editor.diagramToJson()
    var obj = JSON.parse(content)
    return obj
}

function getEmptyFont(fontInfo) {
    var font = globals.editor.getFont()
    if (font) {
        var parsed = Utils.parseFontString(
        	font
        )
        fontInfo.size = parsed.size
        fontInfo.family = parsed.family
        fontInfo.italic = parsed.italic
        fontInfo.bold = parsed.bold
    } else {
        fontInfo.size = Config.FONT_SIZE_1
        fontInfo.family = Config.FONT_FAMILY_1
        fontInfo.italic = false
        fontInfo.bold = false
    }
}

function getFontFile(italic, bold, family) {
    var key = makeFontKey(
    	italic,
    	bold,
    	family
    )
    return fontFiles[key]
}

function getFonts(diagram) {
    var diagram2 = normalizeDiagram(
    	diagram
    )
    diagram = diagram2 || diagram
    var fontList = globals.editor.getFonts(diagram)
    var userFont = globals.userFont
    if (userFont) {
        fontList.push(userFont)
        var bold = makeBoldFont(userFont)
        fontList.push(bold)
    }
    var fonts = {}
    var _ind2235 = 0;
    var _col2235 = fontList;
    var _len2235 = _col2235.length;
    while (true) {
        if (_ind2235 < _len2235) {
            
        } else {
            break;
        }
        var font = _col2235[_ind2235];
        var parsed = Utils.parseFontString(font)
        var key = parsed.italic.toString()
          + "-" + parsed.bold.toString()
          + "-" + parsed.family
        parsed.file = getFontFile(
        	parsed.italic,
        	parsed.bold,
        	parsed.family
        )
        fonts[key] = parsed
        _ind2235++;
    }
    return Utils.objectValues(fonts)
}

function getFontsFromEditor() {
    var diagram = globals.editor.getDiagramAsItems()
    return getFonts(diagram)
}

function getImageForDirection(button, direction) {
    var file
    if (direction === "left") {
        file = "hide-left.png"
    } else {
        if (direction === "right") {
            
        } else {
            throw "Unexpected switch value: " + direction;
        }
        if (button.image) {
            file = button.image
        } else {
            file = "show-right.png"
        }
    }
    return imgSrc(file)
}

function getName() {
    return globals.editor.storage.name
}

function getRecentColors() {
    return globals.userColors.slice(0)
}

function getSameValue(self, dst) {
    if ((self.value == null) || (self.different)) {
        dst[self.name] = null
    } else {
        dst[self.name] = self.value
    }
}

function getSearchInput() {
    return {
    	find: get("find_find").value,
    	replace: get("find_replace").value,
    	sensitive: get("find_case").checked,
    	whole: get("find_whole").checked
    }
}

function getTag() {
    return globals.tag
}

function getThemeKey(theme) {
    if (theme) {
        var keys = [
        	"default",
        	"parrot",
        	"strict",
        	"cloud",
        	"white1",
        	"white2",
        	"dark1",
        	"night",
        	"red",
        	"black",
        	"dark3",
        	"night2"
        ]
        var _ind4200 = 0;
        var _col4200 = keys;
        var _len4200 = _col4200.length;
        while (true) {
            if (_ind4200 < _len4200) {
                
            } else {
                return "parrot"
            }
            var key = _col4200[_ind4200];
            if (themeMatchesKey(theme, key)) {
                return key
            }
            _ind4200++;
        }
    } else {
        return "parrot"
    }
}

function handleSearchShortcuts(evt) {
    if (isCodeKey(evt, "F3")) {
        HtmlUtils.preventDefaultHandling(evt)
        if (evt.shiftKey) {
            searchPrev()
        } else {
            searchNext()
        }
    } else {
        if (isCodeKey(evt, "Escape")) {
            destroySearchWindow()
        }
    }
}

function hasChanges() {
    if ((((globals.added.length == 0) && (globals.updated.length == 0)) && (globals.removed.length == 0)) && (!(globals.changes))) {
        return false
    } else {
        return true
    }
}

function hide(id) {
    show(id, "none")
}

function hideDialog() {
    HtmlUtils.hidePopup()
    var dialogs = globals.dialogs
    dialogs.dialog = null
    HtmlUtils.hidePopup()
}

function hideDiv(div) {
    div.style.display = "none"
}

function hideLeftButton(index) {
    globals.leftButts[index].visible = false
}

function hidePopup() {
    var dialogs = globals.dialogs
    dialogs.popup = null
    HtmlUtils.hidePopup()
}

function hideRightButton(index) {
    globals.rightButts[index].visible = false
}

function hideSearch() {
    destroySearchWindow()
}

function home() {
    var box = globals.editor.measureDiagram();
    var zoom = globals.view.getZoom();
    var dx = Math.floor((5 + SideSize) / zoom);
    var dy = Math.floor(5 / zoom);
    var view = globals.view.getVisibleBox()
    var viewWidth = view.right - view.left
    var width = box.right - box.left
    var left = -box.left + dx
    var top = -box.top + dy
    globals.view.pan(left, top)
}

function imgSrc(image) {
    return globals.imageBase + image
}

function increaseTag(pers, change) {
    var newTag = generateTag()
    change.tag = newTag
    change.oldTag = pers.tag
    pers.tag = newTag
}

function init(cfg) {
    globals.primed = false
    globals.tooltip = cfg.tooltip
    globals.inputBox = cfg.inputBox
    globals.context = cfg.context
    globals.storage = cfg.storage
    globals.translate = cfg.translate
    globals.imageBase = cfg.imageBase
    globals.panic = cfg.panic
    globals.warning = cfg.warning
    globals.status = cfg.status
    globals.saveUserSettings = cfg.saveUserSettings
    globals.clipboard = cfg.clipboard
    globals.loadFont = cfg.loadFont
    globals.findReferences = cfg.findReferences
    globals.hideCentral = cfg.hideCentral
    globals.showChangeDiaProps = cfg.showChangeDiaProps
    globals.root.innerHTML = ""
    globals.root.oncontextmenu = function() { return false }
    var tb = make(globals.root, "div")
    globals.toolbar = tb
    var cnv = make(globals.root, "canvas")
    cnv.oncontextmenu = function() { return false }
    globals.canvas = cnv
    var over = make(globals.root, "canvas")
    over.oncontextmenu = function() { return false }
    globals.over = over
    //over.style.opacity = "0.5"
    //over.style.backgroundColor = "yellow"
    cnv.style.position = "absolute"
    cnv.style.background = "cyan"
    over.style.position = "absolute"
    over.style.display  = "none"
    over.style.pointerEvents = "none"
    var back = make(globals.root, "div")
    globals.back = back
    HtmlUtils.setDivText(
    	back,
    	globals.translate("BUT_EXIT_4WAY_SCROLL")
    )
    back.className = "dlg_button common_button"
    back.style.position = "absolute"
    back.style.left = "5px"
    back.style.top = "5px"
    back.style.display = "none"
    back.onclick = stopFreeScroll
    var ro = make(globals.root, "div")
    globals.ro = ro
    HtmlUtils.setDivText(
    	ro,
    	globals.translate("MES_READONLY_DOC")
    )
    ro.className = "dlg_button"
    ro.style.position = "absolute"
    ro.style.right = "5px"
    ro.style.top = "5px"
    ro.style.background = "black"
    ro.style.display = "none"
    ro.onclick = onReadonlyClicked
    tb.className = "toolbar"
    createLeftButton(
    	onToggleShowToolbar,
    	"left",
    	"#F2F2F2",
    	"show-toobox.png"
    )
    setupEditor()
    setupDialog()
    createIconGroup("dia-main")
    createIconGroup("dia-free")
    createIconGroup("dia-mind")
    createIconGroup("dia-mind2")
    addToIconGroup(
    	"dia-main",
    	[
    		{
    			id: "tt_theme",
    			image: "theme.png",
    			tooltip: "BUT_COLOR_THEME",
    			command: showThemeMenu
    		},
    		{
    			id: "tt_home",
    			image: "home.png",
    			tooltip: "BUT_HOME",
    			command: home
    		}
    	]
    )
    addToIconGroup(
    	"dia-main",
    	[
    		{
    			id: "tt_zoom",
    			image: "zoom.png",
    			tooltip: "BUT_ZOOM",
    			command: showZoomMenu
    		},
    
    		{
    			id: "tt_selection",
    			image: "select-mode.png",
    			tooltip: "BUT_SELECTION_MODE",
    			command: toggleSelectionMode
    		}
    	]
    )
    var skipAdvanced = true
    createIconGroup("basic")
    createIconGroup("medic")
    createIconGroup("full")
    var params = {
    	id: "tt_parameters",
    	image: "params-1.png",
    	tooltip: "BUT_PARAMETERS",
    	command: function() { addParameters() }
    }
    var comment = {
    	id: "tt_comment",
    	image: "comment.png",
    	tooltip: "BUT_COMMENT",
    	command: function() { showSockets("comment") }
    }
    var question = {
    	id: "tt_question",
    	image: "question.png",
    	tooltip: "BUT_QUESTION",
    	shortcut: "Q",
    	command: function() { showSockets("question") }
    }
    var action = {
    	id: "tt_action",
    	image: "action.png",
    	tooltip: "BUT_ACTION",
    	shortcut: "A",
    	command: function() { showSockets("action") }
    }
    var branch = {
    	id: "tt_branch",
    	image: "branch.png",
    	tooltip: "BUT_BRANCH",
    	shortcut: "B",
    	command: function() { showSockets("branch") }
    }
    var silhouette = {
    	id: "tt_silhouette",
    	image: "silhouette.png",
    	tooltip: "BUT_SILHOUETTE",
    	command: toggleSilhouette
    }
    var tcase = {
    	id: "tt_case",
    	image: "case.png",
    	tooltip: "BUT_CASE",
    	shortcut: "C",
    	command: function() { showSockets("case") }
    }
    var select = {
    	id: "tt_select",
    	image: "select.png",
    	tooltip: "BUT_SELECT",
    	shortcut: "S",
    	command: function() { showSockets("select") }
    }
    var insertion = {
    	id: "tt_insertion",
    	image: "insertion.png",
    	tooltip: "BUT_INSERTION",
    	shortcut: "N",
    	command: function() { showSockets("insertion") }
    }
    var par = {
    	id: "tt_par",
    	image: "par.png",
    	tooltip: "BUT_PAR",
    	command: function() { showSockets("path") }
    }
    var parblock = {
    	id: "tt_parblock",
    	image: "parblock.png",
    	tooltip: "BUT_PARBLOCK",
    	command: function() { showSockets("parallel") }
    }
    var foreach = {
    	id: "tt_foreach",
    	image: "foreach.png",
    	tooltip: "BUT_FOREACH",
    	shortcut: "L",
    	command: function() { showSockets("foreach") }
    }
    var input = {
    	id: "tt_input",
    	image: "input.png",
    	tooltip: "BUT_INPUT",
    	command: function() { showSockets("input") }
    }
    var output = {
    	id: "tt_output",
    	image: "output.png",
    	tooltip: "BUT_OUTPUT",
    	command: function() { showSockets("output") }
    }
    var process = {
    	id: "tt_process",
    	image: "process.png",
    	tooltip: "BUT_PROCESS",
    	command: function() { showSockets("process") }
    }
    var shelf = {
    	id: "tt_shelf",
    	image: "shelf.png",
    	shortcut: "F",
    	tooltip: "BUT_SHELF",
    	command: function() { showSockets("shelf") }
    }
    var sinput = {
    	id: "tt_sinput",
    	image: "sinput.png",
    	tooltip: "BUT_SINPUT",
    	command: function() { showSockets("sinput") }
    }
    var soutput = {
    	id: "tt_soutput",
    	image: "soutput.png",
    	tooltip: "BUT_SOUTPUT",
    	command: function() { showSockets("soutput") }
    }
    var ctrlStart = {
    	id: "tt_ctrl_start",
    	image: "ctrl-start.png",
    	tooltip: "BUT_CTRL_START",
    	command: function() { showSockets("ctrlStart") }
    }
    var ctrlEnd = {
    	id: "tt_ctrl_end",
    	image: "ctrl-end.png",
    	tooltip: "BUT_CTRL_END",
    	command: function() { showSockets("ctrlEnd") }
    }
    var duration = {
    	id: "tt_duration",
    	image: "duration.png",
    	tooltip: "BUT_DURATION",
    	command: function() { showSockets("duration") }
    }
    var pause = {
    	id: "tt_pause",
    	image: "pause.png",
    	tooltip: "BUT_PAUSE",
    	command: function() { showSockets("pause") }
    }
    var timer = {
    	id: "tt_timer",
    	image: "timer.png",
    	tooltip: "BUT_TIMER",
    	command: function() { showSockets("timer") }
    }
    var gdurLeft = {
    	id: "tf_gdur_left",
    	image: "group-duration.png",
    	tooltip: "BUT_GROUP_DURATION_LEFT",
    	command: function(evt) { addFree(evt, "gdur-left") }
    }
    
    var gdurRight = {
    	id: "tf_gdur_right",
    	image: "group-duration-r.png",
    	tooltip: "BUT_GROUP_DURATION_RIGHT",
    	command: function(evt) { addFree(evt, "gdur-right") }
    }
    
    var callout = {
    	id: "callout",
    	image: "callout.png",
    	tooltip: "BUT_CALLOUT",
    	command: function(evt) { addFree(evt, "callout") }
    }
    if (skipAdvanced) {
        
    } else {
        addToIconGroup("full", [branch, silhouette])
        addToIconGroup("full", [question, action])
        addToIconGroup("full", [tcase, select])
        addToIconGroup("full", [params, foreach])
        addToIconGroup("full", [comment, callout])
        addToIconGroup("full", [par, parblock])
        addToIconGroup("full", [input, output])
        addToIconGroup("full", [sinput, soutput])
        addToIconGroup("full", [process, shelf])
        addToIconGroup("full", [ctrlStart, ctrlEnd])
        addToIconGroup("full", [pause, timer])
        addToIconGroup("full", [duration, insertion])
        addToIconGroup("full", [gdurLeft, gdurRight])
        addToIconGroup("medic", [branch, silhouette])
        addToIconGroup("medic", [question, action])
        addToIconGroup("medic", [tcase, select])
        addToIconGroup("medic", [comment, callout])
        addToIconGroup("medic", [par, parblock])
        addToIconGroup("medic", [ctrlStart, ctrlEnd])
        addToIconGroup("medic", [pause, duration])
        addToIconGroup("medic", [gdurLeft, gdurRight])
        addToIconGroup("medic", [shelf, insertion])
    }
    addToIconGroup("basic", [question, action])
    addToIconGroup("basic", [tcase, select])
    addToIconGroup("basic", [insertion, foreach])
    addToIconGroup("basic", [branch, silhouette])
    addToIconGroup("basic", [sinput, soutput])
    addToIconGroup("basic", [pause])
    createIconGroup("free-basic")
    createIconGroup("free-ui")
    createIconGroup("free-ar")
    addFreeButtons()
    addMindButtons()
    finishIconGroups()
}

function inputBox(title, oldText, onSave, x, y, validate, cmOptions) {
    var pos = diagramToClient(
    	x,
    	y
    )
    var wrapped = function(text) {
    	onSave(text)
    	globals.view.redraw()
    }
    if ((cmOptions) && (globals.theme)) {
        cmOptions.theme = globals.theme
    }
    globals.inputBox.show(
    	title,
    	oldText,
    	wrapped,
    	validate,
    	pos.x,
    	pos.y,
    	cmOptions
    )
}

function isCodeKey(evt, code) {
    if ((evt.code == code) || (evt.key == code)) {
        return true
    } else {
        return false
    }
}

function isDragOn() {
    if ((globals.editor.dragOn) || (globals.freeScroll)) {
        return true
    } else {
        return false
    }
}

function isDrakon() {
    return globals.type == "drakon"
}

function isGoodLink(link) {
    return true
}

function isMind() {
    return globals.type == "mind"
}

function layout() {
    var left = globals.box.left
    var top = globals.box.top
    var width = globals.box.width
    var height = globals.box.height
    if (globals.primed) {
        
    } else {
        globals.primed = true
        globals.showToolbar = (width > 500)
    }
    updateArrowDirection()
    setAbsRect(
    	globals.root,
    	left,
    	top,
    	width,
    	height
    )
    layoutSideButtons()
    if (globals.freeScroll) {
        globals.back.style.display = "inline-block"
        hideDiv(globals.toolbar)
        setAbsRect(
        	globals.canvas,
        	0,
        	0,
        	width,
        	height
        )
    } else {
        hideDiv(globals.back)
        if (globals.showToolbar) {
            setAbsRect(
            	globals.toolbar,
            	0,
            	0,
            	tbWidth,
            	height
            )
            setAbsRect(
            	globals.canvas,
            	tbWidth + 1,
            	0,
            	width - tbWidth - 1,
            	height
            )
            setRect(
            	globals.over,
            	tbWidth + 1,
            	0,
            	width - tbWidth - 1,
            	height
            )
        } else {
            hideDiv(globals.toolbar)
            setAbsRect(
            	globals.canvas,
            	0,
            	0,
            	width,
            	height
            )
            setRect(
            	globals.over,
            	0,
            	0,
            	width,
            	height
            )
        }
    }
    //updateToolbar()
}

function layoutSideButtons() {
    var left
    if (globals.freeScroll) {
        var _ind3085 = 0;
        var _col3085 = globals.rightButts;
        var _len3085 = _col3085.length;
        while (true) {
            if (_ind3085 < _len3085) {
                
            } else {
                break;
            }
            var item = _col3085[_ind3085];
            hideDiv(item.div)
            _ind3085++;
        }
        var _ind3088 = 0;
        var _col3088 = globals.leftButts;
        var _len3088 = _col3088.length;
        while (true) {
            if (_ind3088 < _len3088) {
                
            } else {
                break;
            }
            var item = _col3088[_ind3088];
            hideDiv(item.div)
            _ind3088++;
        }
    } else {
        if (globals.showToolbar) {
            left = tbWidth
        } else {
            left = 0
        }
        var width = globals.box.width
        var right = width - SideSize
        var top = 0
        var _ind3091 = 0;
        var _col3091 = globals.leftButts;
        var _len3091 = _col3091.length;
        while (true) {
            if (_ind3091 < _len3091) {
                
            } else {
                break;
            }
            var item = _col3091[_ind3091];
            if (item.visible) {
                setAbsRect(
                	item.div,
                	left,
                	top,
                	SideSize,
                	SideSize
                )
                top += SideSize
            } else {
                hideDiv(item.div)
            }
            _ind3091++;
        }
        top = 0
        var _ind3108 = 0;
        var _col3108 = globals.rightButts;
        var _len3108 = _col3108.length;
        while (true) {
            if (_ind3108 < _len3108) {
                
            } else {
                break;
            }
            var item = _col3108[_ind3108];
            if (item.visible) {
                setAbsRect(
                	item.div,
                	right,
                	top,
                	SideSize,
                	SideSize
                )
                top += SideSize
            } else {
                hideDiv(item.div)
            }
            _ind3108++;
        }
    }
}

function lighten(value) {
    var incr
    if (value < 0.4) {
        incr = 0.5
    } else {
        incr = 0.3
    }
    return Math.min(1, value + incr)
}

function loadDiagram(diagram) {
    if (globals.readonly) {
        
    } else {
        globals.readonly = true
        diagram = normalizeDiagram(
        	diagram
        )
        var editor = globals.editor
        var view = globals.view
        reset()
        editor.loadDiagram(diagram);
        editor.autoSizeIcons();
        editor.clearUndo();
        editor.redraw();
        view.rebuild();
        globals.readonly = false
        var diagram = editor.getDiagramAsItems()
        var change = {
        	editType: "replace",
        	name: diagram.name,
        	items: diagram.items,
        	background: diagram.background || "",
        	diaLine: diagram.diaLine || "",
        	diaLineThickness: diagram.diaLineThickness || "",
        	font: diagram.font || getDefaultFont()
        }
        increaseTag(globals, change)
        globals.storage.saveChanges(change)
    }
}

function loadNextFont(self) {
    var face = self.faces[self.current]
    var pf = Utils.parseFontFace(face)
    var file = getFontFile(
    	pf.italic,
    	pf.bold,
    	pf.family
    )
    var onLoaded = function() {
    	self.fontLoaded()
    }
    globals.loadFont(
    	pf.italic,
    	pf.bold,
    	pf.family,
    	file,
    	onLoaded
    )
}

function loadSave(doSave) {
    var onSave = function(){}
    if (doSave) {
        onSave = parseAndLoadDiagram
    }
    var content = globals.editor.diagramToJson()
    var title = globals.translate("MES_DIAGRAM_SOURCE")
    globals.inputBox.show(
    	title,
    	content,
    	onSave,
    	checkSource
    )
}

function make(parent, tag) {
    var element = document.createElement(tag)
    parent.appendChild(element)
    if (tag == "img") {
        element.draggable = false
    }
    return element
}

function makeAfter(previous, tag) {
    var element = document.createElement(tag)
    var next = previous.nextSibling
    var parent = previous.parentNode
    parent.insertBefore(element, next)
    return element
}

function makeBoldFont(fontStr) {
    var font = Utils.parseFontString(fontStr)
    return Utils.buildFontString(
    	font.italic,
    	true,
    	font.size,
    	font.family
    )
}

function makeButtonOnClick(cell) {
    return function() {
    	cell.command(cell)
    }
}

function makeCheck(parent, textId, checked, onChange) {
    var label = make(parent, "label")
    var check = make(label, "input")
    check.type = "checkbox"
    check.style.marginRight = "5px"
    check.onchange = onChange
    check.checked = checked
    var text = globals.translate(textId)
    var tn = document.createTextNode(text)
    label.appendChild(tn)
    return label
}

function makeChooseCurrent(onChange) {
    var result = function() {
    	setColorFromCurrent(onChange)
    }
    return result
}

function makeChoosePalette(onChange, color) {
    var result = function() {
    	hidePopup()
    	saveRecentColor(color)
    	onChange(color)
    }
    return result
}

function makeChooseSimple(onChange, color) {
    var result = function() {
    	hidePopup()
    	onChange(color)
    }
    return result
}

function makeColorOnActive(element) {
    var style = element.style
    element.onmousemove = function() {
    	style.background = "#E2EDF5"
    }
    element.onmouseleave = function() {
    	style.background = "#ffffff"
    }
}

function makeErrorMessage(data) {
    var message = Utils.makeErrorMessage(data)
    return globals.translate(message)
}

function makeFamilies(family) {
    var families = [
    {text: "Courier (Cousine)",	value: "Cousine"},
    {text: "Times (Tinos)",	value: "Tinos"},
    {text:"Alegreya Sans", value:"Alegreya Sans"},
    {text:"Anonymous Pro", value:"Anonymous Pro"},
    {text:"Cormorant Garamond", value:"Cormorant Garamond"},
    //{text:"Crimson Text", value:"Crimson Text"},
    {text:"Lato", value:"Lato"},
    {text:"Arial (Liberation Sans)", value:"Liberation Sans"},
    {text:"Lora", value:"Lora"},
    {text:"Merriweather", value:"Merriweather"},
    {text:"Noto Sans", value:"Noto Sans"},
    {text:"Open Sans", value:"Open Sans"},
    {text:"PT Sans", value:"PT Sans"},
    {text:"PT Serif", value:"PT Serif"},
    {text:"Raleway", value:"Raleway"},
    {text:"Roboto", value:"Roboto"},
    {text:"Roboto Condensed", value:"Roboto Condensed"},
    {text:"Roboto Mono", value:"Roboto Mono"},
    {text:"Source Code Pro", value:"Source Code Pro"},
    {text:"Source Sans Pro", value:"Source Sans Pro"},
    {text:"Space Mono", value:"Space Mono"},
    //{text:"Titillium Web", value:"Titillium Web"},
    {text:"Ubuntu", value:"Ubuntu"},
    {text:"Ubuntu Mono", value:"Ubuntu Mono"}
    //{text:"Vollkorn", value:"Vollkorn"}
    ]
    var _ind2133 = 0;
    var _col2133 = families;
    var _len2133 = _col2133.length;
    while (true) {
        if (_ind2133 < _len2133) {
            
        } else {
            break;
        }
        var item = _col2133[_ind2133];
        item.selected = (family == item.value)
        _ind2133++;
    }
    families.sort(function(left, right) {
        return left.text.localeCompare(right.text)
    })
    return families
}

function makeFontKey(italic, bold, family) {
    var key = family
      + "-" + italic.toString()
      + "-" + bold.toString()
    return key
}

function makeItemClick(onItemClick, data) {
    var result = function() {
    	hidePopup()
    	onItemClick(data)
    }
    return result
}

function makeLighter(color) {
    var redStr = color.slice(1, 3)
    var greenStr = color.slice(3, 5)
    var blueStr = color.slice(5, 7)
    var red = parseHexByte(redStr) / 255.0
    var green = parseHexByte(greenStr) / 255.0
    var blue = parseHexByte(blueStr) / 255.0
    var incr = 0.4
    red = Math.floor(lighten(red)* 255)
    green = Math.floor(lighten(green) * 255)
    blue = Math.floor(lighten(blue) * 255)
    return colorFromRgb(red, green, blue)
}

function makePalette() {
    var src = [
    "#000000 #ffffff #ffc0cb #ff0000 #008080 #00ffff",
    "#0000ff #eeeeee #ffd700 #ff7373 #40e0d0 #b0e0e6",
    "#FFA849 #005800 #003500 #002300 #000070 #00005C",
    "#00003A #000020 #3BAD4D #215B2A #9EC85C #0094FF",
    "#12279F #521A00 #361C0F #5B5232 #353123 #A69D7C",
    "#ffe4e1 #c0c0c0 #cccccc #d3ffce #7fffd4 #333333",
    "#666666 #f6546a #ffa500 #00ff00 #f0f8ff #003366",
    "#468499 #ffff00 #800080 #f5f5f5 #00ced1 #088da5",
    "#fff68f #fa8072 #e6e6fa #660066 #ffc3a0 #ff6666",
    "#20b2aa #faebd7 #c6e2ff #66cdaa #ffb6c1 #800000",
    "#990000 #f5f5dc #afeeee #81d8d0 #cbbeb5 #f08080",
    "#ccff00 #ff00ff #008000 #808080 #999999 #c39797",
    "#c0d6e4 #00ff7f #0e2f44 #3b5998 #b6fcd5 #66cccc",
    "#ffdab9 #ff4040 #dddddd #8b0000 #b4eeb4 #f7f7f7",
    "#daa520 #31698a #6897bb #191970 #cc0000 #a0db8e",
    "#0099cc #FFE26C #3399ff #ff4444 #8a2be2 #000080",
    "#404040 #191919 #4169e1 #ff7f50 #794044 #6dc066"
    ]
    var result = []
    var _ind1206 = 0;
    var _col1206 = src;
    var _len1206 = _col1206.length;
    while (true) {
        if (_ind1206 < _len1206) {
            
        } else {
            break;
        }
        var srcRow = _col1206[_ind1206];
        var colors = srcRow.split(" ")
        result.push(colors)
        _ind1206++;
    }
    return result
}

function makeRowUi(tr, row) {
    var _ind148 = 0;
    var _col148 = row;
    var _len148 = _col148.length;
    while (true) {
        if (_ind148 < _len148) {
            
        } else {
            break;
        }
        var cell = _col148[_ind148];
        var td = make(tr, "td")
        var img = make(td, "img")
        img.id = cell.id
        img.width = 40
        img.height = 40
        img.src = imgSrc(cell.image)
        img.onclick = makeButtonOnClick(cell)
        img.ondragstart = function(evt) { return false; }
        cell.img = img
        cell.on = false
        var ttext = globals.translate(cell.tooltip)
        if (cell.shortcut) {
            var key = globals.translate("MES_KEY")
            ttext += (". " + key + ": " + cell.shortcut)
        }
        globals.tooltip.make(
        	img,
        	ttext
        )
        _ind148++;
    }
}

function makeSizes(current) {
    var result = []
    var i
    i = 10;
    while (true) {
        if (i <= 20) {
            
        } else {
            break;
        }
        pushSize(i, current, result)
        i++;
    }
    i = 22;
    while (true) {
        if (i <= 30) {
            
        } else {
            break;
        }
        pushSize(i, current, result)
        i += 2;
    }
    pushSize(36, current, result)
    pushSize(48, current, result)
    return result
}

function noWrap(div) {
    div.style.whiteSpace = "nowrap"
}

function normalizeDiagram(data) {
    if (data.items) {
        
    } else {
        if (data.nodes) {
            data.items = Utils.objectValues(data.nodes)
            data.nodes = undefined
        } else {
            data.items = []
        }
    }
    return data
}

function onAlign(align) {
    var dialogs = globals.dialogs
    showAlign(align)
    var format = {
    	align: align
    }
    setFormat(format)
}

function onBoldClicked() {
    setFont("bold")
}

function onButtonDown(data) {
    data.down = true
    data.div.style.background = data.active
}

function onButtonLeave(data) {
    data.down = false
    if ((data.isToggle) && (data.on)) {
        
    } else {
        data.div.style.background = data.idle
    }
}

function onButtonMove(data) {
    
}

function onButtonUp(data) {
    if (data.down) {
        data.down = false
        if (data.isToggle) {
            if (data.on) {
                data.div.style.background = data.idle
            } else {
                data.div.style.background = data.active
            }
            switchButton(data, !data.on)
        } else {
            data.div.style.background = data.idle
        }
        data.onClick(data)
    }
}

function onColorHexChanged(evt) {
    globals.dialogs.currentColor = evt.target.value
    updateCanApply()
}

function onFamilyChanged(item) {
    globals.dialogs.family = item.value
    setFont("family")
}

function onGradChanged(evt) {
    var dialogs = globals.dialogs
    if (evt.target.checked) {
        dialogs.fillType = "gradient"
    } else {
        dialogs.fillType = "solid"
    }
    if (dialogs.fillColor0) {
        
    } else {
        dialogs.fillColor0 = Theme.getIconBack("action")
    }
    setFillColor(dialogs.fillColor0)
}

function onItalicClicked() {
    setFont("italic")
}

function onItemSelected(data, item) {
    var _ind1906 = 0;
    var _col1906 = data.items;
    var _len1906 = _col1906.length;
    while (true) {
        if (_ind1906 < _len1906) {
            
        } else {
            break;
        }
        var it = _col1906[_ind1906];
        it.selected = (it == item)
        _ind1906++;
    }
    setComboText(data)
    data.onSelected(item)
}

function onReadonlyClicked(evt) {
    if (globals.onReadonly) {
        globals.onReadonly(evt)
    }
}

function onSearchChange(options) {
    if (globals.search) {
        applySearchOutput(options)
        showSearchItem(options)
    }
}

function onShadowChanged(evt) {
    var dialogs = globals.dialogs
    dialogs.shadow = evt.target.checked
    var format = {
    	shadow: dialogs.shadow
    }
    setFormat(format)
}

function onSizeChanged(item) {
    globals.dialogs.size = item.value
    setFont("size")
}

function onToggleShowToolbar() {
    globals.showToolbar = !globals.showToolbar
    updateArrowDirection()
    layout()
    globals.view.rebuild()
}

function onToolNameChanged(evt) {
    globals.toolName = evt.target.value
    finishIconGroups()
    updateToolbar()
    var payload = {
    	toolbar: globals.toolName
    }
    globals.saveUserSettings(payload)
}

function onToolNameFreeChanged(evt) {
    globals.toolNameFree = evt.target.value
    finishIconGroups()
    updateToolbar()
    var payload = {
    	toolbarFree: globals.toolNameFree
    }
    globals.saveUserSettings(payload)
}

function pan(dx, dy) {
    dx *= Config.KEY_SCROLL
    dy *= Config.KEY_SCROLL
    var zoom = globals.view.getZoom();
    globals.view.scrollBy(
    	dx / zoom,
    	dy / zoom
    )
}

function panicOnError(data) {
    var message = makeErrorMessage(data)
    globals.panic(message)
}

function parseAndLoadDiagram(source) {
    var diagram = JSON.parse(source);
    loadDiagram(diagram)
}

function parseFormat(format, fonts) {
    var dialogs = globals.dialogs
    dialogs.textColor = format.textColor
    dialogs.lineColor = format.lineColor
    dialogs.secondaryColor = format.secondaryColor
    dialogs.allowSecondary = format.allowSecondary
    dialogs.align = format.align
    dialogs.shadow = format.shadow
    dialogs.lineStyle = format.lineStyle
    dialogs.arrowStart = format.arrowStart
    dialogs.arrowEnd = format.arrowEnd
    if (format.fillColor) {
        if (format.fillColor.length == 7) {
            dialogs.fillType = "solid"
            dialogs.fillColor0 = format.fillColor
            dialogs.fillColor1 = ""
        } else {
            var parts = format.fillColor.split(" ")
            if ((parts.length == 3) && (parts[0] == "gradient")) {
                dialogs.fillType = "gradient"
                dialogs.fillColor0 = parts[2]
                dialogs.fillColor1 = parts[1]
            } else {
                dialogs.fillType = "solid"
                dialogs.fillColor0 = ""
                dialogs.fillColor1 = ""
            }
        }
    } else {
        dialogs.fillType = "solid"
        dialogs.fillColor0 = ""
        dialogs.fillColor1 = ""
    }
    var thickStr = format.lineThickness
    var thickness = parseInt(thickStr)
    if (isNaN(thickness)) {
        dialogs.lineThickness = 1
    } else {
        dialogs.lineThickness = thickness
    }
    findSameValues(fonts, dialogs)
    dialogs.faces = fontsToFaces(fonts)
}

function parseHexByte(str) {
    return parseInt("0x" + str)
}

function paste() {
    addTrace("ec:paste")
    var view = globals.view
    var cnv = globals.canvas
    var zoom = view.getZoom()
    var cbox = cnv.getBoundingClientRect()
    var cx = Math.round((cbox.left + cbox.right)/2)
    var cy = Math.round((cbox.top + cbox.bottom)/2)
    var dia = view.clientToDiagram(cx, cy)
    globals.editor.paste(dia.x, dia.y)
    globals.view.redraw()
}

function persist() {
    if (((globals.readonly) || (!(hasChanges()))) || (globals.delay)) {
        
    } else {
        var change = buildChanges(globals)
        reset();
        globals.storage.saveChanges(change)
    }
}

function pushSize(size, current, result) {
    var item = {
    	text: size + " px",
    	value: size,
    	selected: size == current
    }
    result.push(item)
}

function putInUpperPart(y, height) {
    var bottom = y + height
    var overlap = Math.round(bottom - window.innerHeight / 2)
    if (overlap > 0) {
        return y - overlap
    } else {
        return y
    }
}

function quickSearch() {
    if (globals.search) {
        
    } else {
        var state = globals.editor.getSearchState()
        globals.search = createSearchWindow()
        showSearch(state)
    }
    globals.search.searchInput.select()
    globals.search.searchInput.focus()
}

function redo() {
    if (globals.readonly) {
        
    } else {
        addTrace("ec:redo")
        globals.editor.performRedo()
        globals.view.redraw()
    }
}

function redraw() {
    globals.view.redraw()
}

function remove(id) {
    globals.removed.push(String(id))
}

function replace() {
    var input = getSearchInput()
    var options = globals.editor.replace(input)
    globals.view.redraw()
    onSearchChange(options)
}

function replaceAll() {
    var input = getSearchInput()
    var options = globals.editor.findReplaceAll(input)
    globals.view.redraw()
    onSearchChange(options)
}

function reset() {
    globals.added = []
    globals.removed = []
    globals.updated = []
    globals.diagramUpdate = {}
    globals.changes = false
}

function resetMode() {
    globals.freeScroll = false
}

function resize(left, top, width, height) {
    addTrace(
    	"ec:resize",
    	[left, top, width, height]
    )
    globals.box = {
    	left: left,
    	top: top,
    	width: width,
    	height: height
    }
    layout()
    globals.view.rebuild()
}

function restoreDiagramPosition() {
    var origin = globals.positions[globals.id]
    if (origin) {
        globals.view.pan(origin.x, origin.y)
    } else {
        home()
    }
}

function saveDiagramPosition() {
    if (globals.id) {
        var origin = globals.view.getOrigin();
        globals.positions[globals.id]=origin
    }
}

function saveLink() {
    var text = HtmlUtils.getValue("link_text")
    setLink(text)
}

function saveRecentColor(color) {
    if (color) {
        var colors = getRecentColors()
        if (colors.indexOf(color) == -1) {
            colors.unshift(color)
            while (true) {
                if (colors.length > 6) {
                    
                } else {
                    break;
                }
                colors.pop()
            }
            globals.userColors = colors
            var settings = {
            	colors: colors
            }
            globals.saveUserSettings(settings)
        }
    }
}

function saveZoom() {
    var zoom = globals.view.getZoom()
    var payload = {
    	zoom: zoom
    }
    globals.saveUserSettings(payload)
}

function searchNext() {
    var options = globals.editor.searchNext()
    onSearchChange(options)
}

function searchPrev() {
    var options = globals.editor.searchPrev()
    onSearchChange(options)
}

function selectAll() {
    globals.editor.selectAll()
    globals.view.redraw()
}

function setAbsRect(div, left, top, width, height) {
    var style = div.style
    style.position = "absolute"
    style.display = "inline-block"
    setRect(
    	div,
    	left,
    	top,
    	width,
    	height
    )
}

function setArrowEnd(data) {
    addTrace("ec:setArrowEnd")
    var arrowEnd = data.value
    var dialogs = globals.dialogs
    dialogs.arrowEnd = arrowEnd
    var format = {
    	arrowEnd: arrowEnd
    }
    setFormat(format)
}

function setArrowStart(data) {
    addTrace("ec:setArrowStart")
    var arrowStart = data.value
    var dialogs = globals.dialogs
    dialogs.arrowStart = arrowStart
    var format = {
    	arrowStart: arrowStart
    }
    setFormat(format)
}

function setBackStyle(div) {
    var style = div.style
    style.position = "absolute"
    style.left = "0px"
    style.top = "0px"
    style.width = "100%"
    style.height = "100vh"
}

function setBackgroundColor(color) {
    addTrace("ec:setBackgroundColor")
    setDivColor(
    	globals.dialogs.backColorButt,
    	color
    )
    var fields = {
    	background: color
    }
    globals.editor.setBackground(fields)
    globals.view.redraw()
    hideDialog()
}

function setColorButColor(div, color) {
    if (color) {
        div.style.background = color
        div.style.cursor = "pointer"
    } else {
        div.style.backgroundImage = "url('"
         + globals.imageBase + "no-color.png')"
        div.style.backgroundSize = "30px 30px"
        div.style.cursor = "default"
    }
}

function setColorFromCurrent(onChange) {
    var color = globals.dialogs.currentColor
    if (Utils.isColor(color)) {
        hidePopup()
        saveRecentColor(color)
        onChange(color)
    }
}

function setComboText(control) {
    control.label.innerHTML = ""
    var _ind1861 = 0;
    var _col1861 = control.items;
    var _len1861 = _col1861.length;
    while (true) {
        if (_ind1861 < _len1861) {
            
        } else {
            break;
        }
        var item = _col1861[_ind1861];
        if (item.selected) {
            var tn = document.createTextNode(item.text)
            control.label.appendChild(tn)
        }
        _ind1861++;
    }
}

function setDLT(thickness) {
    addTrace("ec:setDLT")
    var fields = {
    	diaLineThickness: thickness.value
    }
    globals.editor.setBackground(fields)
    globals.view.redraw()
}

function setDefaultBackground() {
    setDefaultBgCore(
    	globals.background,
    	globals.diaLine,
    	globals.diaLineThickness
    )
}

function setDefaultBgCore(color, diaLine, diaLineThickness) {
    var settings = {
    	background: color,
    	diaLine: diaLine,
    	diaLineThickness: diaLineThickness
    }
    globals.saveUserSettings(settings)
    globals.userBackground = color
    globals.userDiaLine = diaLine
    globals.userDiaLineThickness = diaLineThickness
}

function setDefaultFont(color) {
    var dialogs = globals.dialogs
    var italic = dialogs.italicButt.on
    var bold = dialogs.boldButt.on
    var size = dialogs.size
    var family = dialogs.family
    var font = Utils.buildFontString(
    	italic,
    	bold,
    	size,
    	family
    )
    var settings = {
    	font: font
    }
    globals.saveUserSettings(settings)
    globals.userFont = font
    hideDialog()
}

function setDefaultStyle() {
    var dialogs = globals.dialogs
    var shape = {}
    shape.fillColor = getCurrentFillColor()
    shape.textColor = dialogs.textColor
    shape.lineColor = dialogs.lineColor
    shape.secondaryColor = dialogs.secondaryColor
    shape.shadow = dialogs.shadow
    shape.lineThickness = dialogs.lineThickness
    shape.lineStyle = dialogs.lineStyle
    var settings = {
    	shape: shape
    }
    globals.saveUserSettings(settings)
    globals.userShape = shape
    hideDialog()
}

function setDiaLineColor(color) {
    addTrace("ec:setDiaLineColor", [color])
    if (color) {
        setDivColor(
        	globals.dialogs.diaLineColorButt,
        	color
        )
    }
    var fields = {
    	diaLine: color
    }
    globals.editor.setBackground(fields)
    globals.view.redraw()
}

function setDiagram(data, resize) {
    addTrace("ec:setDiagram", [resize])
    saveDiagramPosition()
    hideDialog()
    var editor = globals.editor
    var view = globals.view
    var diagram
    globals.id = data.space_id + "/" + data.id
    globals.name = data.name
    globals.type = data.type
    globals.background = data.background || ""
    globals.diaLine = data.diaLine || ""
    globals.diaLineThickness = data.diaLineThickness
    globals.tag = data.tag
    globals.freeScroll = false
    updateToolbar()
    reset()
    var diagram = normalizeDiagram(data)
    if (diagram.items.length == 0) {
        editor.createDiagram(data)
    } else {
        editor.loadDiagram(diagram)
    }
    if ((resize) && (!(globals.readonly))) {
        autoResize()
    } else {
        editor.buildTextBoxes()
    }
    reset()
    editor.redraw()
    editor.clearUndo()
    view.rebuild()
    globals.beh.resetMachines()
    CallTrace.reset()
}

function setDialogPos(x, y) {
    var dialog = globals.dialogs.dialog
    HtmlUtils.setPosCorrected(
    	x,
    	y,
    	dialog
    )
    HtmlUtils.setUpMovable(
    	dialog,
    	30
    )
}

function setDialogStyle(element) {
    element.style.border = "solid 1px #455A64"
    element.style.boxShadow
     = "0px 0px 5px rgba(0, 0, 0, 0.3)"
    element.style.width = "280px"
    element.style.position = "absolute"
    element.style.background = "white"
}

function setDivColor(div, color) {
    div.style.background = color
}

function setFillColor(color) {
    addTrace("ec:setFillColor", [color])
    var dialogs = globals.dialogs
    dialogs.fillColor0 = color
    setDivColor(
    	dialogs.fillColorButt,
    	color
    )
    var fillColor = getCurrentFillColor()
    var format = {
    	fillColor: fillColor
    }
    setFormat(format)
}

function setFont(component) {
    var dialogs = globals.dialogs
    var italic = dialogs.italicButt.on
    var bold = dialogs.boldButt.on
    var size = dialogs.size
    var family = dialogs.family
    addTrace("ec:setFont", 
     [component, italic, bold, size, family])
    var value = chooseFontComponent(
    	component,
    	italic,
    	bold,
    	size,
    	family
    )
    if (component == "size") {
        finishSetFont(
        	component,
        	value
        )
    } else {
        var newFaces = findFontsToLoad(
        	component,
        	value
        )
        if (newFaces.length == 0) {
            finishSetFont(
            	component,
            	value
            )
        } else {
            var onLoaded = function() {
            	finishSetFont(
            		component,
            		value
            	)
            }
            var loader = new ManyFontLoader()
            loader.onLoaded = onLoaded
            loader.start(newFaces)
        }
    }
}

function setFormat(format) {
    addTrace("ec:setFormat", [format])
    var dialogs = globals.dialogs
    globals.editor.setFormat(
    	dialogs.ids,
    	format
    )
    globals.view.redraw()
}

function setLeftButtonDirection(index, direction) {
    var buttInfo = globals.leftButts[index]
    buttInfo.div.src = getImageForDirection(
    	buttInfo.button,
    	direction
    )
}

function setLine(color, thickness) {
    addTrace("ec:setLine", [color, thickness])
    var dialogs = globals.dialogs
    dialogs.lineColor = color
    dialogs.lineThickness = thickness
    setDivColor(
    	dialogs.lineColorButt,
    	color
    )
    var lineColor
    if (thickness == 1) {
        lineColor = color
    } else {
        lineColor = "ct " + color + " "
         + thickness.toString()
    }
    var format = {
    	lineColor: color
    }
    setFormat(format)
}

function setLineColor(color) {
    addTrace("ec:setLineColor", [color])
    var dialogs = globals.dialogs
    dialogs.lineColor = color
    setDivColor(
    	dialogs.lineColorButt,
    	color
    )
    var format = {
    	lineColor: color
    }
    setFormat(format)
}

function setLineThickness(thickness) {
    addTrace("ec:setThickness", [thickness])
    var dialogs = globals.dialogs
    dialogs.lineThickness = thickness
    var format = {
    	lineThickness: thickness
    }
    setFormat(format)
}

function setLink(link) {
    var dialogs = globals.dialogs
    link = link || ""
    link = link.trim()
    if ((link) && (!(isGoodLink(link)))) {
        HtmlUtils.setText("link_message", tr("MES_BAD_LINK"))
    } else {
        dialogs.content.link = link
        globals.editor.setContent(
        	dialogs.itemId,
        	dialogs.content
        )
        globals.view.redraw()
    }
}

function setNotNull(src, name, target, tname) {
    if (name in src) {
        tname = tname || name
        target[tname] = src[name]
    }
}

function setPos(element, x, y) {
    var pos = HtmlUtils.correctPosition(
    	x,
    	y,
    	element
    )
    var style = element.style
    style.left = pos.x + "px"
    style.top = pos.y + "px"
    return pos
}

function setReadonly(readonly, onReadonly) {
    globals.readonly = readonly
    globals.editor.setReadonly(readonly)
    if (readonly) {
        globals.onReadonly = onReadonly
    } else {
        globals.onReadonly = null
    }
}

function setRect(div, left, top, width, height) {
    var style = div.style
    style.left = left + "px"
    style.top = top + "px"
    style.width = width + "px"
    style.height = height + "px"
}

function setSameValue(self, src) {
    var value = src[self.name]
    if (value == null) {
        
    } else {
        if (self.value == null) {
            self.value = value
        } else {
            if (self.value == value) {
                
            } else {
                self.different = true
            }
        }
    }
}

function setSecondaryColor(color) {
    addTrace("ec:setSecondaryColor", [color])
    var dialogs = globals.dialogs
    dialogs.secondaryColor = color
    setDivColor(
    	dialogs.secondaryColorButt,
    	color
    )
    var fillColor
    var format = {
    	secondaryColor: color
    }
    setFormat(format)
}

function setStyle(data) {
    var style = data.value
    addTrace("ec:setStyle", [style])
    var dialogs = globals.dialogs
    dialogs.lineStyle = style
    var format = {
    	lineStyle: style
    }
    setFormat(format)
}

function setTextColor(color) {
    addTrace("ec:setTextColor", [color])
    var dialogs = globals.dialogs
    dialogs.textColor = color
    setDivColor(
    	dialogs.textColorButt,
    	color
    )
    var format = {
    	textColor: color
    }
    setFormat(format)
}

function setTheme(key) {
    globals.theme = key
    Theme.selectTheme(key)
    
    var theme = Theme.getTheme(key)
    var payload = { theme: theme }
    globals.saveUserSettings(payload)
    	
    globals.editor.redraw();
    globals.view.rebuild();
}

function setThickness(data) {
    setLineThickness(data.value)
}

function setToolName(name) {
    globals.toolName = name
    finishIconGroups()
}

function setToolNameFree(name) {
    globals.toolNameFree = name
    finishIconGroups()
}

function setUserSettings(settings) {
    if (settings.zoom) {
        globals.view.zoomTo(settings.zoom)
    }
    if (settings.theme) {
        globals.theme = getThemeKey(settings.theme)
        console.log(globals.theme)
        Theme.setThemeValues(settings.theme)
    } else {
        globals.theme = "parrot"
    }
    if (settings.toolbar) {
        setToolName(settings.toolbar)
    }
    if (settings.toolbarFree) {
        setToolNameFree(settings.toolbarFree)
    }
    globals.editor.setUserSettings(settings)
    globals.userColors = []
    setNotNull(
    	settings,
    	"colors",
    	globals,
    	"userColors"
    )
    setNotNull(
    	settings,
    	"shape",
    	globals,
    	"userShape"
    )
    setNotNull(
    	settings,
    	"font",
    	globals,
    	"userFont"
    )
    setNotNull(
    	settings,
    	"background",
    	globals,
    	"userBackground"
    )
    setNotNull(
    	settings,
    	"diaLine",
    	globals,
    	"userDiaLine"
    )
    setNotNull(
    	settings,
    	"diaLineThickness",
    	globals,
    	"userDiaLineThickness"
    )
}

function setupDialog() {
    globals.dialogs = {}
    var dialogs = globals.dialogs
}

function setupEditor() {
    var view = new ViewWidget(
    	window,
    	document,
    	globals.canvas,
    	globals.over
    )
    var canvas = new Canvas(window, document)
    var editor = new Lomma(
    	canvas,
    	new Persistence(),
    	globals.translate,
    	userId
    )
    
    var callbacks = {
    	click: untoggleButtonOnly,
    	onFinishZoom: saveZoom
    }
    
    var behaviour = new Behaviour(
    	editor,
    	canvas,
    	view,
    	callbacks,
    	window,
    	globals.context
    )
    view.setPayload(behaviour)
    
    editor.setCallback("showInputBox", inputBox)
    editor.setCallback("getClipboard", getClipboard)
    editor.setCallback("getClipboardType", getClipboardType)
    editor.setCallback("copyToClipboard", copyToClipboard)
    editor.setCallback("commandDone", commandDone)
    editor.setCallback("showWarningPopup", showWarningPopup)
    editor.setCallback("changeBackground", changeBackground)
    editor.setCallback("changeFormat", changeFormat)
    editor.setCallback("getDefault", getDefault)
    editor.setCallback("editLink", editLink)
    editor.setCallback("followLink", followLink)
    editor.setCallback("changeYesNo", changeYesNo)
    editor.setCallback("showContextMenu", showContextMenu)
    editor.setCallback("findReferences", globals.findReferences)
    editor.setCallback("onSearchChange", onSearchChange)
    editor.setCallback("showChangeDiaProps", 
    	globals.showChangeDiaProps)
    editor.setCallback("hideCentral", 
    	globals.hideCentral)
    globals.editor = editor
    globals.view = view
    globals.beh = behaviour
    globals.cnv = canvas
}

function show(id, display) {
    var element = document.getElementById(id)
    if (element) {
        display = display || "block"
        element.style.display = display
    } else {
        throw Error("Element '" + id + "' not found")
    }
}

function showAlign(align) {
    var dialogs = globals.dialogs
    if (align === "left") {
        switchButton(dialogs.alignLeftButt, true)
        switchButton(dialogs.alignRightButt, false)
        switchButton(dialogs.alignCenterButt, false)
    } else {
        if (align === "center") {
            switchButton(dialogs.alignLeftButt, false)
            switchButton(dialogs.alignRightButt, false)
            switchButton(dialogs.alignCenterButt, true)
        } else {
            if (align === "right") {
                
            } else {
                throw "Unexpected switch value: " + align;
            }
            switchButton(dialogs.alignLeftButt, false)
            switchButton(dialogs.alignRightButt, true)
            switchButton(dialogs.alignCenterButt, false)
        }
    }
}

function showArrowEndItems(data) {
    var dialogs = globals.dialogs
    var style = dialogs.arrowEnd || ""
    var items = [
      {value:"", image:"cap-solid.png"},
      {value:"arrow", image:"cap-arrow-right.png"},
      {value:"sarrow", image:"cap-sarrow-right.png"},
      {value:"warrow", image:"cap-warrow-right.png"},
      {value:"paw", image:"cap-paw-right.png"}
    ]
    var _ind2562 = 0;
    var _col2562 = items;
    var _len2562 = _col2562.length;
    while (true) {
        if (_ind2562 < _len2562) {
            
        } else {
            break;
        }
        var item = _col2562[_ind2562];
        item.selected = (item.value == style)
        _ind2562++;
    }
    showDropDown(
    	data.div,
    	"MES_ARROW_HEAD",
    	items,
    	setArrowEnd
    )
}

function showArrowStartItems(data) {
    var dialogs = globals.dialogs
    var style = dialogs.arrowStart || ""
    var items = [
      {value:"", image:"cap-solid.png"},
      {value:"arrow", image:"cap-arrow-left.png"},
      {value:"sarrow", image:"cap-sarrow-left.png"},
      {value:"warrow", image:"cap-warrow-left.png"},
      {value:"paw", image:"cap-paw-left.png"}
    ]
    var _ind2550 = 0;
    var _col2550 = items;
    var _len2550 = _col2550.length;
    while (true) {
        if (_ind2550 < _len2550) {
            
        } else {
            break;
        }
        var item = _col2550[_ind2550];
        item.selected = (item.value == style)
        _ind2550++;
    }
    showDropDown(
    	data.div,
    	"MES_ARROW_TAIL",
    	items,
    	setArrowStart
    )
}

function showColorPicker(parent, color, titleId, onChange) {
    globals.dialogs.currentColor = color
    var i, j
    var popup = createPopup()
    var pos = HtmlUtils.rect(parent)
    popup.innerHTML = ""
    setDialogStyle(popup)
    popup.style.boxShadow
     = "0px 0px 15px rgba(0, 0, 0, 0.6)"
    //addTitle(popup, titleId)
    var recent = make(popup, "div")
    recent.style.paddingLeft = "5px"
    recent.style.paddingRight = "5px"
    recent.style.marginTop = "5px"
    recent.style.marginBottom = "5px"
    var recentColors = getRecentColors()
    i = 0;
    while (true) {
        if (i < 6) {
            
        } else {
            break;
        }
        var rcolor = recentColors[i]
        var action = makeChooseSimple(
        	onChange,
        	rcolor
        )
        addColorButton(recent, rcolor, 1, action)
        i++;
    }
    var pView = make(popup, "div")
    pView.style.height = "260px"
    pView.style.overflowY = "scroll"
    var palette = make(pView, "div")
    var colorRows = makePalette()
    var _ind1185 = 0;
    var _col1185 = colorRows;
    var _len1185 = _col1185.length;
    while (true) {
        if (_ind1185 < _len1185) {
            
        } else {
            break;
        }
        var crow = _col1185[_ind1185];
        var row = make(palette, "div")
        row.style.paddingLeft = "5px"
        row.style.paddingRight = "5px"
        var _ind1181 = 0;
        var _col1181 = crow;
        var _len1181 = _col1181.length;
        while (true) {
            if (_ind1181 < _len1181) {
                
            } else {
                break;
            }
            var cell = _col1181[_ind1181];
            var b = addColorButton(
            	row,
            	cell,
            	1,
            	makeChoosePalette(onChange, cell)
            )
            b.style.marginBottom = "0px"
            b.style.marginTop = "0px"
            _ind1181++;
        }
        _ind1185++;
    }
    var bottom = make(popup, "div")
    var noop = function() {}
    var selColor = addColorButton(
    	bottom,
    	color,
    	5,
    	noop
    )
    selColor.style.marginRight = "10px"
    selColor.style.verticalAlign = "bottom"
    globals.dialogs.selColor = selColor
    selColor.onclick = makeChooseCurrent(onChange)
    var input = make(bottom, "input")
    input.type = "text"
    input.value = color
    input.style.border = "solid 1px #455A64"
    input.style.width = "75px"
    input.style.padding = "2px"
    input.oninput = onColorHexChanged
    var apply = make(bottom, "div")
    apply.className = "panic_button"
    apply.style.display = "inline-block"
    HtmlUtils.setDivText(
    	apply,
    	globals.translate("MES_APPLY")
    )
    apply.onclick = noop
    apply.style.margin = "5px"
    apply.style.fontSize = "90%"
    apply.onclick = makeChooseCurrent(onChange)
    globals.dialogs.apply = apply
    updateCanApply()
    showPopup(pos.left - 10, pos.bottom)
}

function showComboDropDown(data) {
    var onSelected = function(item) {
    	onItemSelected(data, item)
    }
    showDropDown(
    	data.div,
    	globals.translate(data.title),
    	data.items,
    	onSelected
    )
}

function showContextMenu(x, y, menu) {
    var menu2 = {
    	rows: menu.map(wrapInRedraw)
    }
    globals.context(
    	x,
    	y,
    	menu2,
    	null,
    	null
    )
}

function showDialog(x, y) {
    setDialogPos(x, y)
}

function showDropDown(parent, title, rows, onItemClick) {
    var popup = createPopup()
    popup.innerHTML = ""
    setDialogStyle(popup)
    popup.style.boxShadow
     = "0px 0px 15px rgba(0, 0, 0, 0.6)"
    var inner = make(popup, "div")
    inner.style.maxHeight = "250px"
    inner.style.overflowY = "scroll"
    var table = make(inner, "table")
    table.width = "100%"
    var headRow = make(table, "tr")
    var header = make(headRow, "td")
    header.colSpan = "2"
    HtmlUtils.setDivText(
    	header,
    	globals.translate(title)
    )
    header.style.background = "#f0f0f0"
    header.style.padding = "5px"
    var _ind1694 = 0;
    var _col1694 = rows;
    var _len1694 = _col1694.length;
    while (true) {
        if (_ind1694 < _len1694) {
            
        } else {
            break;
        }
        var row = _col1694[_ind1694];
        var itemRow = make(table, "tr")
        var selCell = make(itemRow, "td")
        selCell.width = "10"
        var textCell = make(itemRow, "td")
        textCell.width = "100*"
        textCell.style.cursor = "pointer"
        textCell.onclick = makeItemClick(
        	onItemClick,
        	row
        )
        makeColorOnActive(itemRow)
        if (row.image) {
            var rimg = make(textCell, "img")
            rimg.verticalAlign = "middle"
            rimg.src = globals.imageBase + row.image
            rimg.width = 120
            rimg.height = 30
            textCell.style.padding = "0px"
            textCell.style.paddingTop = "2px"
            popup.style.width = "150px"
        } else {
            HtmlUtils.setDivText(
            	textCell,
            	row.text
            )
            textCell.style.padding = "5px"
        }
        if (row.selected) {
            var img = make(selCell, "img")
            img.verticalAlign = "bottom"
            img.src = globals.imageBase + "item-pointer.png"
            img.width = 10
            img.height = 10
        }
        _ind1694++;
    }
    var pos = HtmlUtils.rect(parent)
    showPopup(pos.left, pos.bottom)
}

function showIBlock(div) {
    div.style.display = "inline-block"
}

function showLeftButton(index) {
    globals.leftButts[index].visible = true
}

function showMenuAtElement(element, menu) {
    var box = element.getBoundingClientRect();
    var x = (box.left + box.right) / 2;
    var y = (box.top + box.bottom) / 2;
    
    globals.context(
    	x,
    	y,
    	menu,
    	null
    );
}

function showMindSockets(type) {
    showSocketsCore("mind-" + type)
}

function showPopup(x, y) {
    var popup = globals.dialogs.popup
    HtmlUtils.setPosCorrected(
    	x,
    	y,
    	popup
    )
}

function showRightButton(index) {
    globals.rightButts[index].visible = true
}

function showSearch(options) {
    var small = "16px"
    var line1 = make(globals.search.client, "div")
    var line2 = make(globals.search.client, "div")
    var line3 = make(globals.search.client, "div")
    noWrap(line1)
    noWrap(line2)
    noWrap(line3)
    line1.style.padding = "5px 0px"
    line2.style.padding = "5px 0px"
    line3.style.padding = "5px 0px"
    var findInput = make(line1, "input")
    findInput.id = "find_find"
    findInput.placeholder = translate("MES_FIND")
    findInput.style.width = "calc(50% - 12px)"
    findInput.style.marginLeft = "5px"
    findInput.style.padding = "1px"
    findInput.style.border = "solid 1px grey"
    findInput.style.fontSize = small
    findInput.value = options.input.find
    findInput.oninput = changeSearch
    globals.search.searchInput = findInput
    var replaceInput = make(line1, "input")
    replaceInput.id = "find_replace"
    replaceInput.placeholder = translate("MES_REPLACE")
    replaceInput.style.width = "calc(50% - 12px)"
    replaceInput.style.marginLeft = "5px"
    replaceInput.style.fontSize = small
    replaceInput.style.padding = "1px"
    replaceInput.style.border = "solid 1px grey"
    replaceInput.value = options.input.replace
    bindSearchShortcuts(findInput)
    bindSearchShortcuts(replaceInput)
    var line = make(line2, "div")
    line.id = "find_line"
    line.style.display = "inline-block"
    line.style.background = "white"
    line.style.padding = "5px"
    line.style.fontSize = small
    line.style.width = "calc(100% - 12px)"
    line.style.overflow = "hidden"
    line.style.verticalAlign = "top"
    line.style.minHeight = "26px"
    line.style.boxSizing = "border-box"
    line.style.marginLeft = "5px"
    var table = make(line3, "div")
    table.style.display = "table-row"
    table.style.width = "calc(100% - 10px)"
    var left = make(table, "div")
    left.style.display = "table-cell"
    left.style.width = "100%"
    var right = make(table, "div")
    right.style.display = "table-cell"
    var prev = addSmallButton(
    	left,
    	"find_prev",
    	"‹",
    	translate("MES_PREV_OCCURENCE"),
    	searchPrev
    )
    var next = addSmallButton(
    	left,
    	"find_next",
    	"›",
    	translate("MES_NEXT_OCCURENCE"),
    	searchNext
    )
    addSmallButton(
    	left,
    	"find_do_replace",
    	translate("MES_REPLACE"),
    	undefined,
    	replace
    )
    var all = addSmallButton(
    	right,
    	"find_replace_all",
    	translate("MES_REPLACE_ALL"),
    	undefined,
    	replaceAll
    )
    all.style.marginRight = "5px"
    var sensitive = createCheckHack(
    	left,
    	"find_case",
    	"Aa",
    	translate("MES_CASE_SENSITIVE")
    )
    sensitive.checked = options.input.sensitive
    sensitive.onchange = changeSearch
    var whole = createCheckHack(
    	left,
    	"find_whole",
    	"[a]",
    	translate("MES_WHOLE_WORD")
    )
    whole.checked = options.input.whole
    whole.onchange = changeSearch
    var statusContainer = make(left, "div")
    var status = make(statusContainer, "span")
    status.id = "find_status"
    statusContainer.style.boxModel = "border-box"
    statusContainer.style.display = "inline-block"
    statusContainer.style.fontSize = small
    statusContainer.style.padding = "5px"
    //statusContainer.style.width = "120px"
    statusContainer.style.verticalAlign = "top"
    applySearchOutput(options)
}

function showSearchItem(options) {
    id = options.output.id
    if (id) {
        centerItem(id)
    }
}

function showSockets(type) {
    if (isMind()) {
        var map = {
        	"action": "action",
        	"case": "collection",
        	"raction": "raction",
        	"select": "beginend",
        	"insertion": "insertion",
        	"shelf": "shelf"
        }
        type = map[type]
        if (type) {
            showMindSockets(type)
        }
    } else {
        if (type == "raction") {
            
        } else {
            showSocketsCore(type)
        }
    }
}

function showSocketsCore(type) {
    globals.editor.showInsertionSockets(type)
    globals.view.redraw()
}

function showStyleItems(data) {
    var dialogs = globals.dialogs
    var style = dialogs.lineStyle || "solid"
    var items = [
      {value:"solid", image:"ls-solid.png"},
      {value:"s-1", image:"ls-style-1.png"},
      {value:"s-2", image:"ls-style-2.png"},
      {value:"s-3", image:"ls-style-3.png"},
      {value:"s-4", image:"ls-style-4.png"}
    ]
    var _ind2507 = 0;
    var _col2507 = items;
    var _len2507 = _col2507.length;
    while (true) {
        if (_ind2507 < _len2507) {
            
        } else {
            break;
        }
        var item = _col2507[_ind2507];
        item.selected = (item.value == style)
        _ind2507++;
    }
    showDropDown(
    	data.div,
    	"MES_STYLE",
    	items,
    	setStyle
    )
}

function showThemeMenu() {
    var rows = []
    var row1 = [
    	buildThemeMenuItem("default"),
    	buildThemeMenuItem("parrot"),
    	buildThemeMenuItem("strict"),
    	buildThemeMenuItem("cloud")
    ]
    rows.push(row1)
    var row2 = [
    	buildThemeMenuItem("white1"),
    	buildThemeMenuItem("white2"),
    	buildThemeMenuItem("dark1"),
    	buildThemeMenuItem("night")
    ]
    rows.push(row2)
    var row3 = [
    	buildThemeMenuItem("red"),
    	buildThemeMenuItem("black"),
    	buildThemeMenuItem("dark3"),
    	buildThemeMenuItem("night2")
    ]
    rows.push(row3)
    var menu = {
    	rows: rows,
    	isGrid: true
    }
    var element = get("tt_theme")
    showMenuAtElement(element, menu)
}

function showThicknessItems(data, start, thickness, action) {
    var dialogs = globals.dialogs
    var items = []
    var i
    i = start;
    while (true) {
        if (i <= 5) {
            
        } else {
            break;
        }
        var item = {
        	value: i,
        	text: i + " px",
        	selected: (i == thickness)
        }
        items.push(item)
        i++;
    }
    showDropDown(
    	data.div,
    	"MES_THICKNESS",
    	items,
    	action
    )
}

function showWarningPopup(message) {
    globals.warning(message)
}

function showZoomMenu() {
    var zin = globals.translate("BUT_ZOOM_IN")
    var zout = globals.translate("BUT_ZOOM_OUT")
    var menu = [
    //	{ text: zin, code: zoomIn },
    //	{ text: zout, code: zoomOut },
    //	{ type: "separator" },				
    	{ text: "200%", code: function() { zoomTo(200); } },
    	{ text: "175%", code: function() { zoomTo(175); } },
    	{ text: "150%", code: function() { zoomTo(150); } },
    	{ text: "125%", code: function() { zoomTo(125); } },
    	{ text: "110%", code: function() { zoomTo(110); } },
    	{ type: "separator" },						
    	{ text: "100%", code: function() { zoomTo(100); } },
    	{ type: "separator" },
    	{ text: "90%", code: function() { zoomTo(90); } },
    	{ text: "80%", code: function() { zoomTo(80); } },
    	{ text: "75%", code: function() { zoomTo(75); } },
    	{ text: "67%", code: function() { zoomTo(66.666666667); } },
    	{ text: "50%", code: function() { zoomTo(50); } },
    	{ text: "33%", code: function() { zoomTo(33.33333333); } }
    ]
    var zoomButt = get("tt_zoom")
    var menuObj = {
    	rows: menu
    }
    showMenuAtElement(zoomButt, menuObj)
}

function startEdit() {
    globals.editor.startEdit()
}

function startFreeScroll() {
    globals.freeScroll = true
    globals.beh.startFreeScroll()
    layout()
    globals.view.rebuild()
}

function startPan() {
    if (globals.freeScroll) {
        
    } else {
        globals.beh.startFreeScroll()
    }
}

function stopFreeScroll() {
    globals.freeScroll = false
    globals.beh.endFreeScroll()
    layout()
    globals.view.rebuild()
}

function switchButton(data, on) {
    if (on) {
        data.div.style.background = data.active
    } else {
        data.div.style.background = data.idle
    }
    data.on = on
}

function themeMatchesKey(theme, key) {
    var savedTheme = Theme.getTheme(key)
    var _ind4215 = 0;
    var _col4215 = theme.props;
    var _keys4215 = Object.keys(_col4215); 
    var _len4215 = _keys4215.length;
    while (true) {
        if (_ind4215 < _len4215) {
            
        } else {
            return true
        }
        var key = _keys4215[_ind4215]; var value = _col4215[key];
        if (value === savedTheme.props[key]) {
            
        } else {
            return false
        }
        _ind4215++;
    }
}

function toggleSelectionMode(cell) {
    var image, tt
    cell.on = !cell.on
    if (cell.on) {
        image = "normal-mode.png"
        tt = "BUT_NORMAL_MODE"
        globals.beh.toSelectionMode()
    } else {
        image = "select-mode.png"
        tt = "BUT_SELECTION_MODE"
        globals.beh.toNormalMode()
    }
    cell.img.src = imgSrc(image)
    globals.tooltip.make(
    	cell.img,
    	globals.translate(tt)
    )
}

function toggleSilhouette() {
    addTrace("ec:toggleSilhouette")
    globals.editor.toggleSilhouette()
    home()
}

function toggleTreeType() {
    addTrace("ec:toggleTreeType")
    globals.editor.toggleTreeType()
    globals.view.redraw()
}

function undo() {
    if (globals.readonly) {
        
    } else {
        addTrace("ec:undo")
        globals.editor.performUndo()
        globals.view.redraw()
    }
}

function untoggleButtonOnly() {
    
}

function update(item) {
    globals.updated.push(Utils.copyObject(item))
}

function updateArrowDirection() {
    var direction
    if (globals.showToolbar) {
        direction = "left"
    } else {
        direction = "right"
    }
    setLeftButtonDirection(0, direction)
}

function updateCanApply() {
    var color = globals.dialogs.currentColor
    var back
    var cursor
    var show
    if (Utils.isColor(color)) {
        back = "#455A64"
        cursor = "pointer"
        show = color
    } else {
        back = "grey"
        cursor = "default"
        show = ""
    }
    var button = globals.dialogs.apply
    button.style.background = back
    button.style.cursor = cursor
    var selColor = globals.dialogs.selColor
    setColorButColor(selColor, show)
}

function updateDiagram(fields) {
    var _ind4147 = 0;
    var _col4147 = fields;
    var _keys4147 = Object.keys(_col4147); 
    var _len4147 = _keys4147.length;
    while (true) {
        if (_ind4147 < _len4147) {
            
        } else {
            break;
        }
        var name = _keys4147[_ind4147]; var value = _col4147[name];
        globals.changes = true
        globals.diagramUpdate[name] = value
        _ind4147++;
    }
}

function updateToolbar() {
    var _sw32980000_ = 0;
    if (globals.readonly) {
        hide("dia-mind")
        hide("dia-free")
        hide("dia-icons")
        globals.ro.style.display = "inline-block"
        if (globals.onReadonly) {
            globals.ro.className = "panic_button"
            globals.ro.style.background = "coral"
        } else {
            globals.ro.className = "dlg_button"
            globals.ro.style.background = "black"
        }
    } else {
        _sw32980000_ = globals.type;
        if (_sw32980000_ === "drakon") {
            hide("dia-mind")
            hide("dia-free")
            show("dia-icons", "block")
        } else {
            if (_sw32980000_ === "mind") {
                hide("dia-free")
                hide("dia-icons")
                show("dia-mind", "block")
            } else {
                hide("dia-mind")
                hide("dia-icons")
                show("dia-free", "block")
            }
        }
        hideDiv(globals.ro)
    }
}

function wrapInRedraw(item) {
    var code2 = function(x, y) {
    	if (item.text) CallTrace.add("cm:" + item.text)
    	item.code(x, y)
    	globals.view.hideOver()
    	globals.view.redraw()
    }
    return {
    	text: item.text,
    	image: item.image,
    	code: code2
    }
}

function zoomIn() {
    globals.view.zoomIn()
    saveZoom()
}

function zoomOut() {
    globals.view.zoomOut()
    saveZoom()
}

function zoomTo(percent) {
    globals.view.zoomTo(percent / 100.0)
    saveZoom()
    home()
}

function ManyFontLoader() {
  var _self = this;
  _self.type_name = "ManyFontLoader";
  _self.state = "Normal";
  _self.fontLoaded = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Normal") {
      return ManyFontLoader_Normal_fontLoaded(_self, msg);
    }
    return null;
  };
  _self.start = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Normal") {
      return ManyFontLoader_Normal_start(_self, msg);
    }
    return null;
  };
}


addFontFile(false, false, "droid_sans_monoregular", "DroidSansMono-webfont.woff")

addFontFile(false, false, "monaco", "monaco.ttf")
addFontFile(false, false, "Liberation Sans", "LiberationSans.ttf")
addFontFile(false, true, "Liberation Sans", "LiberationSans-Bold.ttf")
addFontFile(true, false, "Liberation Sans", "LiberationSans-Italic.ttf")
addFontFile(true, true, "Liberation Sans", "LiberationSans-BoldItalic.ttf")

addFontFile(false, false, "Arimo", "Arimo-Regular.ttf")
addFontFile(false, true, "Arimo", "Arimo-Bold.ttf")
addFontFile(true, false, "Arimo", "Arimo-Italic.ttf")
addFontFile(true, true, "Arimo", "Arimo-BoldItalic.ttf")

addFontFile(false, false, "Cousine", "Cousine-Regular.ttf")
addFontFile(false, true, "Cousine", "Cousine-Bold.ttf")
addFontFile(true, false, "Cousine", "Cousine-Italic.ttf")
addFontFile(true, true, "Cousine", "Cousine-BoldItalic.ttf")

addFontFile(false, false, "Tinos", "Tinos-Regular.ttf")
addFontFile(false, true, "Tinos", "Tinos-Bold.ttf")
addFontFile(true, false, "Tinos", "Tinos-Italic.ttf")
addFontFile(true, true, "Tinos", "Tinos-BoldItalic.ttf")

addFontFile(false, false, "Alegreya Sans", "AlegreyaSans-Regular.ttf")
addFontFile(false, true, "Alegreya Sans", "AlegreyaSans-Bold.ttf")
addFontFile(true, false, "Alegreya Sans", "AlegreyaSans-Italic.ttf")
addFontFile(true, true, "Alegreya Sans", "AlegreyaSans-BoldItalic.ttf")

addFontFile(false, false, "Anonymous Pro", "AnonymousPro-Regular.ttf")
addFontFile(false, true, "Anonymous Pro", "AnonymousPro-Bold.ttf")
addFontFile(true, false, "Anonymous Pro", "AnonymousPro-Italic.ttf")
addFontFile(true, true, "Anonymous Pro", "AnonymousPro-BoldItalic.ttf")

addFontFile(false, false, "Cormorant Garamond", "CormorantGaramond-Regular.ttf")
addFontFile(false, true, "Cormorant Garamond", "CormorantGaramond-Bold.ttf")
addFontFile(true, false, "Cormorant Garamond", "CormorantGaramond-Italic.ttf")
addFontFile(true, true, "Cormorant Garamond", "CormorantGaramond-BoldItalic.ttf")

addFontFile(false, false, "Crimson Text", "CrimsonText-Roman.ttf")
addFontFile(false, true, "Crimson Text", "CrimsonText-Bold.ttf")
addFontFile(true, false, "Crimson Text", "CrimsonText-Italic.ttf")
addFontFile(true, true, "Crimson Text", "CrimsonText-BoldItalic.ttf")

addFontFile(false, false, "Lato", "lato-regular-webfont.ttf")
addFontFile(false, true, "Lato", "lato-bold-webfont.ttf")
addFontFile(true, false, "Lato", "Lato-Italic.ttf")
addFontFile(true, true, "Lato", "Lato-BoldItalic.ttf")

addFontFile(false, false, "Lora", "Lora-Regular.ttf")
addFontFile(false, true, "Lora", "Lora-Bold.ttf")
addFontFile(true, false, "Lora", "Lora-Italic.ttf")
addFontFile(true, true, "Lora", "Lora-BoldItalic.ttf")

addFontFile(false, false, "Merriweather", "Merriweather-Regular.ttf")
addFontFile(false, true, "Merriweather", "Merriweather-Bold.ttf")
addFontFile(true, false, "Merriweather", "Merriweather-Italic.ttf")
addFontFile(true, true, "Merriweather", "Merriweather-BoldItalic.ttf")

addFontFile(false, false, "Noto Sans", "NotoSans-Regular.ttf")
addFontFile(false, true, "Noto Sans", "NotoSans-Bold.ttf")
addFontFile(true, false, "Noto Sans", "NotoSans-Italic.ttf")
addFontFile(true, true, "Noto Sans", "NotoSans-BoldItalic.ttf")

addFontFile(false, false, "Open Sans", "OpenSans-Regular.ttf")
addFontFile(false, true, "Open Sans", "OpenSans-Bold.ttf")
addFontFile(true, false, "Open Sans", "OpenSans-Italic.ttf")
addFontFile(true, true, "Open Sans", "OpenSans-BoldItalic.ttf")

addFontFile(false, false, "PT Sans", "PT_Sans-Web-Regular.ttf")
addFontFile(false, true, "PT Sans", "PT_Sans-Web-Bold.ttf")
addFontFile(true, false, "PT Sans", "PT_Sans-Web-Italic.ttf")
addFontFile(true, true, "PT Sans", "PT_Sans-Web-BoldItalic.ttf")

addFontFile(false, false, "PT Serif", "PT_Serif-Web-Regular.ttf")
addFontFile(false, true, "PT Serif", "PT_Serif-Web-Bold.ttf")
addFontFile(true, false, "PT Serif", "PT_Serif-Web-Italic.ttf")
addFontFile(true, true, "PT Serif", "PT_Serif-Web-BoldItalic.ttf")

addFontFile(false, false, "Raleway", "Raleway-Regular.ttf")
addFontFile(false, true, "Raleway", "Raleway-Bold.ttf")
addFontFile(true, false, "Raleway", "Raleway-Italic.ttf")
addFontFile(true, true, "Raleway", "Raleway-BoldItalic.ttf")

addFontFile(false, false, "Roboto", "Roboto-Regular.ttf")
addFontFile(false, true, "Roboto", "Roboto-Bold.ttf")
addFontFile(true, false, "Roboto", "Roboto-Italic.ttf")
addFontFile(true, true, "Roboto", "Roboto-BoldItalic.ttf")

addFontFile(false, false, "Roboto Condensed", "RobotoCondensed-Regular.ttf")
addFontFile(false, true, "Roboto Condensed", "RobotoCondensed-Bold.ttf")
addFontFile(true, false, "Roboto Condensed", "RobotoCondensed-Italic.ttf")
addFontFile(true, true, "Roboto Condensed", "RobotoCondensed-BoldItalic.ttf")

addFontFile(false, false, "Roboto Mono", "RobotoMono-Regular.ttf")
addFontFile(false, true, "Roboto Mono", "RobotoMono-Bold.ttf")
addFontFile(true, false, "Roboto Mono", "RobotoMono-Italic.ttf")
addFontFile(true, true, "Roboto Mono", "RobotoMono-BoldItalic.ttf")

addFontFile(false, false, "Source Code Pro", "SourceCodePro-Regular.ttf")
addFontFile(false, true, "Source Code Pro", "SourceCodePro-Bold.ttf")
addFontFile(true, false, "Source Code Pro", "SourceCodePro-Regular.ttf")
addFontFile(true, true, "Source Code Pro", "SourceCodePro-Regular.ttf")

addFontFile(false, false, "Source Sans Pro", "SourceSansPro-Regular.ttf")
addFontFile(false, true, "Source Sans Pro", "SourceSansPro-Bold.ttf")
addFontFile(true, false, "Source Sans Pro", "SourceSansPro-Italic.ttf")
addFontFile(true, true, "Source Sans Pro", "SourceSansPro-BoldItalic.ttf")

addFontFile(false, false, "Space Mono", "SpaceMono-Regular.ttf")
addFontFile(false, true, "Space Mono", "SpaceMono-Bold.ttf")
addFontFile(true, false, "Space Mono", "SpaceMono-Italic.ttf")
addFontFile(true, true, "Space Mono", "SpaceMono-BoldItalic.ttf")

addFontFile(false, false, "Titillium Web", "TitilliumWeb-Regular.ttf")
addFontFile(false, true, "Titillium Web", "TitilliumWeb-Bold.ttf")
addFontFile(true, false, "Titillium Web", "TitilliumWeb-Italic.ttf")
addFontFile(true, true, "Titillium Web", "TitilliumWeb-BoldItalic.ttf")

addFontFile(false, false, "Ubuntu", "Ubuntu-Regular.ttf")
addFontFile(false, true, "Ubuntu", "Ubuntu-Bold.ttf")
addFontFile(true, false, "Ubuntu", "Ubuntu-Italic.ttf")
addFontFile(true, true, "Ubuntu", "Ubuntu-BoldItalic.ttf")

addFontFile(false, false, "Ubuntu Mono", "UbuntuMono-Regular.ttf")
addFontFile(false, true, "Ubuntu Mono", "UbuntuMono-Bold.ttf")
addFontFile(true, false, "Ubuntu Mono", "UbuntuMono-Italic.ttf")
addFontFile(true, true, "Ubuntu Mono", "UbuntuMono-BoldItalic.ttf")

addFontFile(false, false, "Vollkorn", "Vollkorn-Regular.ttf")
addFontFile(false, true, "Vollkorn", "Vollkorn-Bold.ttf")
addFontFile(true, false, "Vollkorn", "Vollkorn-Regular.ttf")
addFontFile(true, true, "Vollkorn", "Vollkorn-Regular.ttf")


globals.root = get(elementId)

this.resize = resize
this.init = init
this.loadSave = loadSave
this.undo = undo
this.redo = redo
this.setDiagram = setDiagram
this.setUserSettings = setUserSettings
this.home = home
this.setReadonly = setReadonly
this.getTag = getTag
this.getName = getName
this.deleteSelection = deleteSelection
this.exportPng = exportPng
this.exportSvg = exportSvg
this.getDiagram = getDiagram
this.setToolName = setToolName
this.getFonts = getFonts
this.showSockets = showSockets
this.copy = copy
this.cut = cut
this.paste = paste
this.hideDialog = hideDialog
this.selectAll = selectAll
this.getFontsFromEditor = getFontsFromEditor
this.isDrakon = isDrakon
this.startEdit = startEdit
this.arrowUp = arrowUp
this.arrowDown = arrowDown
this.arrowLeft = arrowLeft
this.arrowRight = arrowRight

this.createLeftButton = createLeftButton
this.showLeftButton = showLeftButton
this.hideLeftButton = hideLeftButton

this.createRightButton = createRightButton
this.showRightButton = showRightButton
this.hideRightButton = hideRightButton

this.isDragOn = isDragOn
this.centerItem = centerItem
this.startPan = startPan
this.endPan = endPan
this.resetMode = resetMode

this.startFreeScroll = startFreeScroll
this.bText = bText
this.quickSearch = quickSearch
this.hideSearch = hideSearch
this.searchNext = searchNext
this.searchPrev = searchPrev
this.redraw = redraw
this.restoreDiagramPosition = restoreDiagramPosition
}
