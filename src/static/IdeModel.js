// autogenerated with TableGen v.0.1
function IdeModel() {
    var _factory = this

    this.Root = function () {
        this.__parent = null
        this._root = null
        this._widgets = new _factory.Widgets()
        this._widgets.__parent = this
        this._pathWidgets = []
        this._splitter = null
        this._resizeTimer = null
        this._resizeTimeout = 200
        this._clicked = null
        this._isDev = null
        this._tryMe = null
        this._readOnly = null
        this._wide = true
        this._userId = null
        this._doc = new _factory.Doc()
        this._doc.__parent = this
        this._pageId = 1
        this._cache = new _factory.FolderCache()
        this._cache.__parent = this
        this._path = new _factory.PathItems()
        this._path.__parent = this
        this._history = new _factory.History()
        this._history.__parent = this
        this._loadingType = null
        this._screen = null
        this._topCodes = null
        this._topCodesRo = null
        this._topCodesNu = null
        this._topCodesTry = null
        this._centralStack = []
        this._editor = null
        this._theme = null
        this._loadedFonts = null
        this._saver = null
        this._pollTimer = null
        this._extendedMenu = new _factory.ExtendedMenu()
        this._extendedMenu.__parent = this
        this._access = null
        this._oldAccess = null
        this._enterSave = null
        this._mobileInput = null
        this._mobileSubmit = null
        this._stateType = null
        this._clipboardTimer = null
        this.root = Root_root
        this.widgets = Root_widgets
        this.pathWidgets = Root_pathWidgets
        this.splitter = Root_splitter
        this.resizeTimer = Root_resizeTimer
        this.resizeTimeout = Root_resizeTimeout
        this.clicked = Root_clicked
        this.isDev = Root_isDev
        this.tryMe = Root_tryMe
        this.readOnly = Root_readOnly
        this.wide = Root_wide
        this.userId = Root_userId
        this.doc = Root_doc
        this.pageId = Root_pageId
        this.cache = Root_cache
        this.path = Root_path
        this.history = Root_history
        this.loadingType = Root_loadingType
        this.screen = Root_screen
        this.topCodes = Root_topCodes
        this.topCodesRo = Root_topCodesRo
        this.topCodesNu = Root_topCodesNu
        this.topCodesTry = Root_topCodesTry
        this.centralStack = Root_centralStack
        this.editor = Root_editor
        this.theme = Root_theme
        this.loadedFonts = Root_loadedFonts
        this.saver = Root_saver
        this.pollTimer = Root_pollTimer
        this.extendedMenu = Root_extendedMenu
        this.access = Root_access
        this.oldAccess = Root_oldAccess
        this.enterSave = Root_enterSave
        this.mobileInput = Root_mobileInput
        this.mobileSubmit = Root_mobileSubmit
        this.stateType = Root_stateType
        this.clipboardTimer = Root_clipboardTimer
        this.setRoot = Root_setRoot
        this.setWidgets = Root_setWidgets
        this.setPathWidgets = Root_setPathWidgets
        this.setSplitter = Root_setSplitter
        this.setResizeTimer = Root_setResizeTimer
        this.setResizeTimeout = Root_setResizeTimeout
        this.setClicked = Root_setClicked
        this.setIsDev = Root_setIsDev
        this.setTryMe = Root_setTryMe
        this.setReadOnly = Root_setReadOnly
        this.setWide = Root_setWide
        this.setUserId = Root_setUserId
        this.setDoc = Root_setDoc
        this.setPageId = Root_setPageId
        this.setCache = Root_setCache
        this.setPath = Root_setPath
        this.setHistory = Root_setHistory
        this.setLoadingType = Root_setLoadingType
        this.setScreen = Root_setScreen
        this.setTopCodes = Root_setTopCodes
        this.setTopCodesRo = Root_setTopCodesRo
        this.setTopCodesNu = Root_setTopCodesNu
        this.setTopCodesTry = Root_setTopCodesTry
        this.setCentralStack = Root_setCentralStack
        this.setEditor = Root_setEditor
        this.setTheme = Root_setTheme
        this.setLoadedFonts = Root_setLoadedFonts
        this.setSaver = Root_setSaver
        this.setPollTimer = Root_setPollTimer
        this.setExtendedMenu = Root_setExtendedMenu
        this.setAccess = Root_setAccess
        this.setOldAccess = Root_setOldAccess
        this.setEnterSave = Root_setEnterSave
        this.setMobileInput = Root_setMobileInput
        this.setMobileSubmit = Root_setMobileSubmit
        this.setStateType = Root_setStateType
        this.setClipboardTimer = Root_setClipboardTimer
    }

    this.Access = function () {
        this.__parent = null
        this._spaceId = null
        this._isPublic = null
        this._roles = null
        this.spaceId = Access_spaceId
        this.isPublic = Access_isPublic
        this.roles = Access_roles
        this.setSpaceId = Access_setSpaceId
        this.setIsPublic = Access_setIsPublic
        this.setRoles = Access_setRoles
    }

    this.PathItemsRow = function () {
        this.__parent = null
        this._spaceId = null
        this._folderId = null
        this._id = null
        this._nextId = null
        this.spaceId = PathItemsRow_spaceId
        this.folderId = PathItemsRow_folderId
        this.id = PathItemsRow_id
        this.nextId = PathItemsRow_nextId
        this.setSpaceId = PathItemsRow_setSpaceId
        this.setFolderId = PathItemsRow_setFolderId
        this.setId = PathItemsRow_setId
        this.setNextId = PathItemsRow_setNextId
    }

    this.PathItems = function () {
        this.__parent = null
        this._rows = []
        this.foreach = PathItems_foreach
        this.count = PathItems_count
        this.insertAt = PathItems_insertAt
        this.deleteAt = PathItems_deleteAt
        this.append = PathItems_append
        this.get = PathItems_get
        this.clear = PathItems_clear
        this.sort = PathItems_sort
        this.getList = PathItems_getList
        this.getOrdinal = PathItems_getOrdinal
        this._byId = {}
        this.getById = PathItems_getById
    }

    this.ExtendedMenu = function () {
        this.__parent = null
        this._item = null
        this._queryId = null
        this._urls = null
        this.item = ExtendedMenu_item
        this.queryId = ExtendedMenu_queryId
        this.urls = ExtendedMenu_urls
        this.setItem = ExtendedMenu_setItem
        this.setQueryId = ExtendedMenu_setQueryId
        this.setUrls = ExtendedMenu_setUrls
    }

    this.HistoryRow = function () {
        this.__parent = null
        this._spaceId = null
        this._folderId = null
        this._type = null
        this._name = null
        this._id = null
        this.spaceId = HistoryRow_spaceId
        this.folderId = HistoryRow_folderId
        this.type = HistoryRow_type
        this.name = HistoryRow_name
        this.id = HistoryRow_id
        this.setSpaceId = HistoryRow_setSpaceId
        this.setFolderId = HistoryRow_setFolderId
        this.setType = HistoryRow_setType
        this.setName = HistoryRow_setName
        this.setId = HistoryRow_setId
    }

    this.History = function () {
        this.__parent = null
        this._rows = []
        this.foreach = History_foreach
        this.count = History_count
        this.insertAt = History_insertAt
        this.deleteAt = History_deleteAt
        this.append = History_append
        this.get = History_get
        this.clear = History_clear
        this.sort = History_sort
        this.getList = History_getList
        this.getOrdinal = History_getOrdinal
        this._byId = {}
        this.getById = History_getById
    }

    this.Doc = function () {
        this.__parent = null
        this._spaceId = null
        this._folderId = null
        this._parent = null
        this._access = null
        this._oldTag = null
        this._newTag = null
        this._type = null
        this._isPublic = null
        this.spaceId = Doc_spaceId
        this.folderId = Doc_folderId
        this.parent = Doc_parent
        this.access = Doc_access
        this.oldTag = Doc_oldTag
        this.newTag = Doc_newTag
        this.type = Doc_type
        this.isPublic = Doc_isPublic
        this.setSpaceId = Doc_setSpaceId
        this.setFolderId = Doc_setFolderId
        this.setParent = Doc_setParent
        this.setAccess = Doc_setAccess
        this.setOldTag = Doc_setOldTag
        this.setNewTag = Doc_setNewTag
        this.setType = Doc_setType
        this.setIsPublic = Doc_setIsPublic
    }

    this.Box = function () {
        this.__parent = null
        this._cX = null
        this._cY = null
        this._pX = null
        this._pY = null
        this._width = null
        this._height = null
        this.cX = Box_cX
        this.cY = Box_cY
        this.pX = Box_pX
        this.pY = Box_pY
        this.width = Box_width
        this.height = Box_height
        this.setCX = Box_setCX
        this.setCY = Box_setCY
        this.setPX = Box_setPX
        this.setPY = Box_setPY
        this.setWidth = Box_setWidth
        this.setHeight = Box_setHeight
    }

    this.WidgetsRow = function () {
        this.__parent = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.Widgets = function () {
        this.__parent = null
        this._count = 0
        this._next = 1
        this.foreach = Widgets_foreach
        this.count = Widgets_count
        this.add = Widgets_add
        this.remove = Widgets_remove
        this.clear = Widgets_clear
        this.getList = Widgets_getList
        this._byId = {}
        this.get = Widgets_get
    }

    this.RootWidget = function () {
        this.__parent = null
        this._topChild = null
        this._bottomChild = null
        this._middle = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.topChild = RootWidget_topChild
        this.bottomChild = RootWidget_bottomChild
        this.middle = RootWidget_middle
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setTopChild = RootWidget_setTopChild
        this.setBottomChild = RootWidget_setBottomChild
        this.setMiddle = RootWidget_setMiddle
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.CheckBox = function () {
        this.__parent = null
        this._isChecked = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.isChecked = CheckBox_isChecked
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setIsChecked = CheckBox_setIsChecked
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.WidgetMapRow = function () {
        this.__parent = null
        this._childCode = null
        this._childId = null
        this.childCode = WidgetMapRow_childCode
        this.childId = WidgetMapRow_childId
        this.setChildCode = WidgetMapRow_setChildCode
        this.setChildId = WidgetMapRow_setChildId
    }

    this.WidgetMap = function () {
        this.__parent = null
        this._count = 0
        this.foreach = WidgetMap_foreach
        this.count = WidgetMap_count
        this.add = WidgetMap_add
        this.remove = WidgetMap_remove
        this.clear = WidgetMap_clear
        this.getList = WidgetMap_getList
        this._byChildCode = {}
        this.get = WidgetMap_get
    }

    this.ManyWidget = function () {
        this.__parent = null
        this._current = null
        this._height = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.current = ManyWidget_current
        this.height = ManyWidget_height
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setCurrent = ManyWidget_setCurrent
        this.setHeight = ManyWidget_setHeight
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.PathWidget = function () {
        this.__parent = null
        this._table = null
        this._cell = null
        this._idToDiv = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.table = PathWidget_table
        this.cell = PathWidget_cell
        this.idToDiv = PathWidget_idToDiv
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setTable = PathWidget_setTable
        this.setCell = PathWidget_setCell
        this.setIdToDiv = PathWidget_setIdToDiv
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.Docked = function () {
        this.__parent = null
        this._top = null
        this._child = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.top = Docked_top
        this.child = Docked_child
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setTop = Docked_setTop
        this.setChild = Docked_setChild
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.SplitterWidget = function () {
        this.__parent = null
        this._leftSplitter = null
        this._rightSplitter = null
        this._leftOverlay = null
        this._rightOverlay = null
        this._dummy = null
        this._mover = null
        this._leftVisible = true
        this._left = 200
        this._rightVisible = true
        this._right = 200
        this._splitterWidth = 6
        this._overlayWidth = 24
        this._isLeft = null
        this._current = null
        this._dragging = null
        this._leftChild = null
        this._middleChild = null
        this._rightChild = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.leftSplitter = SplitterWidget_leftSplitter
        this.rightSplitter = SplitterWidget_rightSplitter
        this.leftOverlay = SplitterWidget_leftOverlay
        this.rightOverlay = SplitterWidget_rightOverlay
        this.dummy = SplitterWidget_dummy
        this.mover = SplitterWidget_mover
        this.leftVisible = SplitterWidget_leftVisible
        this.left = SplitterWidget_left
        this.rightVisible = SplitterWidget_rightVisible
        this.right = SplitterWidget_right
        this.splitterWidth = SplitterWidget_splitterWidth
        this.overlayWidth = SplitterWidget_overlayWidth
        this.isLeft = SplitterWidget_isLeft
        this.current = SplitterWidget_current
        this.dragging = SplitterWidget_dragging
        this.leftChild = SplitterWidget_leftChild
        this.middleChild = SplitterWidget_middleChild
        this.rightChild = SplitterWidget_rightChild
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setLeftSplitter = SplitterWidget_setLeftSplitter
        this.setRightSplitter = SplitterWidget_setRightSplitter
        this.setLeftOverlay = SplitterWidget_setLeftOverlay
        this.setRightOverlay = SplitterWidget_setRightOverlay
        this.setDummy = SplitterWidget_setDummy
        this.setMover = SplitterWidget_setMover
        this.setLeftVisible = SplitterWidget_setLeftVisible
        this.setLeft = SplitterWidget_setLeft
        this.setRightVisible = SplitterWidget_setRightVisible
        this.setRight = SplitterWidget_setRight
        this.setSplitterWidth = SplitterWidget_setSplitterWidth
        this.setOverlayWidth = SplitterWidget_setOverlayWidth
        this.setIsLeft = SplitterWidget_setIsLeft
        this.setCurrent = SplitterWidget_setCurrent
        this.setDragging = SplitterWidget_setDragging
        this.setLeftChild = SplitterWidget_setLeftChild
        this.setMiddleChild = SplitterWidget_setMiddleChild
        this.setRightChild = SplitterWidget_setRightChild
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.StackElementsRow = function () {
        this.__parent = null
        this._widgetId = null
        this._marginTop = null
        this._marginLeft = null
        this.widgetId = StackElementsRow_widgetId
        this.marginTop = StackElementsRow_marginTop
        this.marginLeft = StackElementsRow_marginLeft
        this.setWidgetId = StackElementsRow_setWidgetId
        this.setMarginTop = StackElementsRow_setMarginTop
        this.setMarginLeft = StackElementsRow_setMarginLeft
    }

    this.StackElements = function () {
        this.__parent = null
        this._rows = []
        this.foreach = StackElements_foreach
        this.count = StackElements_count
        this.insertAt = StackElements_insertAt
        this.deleteAt = StackElements_deleteAt
        this.append = StackElements_append
        this.get = StackElements_get
        this.clear = StackElements_clear
        this.sort = StackElements_sort
        this.getList = StackElements_getList
        this.getOrdinal = StackElements_getOrdinal
    }

    this.StackWidget = function () {
        this.__parent = null
        this._left = new _factory.StackElements()
        this._left.__parent = this
        this._right = new _factory.StackElements()
        this._right.__parent = this
        this._middle = null
        this._height = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.left = StackWidget_left
        this.right = StackWidget_right
        this.middle = StackWidget_middle
        this.height = StackWidget_height
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setLeft = StackWidget_setLeft
        this.setRight = StackWidget_setRight
        this.setMiddle = StackWidget_setMiddle
        this.setHeight = StackWidget_setHeight
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.TreeItemsRow = function () {
        this.__parent = null
        this._id = null
        this._isFolder = null
        this._div = null
        this._plus = null
        this._icon = null
        this._textDiv = null
        this._level = null
        this._parent = null
        this._children = []
        this._status = null
        this._image = null
        this._text = null
        this.id = TreeItemsRow_id
        this.isFolder = TreeItemsRow_isFolder
        this.div = TreeItemsRow_div
        this.plus = TreeItemsRow_plus
        this.icon = TreeItemsRow_icon
        this.textDiv = TreeItemsRow_textDiv
        this.level = TreeItemsRow_level
        this.parent = TreeItemsRow_parent
        this.children = TreeItemsRow_children
        this.status = TreeItemsRow_status
        this.image = TreeItemsRow_image
        this.text = TreeItemsRow_text
        this.setId = TreeItemsRow_setId
        this.setIsFolder = TreeItemsRow_setIsFolder
        this.setDiv = TreeItemsRow_setDiv
        this.setPlus = TreeItemsRow_setPlus
        this.setIcon = TreeItemsRow_setIcon
        this.setTextDiv = TreeItemsRow_setTextDiv
        this.setLevel = TreeItemsRow_setLevel
        this.setParent = TreeItemsRow_setParent
        this.setChildren = TreeItemsRow_setChildren
        this.setStatus = TreeItemsRow_setStatus
        this.setImage = TreeItemsRow_setImage
        this.setText = TreeItemsRow_setText
    }

    this.TreeItems = function () {
        this.__parent = null
        this._count = 0
        this.foreach = TreeItems_foreach
        this.count = TreeItems_count
        this.add = TreeItems_add
        this.remove = TreeItems_remove
        this.clear = TreeItems_clear
        this.getList = TreeItems_getList
        this._byId = {}
        this.get = TreeItems_get
    }

    this.TreeView = function () {
        this.__parent = null
        this._items = new _factory.TreeItems()
        this._items.__parent = this
        this._active = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.items = TreeView_items
        this.active = TreeView_active
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setItems = TreeView_setItems
        this.setActive = TreeView_setActive
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.SearchBox = function () {
        this.__parent = null
        this._width = null
        this._height = null
        this._timer = null
        this._button = null
        this._input = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.width = SearchBox_width
        this.height = SearchBox_height
        this.timer = SearchBox_timer
        this.button = SearchBox_button
        this.input = SearchBox_input
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setWidth = SearchBox_setWidth
        this.setHeight = SearchBox_setHeight
        this.setTimer = SearchBox_setTimer
        this.setButton = SearchBox_setButton
        this.setInput = SearchBox_setInput
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.PageWidget = function () {
        this.__parent = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.FolderGrid = function () {
        this.__parent = null
        this._items = new _factory.GridFolders()
        this._items.__parent = this
        this._search = null
        this._grid = null
        this._noItems = null
        this._noItemsHi = null
        this._marked = null
        this._id = null
        this._box = null
        this._div = null
        this._type = null
        this._children = []
        this.items = FolderGrid_items
        this.search = FolderGrid_search
        this.grid = FolderGrid_grid
        this.noItems = FolderGrid_noItems
        this.noItemsHi = FolderGrid_noItemsHi
        this.marked = FolderGrid_marked
        this.id = WidgetsRow_id
        this.box = WidgetsRow_box
        this.div = WidgetsRow_div
        this.type = WidgetsRow_type
        this.children = WidgetsRow_children
        this.setItems = FolderGrid_setItems
        this.setSearch = FolderGrid_setSearch
        this.setGrid = FolderGrid_setGrid
        this.setNoItems = FolderGrid_setNoItems
        this.setNoItemsHi = FolderGrid_setNoItemsHi
        this.setMarked = FolderGrid_setMarked
        this.setId = WidgetsRow_setId
        this.setBox = WidgetsRow_setBox
        this.setDiv = WidgetsRow_setDiv
        this.setType = WidgetsRow_setType
        this.setChildren = WidgetsRow_setChildren
    }

    this.GridFoldersRow = function () {
        this.__parent = null
        this._id = null
        this._folderId = null
        this._spaceId = null
        this._type = null
        this._icon = null
        this._name = null
        this._tr = null
        this._img = null
        this._textTd = null
        this._visible = true
        this._checked = null
        this._marked = null
        this.id = GridFoldersRow_id
        this.folderId = GridFoldersRow_folderId
        this.spaceId = GridFoldersRow_spaceId
        this.type = GridFoldersRow_type
        this.icon = GridFoldersRow_icon
        this.name = GridFoldersRow_name
        this.tr = GridFoldersRow_tr
        this.img = GridFoldersRow_img
        this.textTd = GridFoldersRow_textTd
        this.visible = GridFoldersRow_visible
        this.checked = GridFoldersRow_checked
        this.marked = GridFoldersRow_marked
        this.setId = GridFoldersRow_setId
        this.setFolderId = GridFoldersRow_setFolderId
        this.setSpaceId = GridFoldersRow_setSpaceId
        this.setType = GridFoldersRow_setType
        this.setIcon = GridFoldersRow_setIcon
        this.setName = GridFoldersRow_setName
        this.setTr = GridFoldersRow_setTr
        this.setImg = GridFoldersRow_setImg
        this.setTextTd = GridFoldersRow_setTextTd
        this.setVisible = GridFoldersRow_setVisible
        this.setChecked = GridFoldersRow_setChecked
        this.setMarked = GridFoldersRow_setMarked
    }

    this.GridFolders = function () {
        this.__parent = null
        this._rows = []
        this.foreach = GridFolders_foreach
        this.count = GridFolders_count
        this.insertAt = GridFolders_insertAt
        this.deleteAt = GridFolders_deleteAt
        this.append = GridFolders_append
        this.get = GridFolders_get
        this.clear = GridFolders_clear
        this.sort = GridFolders_sort
        this.getList = GridFolders_getList
        this.getOrdinal = GridFolders_getOrdinal
        this._byId = {}
        this.getById = GridFolders_getById
    }

    this.FolderListRow = function () {
        this.__parent = null
        this._id = null
        this._folderId = null
        this._spaceId = null
        this._name = null
        this._access = null
        this._isPublic = null
        this._type = null
        this._error = null
        this._parent = null
        this.id = FolderListRow_id
        this.folderId = FolderListRow_folderId
        this.spaceId = FolderListRow_spaceId
        this.name = FolderListRow_name
        this.access = FolderListRow_access
        this.isPublic = FolderListRow_isPublic
        this.type = FolderListRow_type
        this.error = FolderListRow_error
        this.parent = FolderListRow_parent
        this.setId = FolderListRow_setId
        this.setFolderId = FolderListRow_setFolderId
        this.setSpaceId = FolderListRow_setSpaceId
        this.setName = FolderListRow_setName
        this.setAccess = FolderListRow_setAccess
        this.setIsPublic = FolderListRow_setIsPublic
        this.setType = FolderListRow_setType
        this.setError = FolderListRow_setError
        this.setParent = FolderListRow_setParent
    }

    this.FolderList = function () {
        this.__parent = null
        this._count = 0
        this.foreach = FolderList_foreach
        this.count = FolderList_count
        this.add = FolderList_add
        this.remove = FolderList_remove
        this.clear = FolderList_clear
        this.getList = FolderList_getList
        this._byId = {}
        this.get = FolderList_get
    }

    this.FolderCache = function () {
        this.__parent = null
        this._folders = new _factory.FolderList()
        this._folders.__parent = this
        this.folders = FolderCache_folders
        this.setFolders = FolderCache_setFolders
    }

    function Root_root() {
        return this._root
    }

    function Root_setRoot(value) {
        this._root = value
    }

    function Root_widgets() {
        return this._widgets
    }

    function Root_setWidgets(value) {
        if (this._widgets !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.widgets: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._widgets) {
                var old = this._widgets
                old.__parent = null
                this._widgets = value
                return old
            } else {
                this._widgets = value
                return null
            }
        }
    }

    function Root_pathWidgets() {
        return this._pathWidgets
    }

    function Root_setPathWidgets(value) {
        this._pathWidgets = value
    }

    function Root_splitter() {
        return this._splitter
    }

    function Root_setSplitter(value) {
        this._splitter = value
    }

    function Root_resizeTimer() {
        return this._resizeTimer
    }

    function Root_setResizeTimer(value) {
        this._resizeTimer = value
    }

    function Root_resizeTimeout() {
        return this._resizeTimeout
    }

    function Root_setResizeTimeout(value) {
        this._resizeTimeout = value
    }

    function Root_clicked() {
        return this._clicked
    }

    function Root_setClicked(value) {
        this._clicked = value
    }

    function Root_isDev() {
        return this._isDev
    }

    function Root_setIsDev(value) {
        this._isDev = value
    }

    function Root_tryMe() {
        return this._tryMe
    }

    function Root_setTryMe(value) {
        this._tryMe = value
    }

    function Root_readOnly() {
        return this._readOnly
    }

    function Root_setReadOnly(value) {
        this._readOnly = value
    }

    function Root_wide() {
        return this._wide
    }

    function Root_setWide(value) {
        this._wide = value
    }

    function Root_userId() {
        return this._userId
    }

    function Root_setUserId(value) {
        this._userId = value
    }

    function Root_doc() {
        return this._doc
    }

    function Root_setDoc(value) {
        if (this._doc !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.doc: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._doc) {
                var old = this._doc
                old.__parent = null
                this._doc = value
                return old
            } else {
                this._doc = value
                return null
            }
        }
    }

    function Root_pageId() {
        return this._pageId
    }

    function Root_setPageId(value) {
        this._pageId = value
    }

    function Root_cache() {
        return this._cache
    }

    function Root_setCache(value) {
        if (this._cache !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.cache: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._cache) {
                var old = this._cache
                old.__parent = null
                this._cache = value
                return old
            } else {
                this._cache = value
                return null
            }
        }
    }

    function Root_path() {
        return this._path
    }

    function Root_setPath(value) {
        if (this._path !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.path: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._path) {
                var old = this._path
                old.__parent = null
                this._path = value
                return old
            } else {
                this._path = value
                return null
            }
        }
    }

    function Root_history() {
        return this._history
    }

    function Root_setHistory(value) {
        if (this._history !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.history: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._history) {
                var old = this._history
                old.__parent = null
                this._history = value
                return old
            } else {
                this._history = value
                return null
            }
        }
    }

    function Root_loadingType() {
        return this._loadingType
    }

    function Root_setLoadingType(value) {
        this._loadingType = value
    }

    function Root_screen() {
        return this._screen
    }

    function Root_setScreen(value) {
        this._screen = value
    }

    function Root_topCodes() {
        return this._topCodes
    }

    function Root_setTopCodes(value) {
        this._topCodes = value
    }

    function Root_topCodesRo() {
        return this._topCodesRo
    }

    function Root_setTopCodesRo(value) {
        this._topCodesRo = value
    }

    function Root_topCodesNu() {
        return this._topCodesNu
    }

    function Root_setTopCodesNu(value) {
        this._topCodesNu = value
    }

    function Root_topCodesTry() {
        return this._topCodesTry
    }

    function Root_setTopCodesTry(value) {
        this._topCodesTry = value
    }

    function Root_centralStack() {
        return this._centralStack
    }

    function Root_setCentralStack(value) {
        this._centralStack = value
    }

    function Root_editor() {
        return this._editor
    }

    function Root_setEditor(value) {
        this._editor = value
    }

    function Root_theme() {
        return this._theme
    }

    function Root_setTheme(value) {
        this._theme = value
    }

    function Root_loadedFonts() {
        return this._loadedFonts
    }

    function Root_setLoadedFonts(value) {
        this._loadedFonts = value
    }

    function Root_saver() {
        return this._saver
    }

    function Root_setSaver(value) {
        this._saver = value
    }

    function Root_pollTimer() {
        return this._pollTimer
    }

    function Root_setPollTimer(value) {
        this._pollTimer = value
    }

    function Root_extendedMenu() {
        return this._extendedMenu
    }

    function Root_setExtendedMenu(value) {
        if (this._extendedMenu !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.extendedMenu: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._extendedMenu) {
                var old = this._extendedMenu
                old.__parent = null
                this._extendedMenu = value
                return old
            } else {
                this._extendedMenu = value
                return null
            }
        }
    }

    function Root_access() {
        return this._access
    }

    function Root_setAccess(value) {
        if (this._access !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.access: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._access) {
                var old = this._access
                old.__parent = null
                this._access = value
                return old
            } else {
                this._access = value
                return null
            }
        }
    }

    function Root_oldAccess() {
        return this._oldAccess
    }

    function Root_setOldAccess(value) {
        if (this._oldAccess !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set Root.oldAccess: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._oldAccess) {
                var old = this._oldAccess
                old.__parent = null
                this._oldAccess = value
                return old
            } else {
                this._oldAccess = value
                return null
            }
        }
    }

    function Root_enterSave() {
        return this._enterSave
    }

    function Root_setEnterSave(value) {
        this._enterSave = value
    }

    function Root_mobileInput() {
        return this._mobileInput
    }

    function Root_setMobileInput(value) {
        this._mobileInput = value
    }

    function Root_mobileSubmit() {
        return this._mobileSubmit
    }

    function Root_setMobileSubmit(value) {
        this._mobileSubmit = value
    }

    function Root_stateType() {
        return this._stateType
    }

    function Root_setStateType(value) {
        this._stateType = value
    }

    function Root_clipboardTimer() {
        return this._clipboardTimer
    }

    function Root_setClipboardTimer(value) {
        this._clipboardTimer = value
    }

    function Access_spaceId() {
        return this._spaceId
    }

    function Access_setSpaceId(value) {
        this._spaceId = value
    }

    function Access_isPublic() {
        return this._isPublic
    }

    function Access_setIsPublic(value) {
        this._isPublic = value
    }

    function Access_roles() {
        return this._roles
    }

    function Access_setRoles(value) {
        this._roles = value
    }

    function PathItemsRow_spaceId() {
        return this._spaceId
    }

    function PathItemsRow_folderId() {
        return this._folderId
    }

    function PathItemsRow_id() {
        return this._id
    }

    function PathItemsRow_nextId() {
        return this._nextId
    }

    function PathItemsRow_setSpaceId(value) {
        this._spaceId = value
    }

    function PathItemsRow_setFolderId(value) {
        this._folderId = value
    }

    function PathItemsRow_setId(value) {
        var old = this._id
        if (old !== value) {
            if (this.__parent) {
                if (!value) {
                    throw new Error("set PathItemsRow.id: cannot put null in an indexed field")
                }
                if (value in this.__parent._byId) {
                    throw new Error("set PathItemsRow.id: value is not unique: " + value)
                }
                if (old) {
                    delete this.__parent._byId[old]
                }
                this.__parent._byId[value] = this
            }
            this._id = value
        }
    }

    function PathItemsRow_setNextId(value) {
        this._nextId = value
    }

    function PathItems_foreach(action) {
        var rows = this._rows
        var length = rows.length
        var i
        for (i = 0; i < length; i++) {
            var row = rows[i]
            var mustExit = action(row, i)
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function PathItems_count() {
        return this._rows.length
    }

    function PathItems_append(row) {
        if (row.__parent) {
            throw new Error("PathItems append: the new row already has a parent")
        }
        if (!row._id) {
            throw new Error("PathItems.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("PathItems.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        var id = this._rows.length
        row.__parent = this
        this._rows.push(row)
        return id
    }

    function PathItems_insertAt(pos, row) {
        if (row.__parent) {
            throw new Error("PathItems insertAt: the new row already has a parent")
        }
        if (pos < 0 || pos > this._rows.length) {
            throw new Error("PathItems insertAt: pos out of range")
        }
        if (!row._id) {
            throw new Error("PathItems.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("PathItems.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        row.__parent = this
        this._rows.splice(pos, 0, row)
        return pos
    }

    function PathItems_deleteAt(pos) {
        if (pos >=0 && pos < this._rows.length) {
            var old = this._rows[pos]
            this._rows.splice(pos, 1)
            delete this._byId[old._id]
            old.__parent = null
            return old
        }
        return null
    }

    function PathItems_get(id) {
        return this._rows[id]
    }

    function PathItems_clear() {
        this._byId = {}
        this._count = 0
        this._rows = []
    }

    function PathItems_sort(comparer) {
        this._rows.sort(comparer)
    }

    function PathItems_getList() {
        return this._rows.slice()
    }

    function PathItems_getOrdinal(row) {
        return this._rows.indexOf(row)
    }

    function PathItems_getById(id) {
        return this._byId[id]
    }

    function ExtendedMenu_item() {
        return this._item
    }

    function ExtendedMenu_setItem(value) {
        this._item = value
    }

    function ExtendedMenu_queryId() {
        return this._queryId
    }

    function ExtendedMenu_setQueryId(value) {
        this._queryId = value
    }

    function ExtendedMenu_urls() {
        return this._urls
    }

    function ExtendedMenu_setUrls(value) {
        this._urls = value
    }

    function HistoryRow_spaceId() {
        return this._spaceId
    }

    function HistoryRow_folderId() {
        return this._folderId
    }

    function HistoryRow_type() {
        return this._type
    }

    function HistoryRow_name() {
        return this._name
    }

    function HistoryRow_id() {
        return this._id
    }

    function HistoryRow_setSpaceId(value) {
        this._spaceId = value
    }

    function HistoryRow_setFolderId(value) {
        this._folderId = value
    }

    function HistoryRow_setType(value) {
        this._type = value
    }

    function HistoryRow_setName(value) {
        this._name = value
    }

    function HistoryRow_setId(value) {
        var old = this._id
        if (old !== value) {
            if (this.__parent) {
                if (!value) {
                    throw new Error("set HistoryRow.id: cannot put null in an indexed field")
                }
                if (value in this.__parent._byId) {
                    throw new Error("set HistoryRow.id: value is not unique: " + value)
                }
                if (old) {
                    delete this.__parent._byId[old]
                }
                this.__parent._byId[value] = this
            }
            this._id = value
        }
    }

    function History_foreach(action) {
        var rows = this._rows
        var length = rows.length
        var i
        for (i = 0; i < length; i++) {
            var row = rows[i]
            var mustExit = action(row, i)
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function History_count() {
        return this._rows.length
    }

    function History_append(row) {
        if (row.__parent) {
            throw new Error("History append: the new row already has a parent")
        }
        if (!row._id) {
            throw new Error("History.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("History.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        var id = this._rows.length
        row.__parent = this
        this._rows.push(row)
        return id
    }

    function History_insertAt(pos, row) {
        if (row.__parent) {
            throw new Error("History insertAt: the new row already has a parent")
        }
        if (pos < 0 || pos > this._rows.length) {
            throw new Error("History insertAt: pos out of range")
        }
        if (!row._id) {
            throw new Error("History.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("History.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        row.__parent = this
        this._rows.splice(pos, 0, row)
        return pos
    }

    function History_deleteAt(pos) {
        if (pos >=0 && pos < this._rows.length) {
            var old = this._rows[pos]
            this._rows.splice(pos, 1)
            delete this._byId[old._id]
            old.__parent = null
            return old
        }
        return null
    }

    function History_get(id) {
        return this._rows[id]
    }

    function History_clear() {
        this._byId = {}
        this._count = 0
        this._rows = []
    }

    function History_sort(comparer) {
        this._rows.sort(comparer)
    }

    function History_getList() {
        return this._rows.slice()
    }

    function History_getOrdinal(row) {
        return this._rows.indexOf(row)
    }

    function History_getById(id) {
        return this._byId[id]
    }

    function Doc_spaceId() {
        return this._spaceId
    }

    function Doc_setSpaceId(value) {
        this._spaceId = value
    }

    function Doc_folderId() {
        return this._folderId
    }

    function Doc_setFolderId(value) {
        this._folderId = value
    }

    function Doc_parent() {
        return this._parent
    }

    function Doc_setParent(value) {
        this._parent = value
    }

    function Doc_access() {
        return this._access
    }

    function Doc_setAccess(value) {
        this._access = value
    }

    function Doc_oldTag() {
        return this._oldTag
    }

    function Doc_setOldTag(value) {
        this._oldTag = value
    }

    function Doc_newTag() {
        return this._newTag
    }

    function Doc_setNewTag(value) {
        this._newTag = value
    }

    function Doc_type() {
        return this._type
    }

    function Doc_setType(value) {
        this._type = value
    }

    function Doc_isPublic() {
        return this._isPublic
    }

    function Doc_setIsPublic(value) {
        this._isPublic = value
    }

    function Box_cX() {
        return this._cX
    }

    function Box_setCX(value) {
        this._cX = value
    }

    function Box_cY() {
        return this._cY
    }

    function Box_setCY(value) {
        this._cY = value
    }

    function Box_pX() {
        return this._pX
    }

    function Box_setPX(value) {
        this._pX = value
    }

    function Box_pY() {
        return this._pY
    }

    function Box_setPY(value) {
        this._pY = value
    }

    function Box_width() {
        return this._width
    }

    function Box_setWidth(value) {
        this._width = value
    }

    function Box_height() {
        return this._height
    }

    function Box_setHeight(value) {
        this._height = value
    }

    function WidgetsRow_id() {
        return this._id
    }

    function WidgetsRow_box() {
        return this._box
    }

    function WidgetsRow_div() {
        return this._div
    }

    function WidgetsRow_type() {
        return this._type
    }

    function WidgetsRow_children() {
        return this._children
    }

    function WidgetsRow_setId(value) {
        var old = this._id
        if (old !== value) {
            if (this.__parent) {
                if (!value) {
                    throw new Error("set WidgetsRow.id: cannot put null in an indexed field")
                }
                if (value in this.__parent._byId) {
                    throw new Error("set WidgetsRow.id: value is not unique: " + value)
                }
                if (old) {
                    delete this.__parent._byId[old]
                }
                this.__parent._byId[value] = this
            }
            this._id = value
        }
    }

    function WidgetsRow_setBox(value) {
        if (this._box !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set WidgetsRow.box: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._box) {
                var old = this._box
                old.__parent = null
                this._box = value
                return old
            } else {
                this._box = value
                return null
            }
        }
    }

    function WidgetsRow_setDiv(value) {
        this._div = value
    }

    function WidgetsRow_setType(value) {
        this._type = value
    }

    function WidgetsRow_setChildren(value) {
        this._children = value
    }

    function Widgets_foreach(action) {
        var index = this._byId
        for (var key in index) {
            var mustExit = action(index[key])
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function Widgets_count() {
        return this._count
    }

    function Widgets_add(row) {
        if (row.__parent) {
            throw new Error("Widgets add: the new row already has a parent")
        }
        if (!row._id) {
            row._id = this._next.toString()
            this._next++
        }
        this._next++
        this._byId[row._id] = row
        this._count++
        row.__parent = this
        return row._id
    }

    function Widgets_remove(id) {
        if (id) {
            if (id in this._byId) {
                var old = this._byId[id]
                this._count--
                delete this._byId[old._id]
                old.__parent = null
                return old
            }
        }
        return null
    }

    function Widgets_clear() {
        this._byId = {}
        this._count = 0
        this._next = 1
    }

    function Widgets_getList() {
        var index = this._byId
        var result = []
        for (var key in index) {
            result.push(index[key])
        }
        return result
    }

    function Widgets_get(id) {
        return this._byId[id]
    }

    function RootWidget_topChild() {
        return this._topChild
    }

    function RootWidget_setTopChild(value) {
        this._topChild = value
    }

    function RootWidget_bottomChild() {
        return this._bottomChild
    }

    function RootWidget_setBottomChild(value) {
        this._bottomChild = value
    }

    function RootWidget_middle() {
        return this._middle
    }

    function RootWidget_setMiddle(value) {
        this._middle = value
    }

    function CheckBox_isChecked() {
        return this._isChecked
    }

    function CheckBox_setIsChecked(value) {
        this._isChecked = value
    }

    function WidgetMapRow_childCode() {
        return this._childCode
    }

    function WidgetMapRow_childId() {
        return this._childId
    }

    function WidgetMapRow_setChildCode(value) {
        var old = this._childCode
        if (old !== value) {
            if (this.__parent) {
                if (!value) {
                    throw new Error("set WidgetMapRow.childCode: cannot put null in an indexed field")
                }
                if (value in this.__parent._byChildCode) {
                    throw new Error("set WidgetMapRow.childCode: value is not unique: " + value)
                }
                if (old) {
                    delete this.__parent._byChildCode[old]
                }
                this.__parent._byChildCode[value] = this
            }
            this._childCode = value
        }
    }

    function WidgetMapRow_setChildId(value) {
        this._childId = value
    }

    function WidgetMap_foreach(action) {
        var index = this._byChildCode
        for (var key in index) {
            var mustExit = action(index[key])
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function WidgetMap_count() {
        return this._count
    }

    function WidgetMap_add(row) {
        if (row.__parent) {
            throw new Error("WidgetMap add: the new row already has a parent")
        }
        if (!row._childCode) {
            throw new Error("WidgetMap.childCode cannot be empty")
        }
        if (row._childCode in this._byChildCode) {
            throw new Error("WidgetMap.childCode is not unique: " + row._childCode)
        }
        this._byChildCode[row._childCode] = row
        this._count++
        row.__parent = this
        return row._childCode
    }

    function WidgetMap_remove(childCode) {
        if (childCode) {
            if (childCode in this._byChildCode) {
                var old = this._byChildCode[childCode]
                this._count--
                delete this._byChildCode[old._childCode]
                old.__parent = null
                return old
            }
        }
        return null
    }

    function WidgetMap_clear() {
        this._byChildCode = {}
        this._count = 0
    }

    function WidgetMap_getList() {
        var index = this._byChildCode
        var result = []
        for (var key in index) {
            result.push(index[key])
        }
        return result
    }

    function WidgetMap_get(childCode) {
        return this._byChildCode[childCode]
    }

    function ManyWidget_current() {
        return this._current
    }

    function ManyWidget_setCurrent(value) {
        this._current = value
    }

    function ManyWidget_height() {
        return this._height
    }

    function ManyWidget_setHeight(value) {
        this._height = value
    }

    function PathWidget_table() {
        return this._table
    }

    function PathWidget_setTable(value) {
        this._table = value
    }

    function PathWidget_cell() {
        return this._cell
    }

    function PathWidget_setCell(value) {
        this._cell = value
    }

    function PathWidget_idToDiv() {
        return this._idToDiv
    }

    function PathWidget_setIdToDiv(value) {
        this._idToDiv = value
    }

    function Docked_top() {
        return this._top
    }

    function Docked_setTop(value) {
        this._top = value
    }

    function Docked_child() {
        return this._child
    }

    function Docked_setChild(value) {
        this._child = value
    }

    function SplitterWidget_leftSplitter() {
        return this._leftSplitter
    }

    function SplitterWidget_setLeftSplitter(value) {
        this._leftSplitter = value
    }

    function SplitterWidget_rightSplitter() {
        return this._rightSplitter
    }

    function SplitterWidget_setRightSplitter(value) {
        this._rightSplitter = value
    }

    function SplitterWidget_leftOverlay() {
        return this._leftOverlay
    }

    function SplitterWidget_setLeftOverlay(value) {
        this._leftOverlay = value
    }

    function SplitterWidget_rightOverlay() {
        return this._rightOverlay
    }

    function SplitterWidget_setRightOverlay(value) {
        this._rightOverlay = value
    }

    function SplitterWidget_dummy() {
        return this._dummy
    }

    function SplitterWidget_setDummy(value) {
        this._dummy = value
    }

    function SplitterWidget_mover() {
        return this._mover
    }

    function SplitterWidget_setMover(value) {
        this._mover = value
    }

    function SplitterWidget_leftVisible() {
        return this._leftVisible
    }

    function SplitterWidget_setLeftVisible(value) {
        this._leftVisible = value
    }

    function SplitterWidget_left() {
        return this._left
    }

    function SplitterWidget_setLeft(value) {
        this._left = value
    }

    function SplitterWidget_rightVisible() {
        return this._rightVisible
    }

    function SplitterWidget_setRightVisible(value) {
        this._rightVisible = value
    }

    function SplitterWidget_right() {
        return this._right
    }

    function SplitterWidget_setRight(value) {
        this._right = value
    }

    function SplitterWidget_splitterWidth() {
        return this._splitterWidth
    }

    function SplitterWidget_setSplitterWidth(value) {
        this._splitterWidth = value
    }

    function SplitterWidget_overlayWidth() {
        return this._overlayWidth
    }

    function SplitterWidget_setOverlayWidth(value) {
        this._overlayWidth = value
    }

    function SplitterWidget_isLeft() {
        return this._isLeft
    }

    function SplitterWidget_setIsLeft(value) {
        this._isLeft = value
    }

    function SplitterWidget_current() {
        return this._current
    }

    function SplitterWidget_setCurrent(value) {
        this._current = value
    }

    function SplitterWidget_dragging() {
        return this._dragging
    }

    function SplitterWidget_setDragging(value) {
        this._dragging = value
    }

    function SplitterWidget_leftChild() {
        return this._leftChild
    }

    function SplitterWidget_setLeftChild(value) {
        this._leftChild = value
    }

    function SplitterWidget_middleChild() {
        return this._middleChild
    }

    function SplitterWidget_setMiddleChild(value) {
        this._middleChild = value
    }

    function SplitterWidget_rightChild() {
        return this._rightChild
    }

    function SplitterWidget_setRightChild(value) {
        this._rightChild = value
    }

    function StackElementsRow_widgetId() {
        return this._widgetId
    }

    function StackElementsRow_marginTop() {
        return this._marginTop
    }

    function StackElementsRow_marginLeft() {
        return this._marginLeft
    }

    function StackElementsRow_setWidgetId(value) {
        this._widgetId = value
    }

    function StackElementsRow_setMarginTop(value) {
        this._marginTop = value
    }

    function StackElementsRow_setMarginLeft(value) {
        this._marginLeft = value
    }

    function StackElements_foreach(action) {
        var rows = this._rows
        var length = rows.length
        var i
        for (i = 0; i < length; i++) {
            var row = rows[i]
            var mustExit = action(row, i)
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function StackElements_count() {
        return this._rows.length
    }

    function StackElements_append(row) {
        if (row.__parent) {
            throw new Error("StackElements append: the new row already has a parent")
        }
        var id = this._rows.length
        row.__parent = this
        this._rows.push(row)
        return id
    }

    function StackElements_insertAt(pos, row) {
        if (row.__parent) {
            throw new Error("StackElements insertAt: the new row already has a parent")
        }
        if (pos < 0 || pos > this._rows.length) {
            throw new Error("StackElements insertAt: pos out of range")
        }
        row.__parent = this
        this._rows.splice(pos, 0, row)
        return pos
    }

    function StackElements_deleteAt(pos) {
        if (pos >=0 && pos < this._rows.length) {
            var old = this._rows[pos]
            this._rows.splice(pos, 1)
            old.__parent = null
            return old
        }
        return null
    }

    function StackElements_get(id) {
        return this._rows[id]
    }

    function StackElements_clear() {
        this._count = 0
        this._rows = []
    }

    function StackElements_sort(comparer) {
        this._rows.sort(comparer)
    }

    function StackElements_getList() {
        return this._rows.slice()
    }

    function StackElements_getOrdinal(row) {
        return this._rows.indexOf(row)
    }

    function StackWidget_left() {
        return this._left
    }

    function StackWidget_setLeft(value) {
        if (this._left !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set StackWidget.left: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._left) {
                var old = this._left
                old.__parent = null
                this._left = value
                return old
            } else {
                this._left = value
                return null
            }
        }
    }

    function StackWidget_right() {
        return this._right
    }

    function StackWidget_setRight(value) {
        if (this._right !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set StackWidget.right: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._right) {
                var old = this._right
                old.__parent = null
                this._right = value
                return old
            } else {
                this._right = value
                return null
            }
        }
    }

    function StackWidget_middle() {
        return this._middle
    }

    function StackWidget_setMiddle(value) {
        this._middle = value
    }

    function StackWidget_height() {
        return this._height
    }

    function StackWidget_setHeight(value) {
        this._height = value
    }

    function TreeItemsRow_id() {
        return this._id
    }

    function TreeItemsRow_isFolder() {
        return this._isFolder
    }

    function TreeItemsRow_div() {
        return this._div
    }

    function TreeItemsRow_plus() {
        return this._plus
    }

    function TreeItemsRow_icon() {
        return this._icon
    }

    function TreeItemsRow_textDiv() {
        return this._textDiv
    }

    function TreeItemsRow_level() {
        return this._level
    }

    function TreeItemsRow_parent() {
        return this._parent
    }

    function TreeItemsRow_children() {
        return this._children
    }

    function TreeItemsRow_status() {
        return this._status
    }

    function TreeItemsRow_image() {
        return this._image
    }

    function TreeItemsRow_text() {
        return this._text
    }

    function TreeItemsRow_setId(value) {
        var old = this._id
        if (old !== value) {
            if (this.__parent) {
                if (!value) {
                    throw new Error("set TreeItemsRow.id: cannot put null in an indexed field")
                }
                if (value in this.__parent._byId) {
                    throw new Error("set TreeItemsRow.id: value is not unique: " + value)
                }
                if (old) {
                    delete this.__parent._byId[old]
                }
                this.__parent._byId[value] = this
            }
            this._id = value
        }
    }

    function TreeItemsRow_setIsFolder(value) {
        this._isFolder = value
    }

    function TreeItemsRow_setDiv(value) {
        this._div = value
    }

    function TreeItemsRow_setPlus(value) {
        this._plus = value
    }

    function TreeItemsRow_setIcon(value) {
        this._icon = value
    }

    function TreeItemsRow_setTextDiv(value) {
        this._textDiv = value
    }

    function TreeItemsRow_setLevel(value) {
        this._level = value
    }

    function TreeItemsRow_setParent(value) {
        this._parent = value
    }

    function TreeItemsRow_setChildren(value) {
        this._children = value
    }

    function TreeItemsRow_setStatus(value) {
        this._status = value
    }

    function TreeItemsRow_setImage(value) {
        this._image = value
    }

    function TreeItemsRow_setText(value) {
        this._text = value
    }

    function TreeItems_foreach(action) {
        var index = this._byId
        for (var key in index) {
            var mustExit = action(index[key])
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function TreeItems_count() {
        return this._count
    }

    function TreeItems_add(row) {
        if (row.__parent) {
            throw new Error("TreeItems add: the new row already has a parent")
        }
        if (!row._id) {
            throw new Error("TreeItems.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("TreeItems.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        this._count++
        row.__parent = this
        return row._id
    }

    function TreeItems_remove(id) {
        if (id) {
            if (id in this._byId) {
                var old = this._byId[id]
                this._count--
                delete this._byId[old._id]
                old.__parent = null
                return old
            }
        }
        return null
    }

    function TreeItems_clear() {
        this._byId = {}
        this._count = 0
    }

    function TreeItems_getList() {
        var index = this._byId
        var result = []
        for (var key in index) {
            result.push(index[key])
        }
        return result
    }

    function TreeItems_get(id) {
        return this._byId[id]
    }

    function TreeView_items() {
        return this._items
    }

    function TreeView_setItems(value) {
        if (this._items !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set TreeView.items: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._items) {
                var old = this._items
                old.__parent = null
                this._items = value
                return old
            } else {
                this._items = value
                return null
            }
        }
    }

    function TreeView_active() {
        return this._active
    }

    function TreeView_setActive(value) {
        this._active = value
    }

    function SearchBox_width() {
        return this._width
    }

    function SearchBox_setWidth(value) {
        this._width = value
    }

    function SearchBox_height() {
        return this._height
    }

    function SearchBox_setHeight(value) {
        this._height = value
    }

    function SearchBox_timer() {
        return this._timer
    }

    function SearchBox_setTimer(value) {
        this._timer = value
    }

    function SearchBox_button() {
        return this._button
    }

    function SearchBox_setButton(value) {
        this._button = value
    }

    function SearchBox_input() {
        return this._input
    }

    function SearchBox_setInput(value) {
        this._input = value
    }

    function FolderGrid_items() {
        return this._items
    }

    function FolderGrid_setItems(value) {
        if (this._items !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set FolderGrid.items: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._items) {
                var old = this._items
                old.__parent = null
                this._items = value
                return old
            } else {
                this._items = value
                return null
            }
        }
    }

    function FolderGrid_search() {
        return this._search
    }

    function FolderGrid_setSearch(value) {
        this._search = value
    }

    function FolderGrid_grid() {
        return this._grid
    }

    function FolderGrid_setGrid(value) {
        this._grid = value
    }

    function FolderGrid_noItems() {
        return this._noItems
    }

    function FolderGrid_setNoItems(value) {
        this._noItems = value
    }

    function FolderGrid_noItemsHi() {
        return this._noItemsHi
    }

    function FolderGrid_setNoItemsHi(value) {
        this._noItemsHi = value
    }

    function FolderGrid_marked() {
        return this._marked
    }

    function FolderGrid_setMarked(value) {
        this._marked = value
    }

    function GridFoldersRow_id() {
        return this._id
    }

    function GridFoldersRow_folderId() {
        return this._folderId
    }

    function GridFoldersRow_spaceId() {
        return this._spaceId
    }

    function GridFoldersRow_type() {
        return this._type
    }

    function GridFoldersRow_icon() {
        return this._icon
    }

    function GridFoldersRow_name() {
        return this._name
    }

    function GridFoldersRow_tr() {
        return this._tr
    }

    function GridFoldersRow_img() {
        return this._img
    }

    function GridFoldersRow_textTd() {
        return this._textTd
    }

    function GridFoldersRow_visible() {
        return this._visible
    }

    function GridFoldersRow_checked() {
        return this._checked
    }

    function GridFoldersRow_marked() {
        return this._marked
    }

    function GridFoldersRow_setId(value) {
        var old = this._id
        if (old !== value) {
            if (this.__parent) {
                if (!value) {
                    throw new Error("set GridFoldersRow.id: cannot put null in an indexed field")
                }
                if (value in this.__parent._byId) {
                    throw new Error("set GridFoldersRow.id: value is not unique: " + value)
                }
                if (old) {
                    delete this.__parent._byId[old]
                }
                this.__parent._byId[value] = this
            }
            this._id = value
        }
    }

    function GridFoldersRow_setFolderId(value) {
        this._folderId = value
    }

    function GridFoldersRow_setSpaceId(value) {
        this._spaceId = value
    }

    function GridFoldersRow_setType(value) {
        this._type = value
    }

    function GridFoldersRow_setIcon(value) {
        this._icon = value
    }

    function GridFoldersRow_setName(value) {
        this._name = value
    }

    function GridFoldersRow_setTr(value) {
        this._tr = value
    }

    function GridFoldersRow_setImg(value) {
        this._img = value
    }

    function GridFoldersRow_setTextTd(value) {
        this._textTd = value
    }

    function GridFoldersRow_setVisible(value) {
        this._visible = value
    }

    function GridFoldersRow_setChecked(value) {
        this._checked = value
    }

    function GridFoldersRow_setMarked(value) {
        this._marked = value
    }

    function GridFolders_foreach(action) {
        var rows = this._rows
        var length = rows.length
        var i
        for (i = 0; i < length; i++) {
            var row = rows[i]
            var mustExit = action(row, i)
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function GridFolders_count() {
        return this._rows.length
    }

    function GridFolders_append(row) {
        if (row.__parent) {
            throw new Error("GridFolders append: the new row already has a parent")
        }
        if (!row._id) {
            throw new Error("GridFolders.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("GridFolders.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        var id = this._rows.length
        row.__parent = this
        this._rows.push(row)
        return id
    }

    function GridFolders_insertAt(pos, row) {
        if (row.__parent) {
            throw new Error("GridFolders insertAt: the new row already has a parent")
        }
        if (pos < 0 || pos > this._rows.length) {
            throw new Error("GridFolders insertAt: pos out of range")
        }
        if (!row._id) {
            throw new Error("GridFolders.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("GridFolders.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        row.__parent = this
        this._rows.splice(pos, 0, row)
        return pos
    }

    function GridFolders_deleteAt(pos) {
        if (pos >=0 && pos < this._rows.length) {
            var old = this._rows[pos]
            this._rows.splice(pos, 1)
            delete this._byId[old._id]
            old.__parent = null
            return old
        }
        return null
    }

    function GridFolders_get(id) {
        return this._rows[id]
    }

    function GridFolders_clear() {
        this._byId = {}
        this._count = 0
        this._rows = []
    }

    function GridFolders_sort(comparer) {
        this._rows.sort(comparer)
    }

    function GridFolders_getList() {
        return this._rows.slice()
    }

    function GridFolders_getOrdinal(row) {
        return this._rows.indexOf(row)
    }

    function GridFolders_getById(id) {
        return this._byId[id]
    }

    function FolderListRow_id() {
        return this._id
    }

    function FolderListRow_folderId() {
        return this._folderId
    }

    function FolderListRow_spaceId() {
        return this._spaceId
    }

    function FolderListRow_name() {
        return this._name
    }

    function FolderListRow_access() {
        return this._access
    }

    function FolderListRow_isPublic() {
        return this._isPublic
    }

    function FolderListRow_type() {
        return this._type
    }

    function FolderListRow_error() {
        return this._error
    }

    function FolderListRow_parent() {
        return this._parent
    }

    function FolderListRow_setId(value) {
        var old = this._id
        if (old !== value) {
            if (this.__parent) {
                if (!value) {
                    throw new Error("set FolderListRow.id: cannot put null in an indexed field")
                }
                if (value in this.__parent._byId) {
                    throw new Error("set FolderListRow.id: value is not unique: " + value)
                }
                if (old) {
                    delete this.__parent._byId[old]
                }
                this.__parent._byId[value] = this
            }
            this._id = value
        }
    }

    function FolderListRow_setFolderId(value) {
        this._folderId = value
    }

    function FolderListRow_setSpaceId(value) {
        this._spaceId = value
    }

    function FolderListRow_setName(value) {
        this._name = value
    }

    function FolderListRow_setAccess(value) {
        this._access = value
    }

    function FolderListRow_setIsPublic(value) {
        this._isPublic = value
    }

    function FolderListRow_setType(value) {
        this._type = value
    }

    function FolderListRow_setError(value) {
        this._error = value
    }

    function FolderListRow_setParent(value) {
        this._parent = value
    }

    function FolderList_foreach(action) {
        var index = this._byId
        for (var key in index) {
            var mustExit = action(index[key])
            if (mustExit) {
                return true
            }
        }
        return false
    }

    function FolderList_count() {
        return this._count
    }

    function FolderList_add(row) {
        if (row.__parent) {
            throw new Error("FolderList add: the new row already has a parent")
        }
        if (!row._id) {
            throw new Error("FolderList.id cannot be empty")
        }
        if (row._id in this._byId) {
            throw new Error("FolderList.id is not unique: " + row._id)
        }
        this._byId[row._id] = row
        this._count++
        row.__parent = this
        return row._id
    }

    function FolderList_remove(id) {
        if (id) {
            if (id in this._byId) {
                var old = this._byId[id]
                this._count--
                delete this._byId[old._id]
                old.__parent = null
                return old
            }
        }
        return null
    }

    function FolderList_clear() {
        this._byId = {}
        this._count = 0
    }

    function FolderList_getList() {
        var index = this._byId
        var result = []
        for (var key in index) {
            result.push(index[key])
        }
        return result
    }

    function FolderList_get(id) {
        return this._byId[id]
    }

    function FolderCache_folders() {
        return this._folders
    }

    function FolderCache_setFolders(value) {
        if (this._folders !== value) {
            if (value) {
                if (value.__parent) {
                    throw new Error("set FolderCache.folders: the new value already has a parent")
                }
                value.__parent = this
            }
            if (this._folders) {
                var old = this._folders
                old.__parent = null
                this._folders = value
                return old
            } else {
                this._folders = value
                return null
            }
        }
    }
}
if (typeof exports !== "undefined") {
    var obj = new IdeModel()
    for (var name in obj) {
        exports[name] = obj[name]
    }
}