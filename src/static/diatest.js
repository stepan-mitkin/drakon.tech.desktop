(function() {

var PINK = "#ff9090";
var SALAT = "#90ff90";
var EGG = "#ffff90";

var CODE_A = "A".charCodeAt(0);
var CODE_Z = "Z".charCodeAt(0);
var CODE_a = "a".charCodeAt(0);
var CODE_z = "z".charCodeAt(0);
var CODE_0 = "0".charCodeAt(0);
var CODE_9 = "9".charCodeAt(0);

var gClipboard = {}

var app = angular.module("diaTestApp", ["ngRoute"]);

var gActions = {
	dummySuccess: dummySuccess,
	dummyFailure: dummyFailure,
	dummyException: dummyException,
	addIcon: addIcon,
	toSilhouette: toSilhouette,
	toPrimitive: toPrimitive,
	deleteIcon: deleteIcon,
	deletePath: deletePath,
	canDelete: canDelete,
	setItemWidth: setItemWidth,
	setItemText: setItemText,
	collapseBolt: collapseBolt,
	expandBolt: expandBolt,
	renameBranch: renameBranch,
	liana: liana,
	detectOuterCycle: detectOuterCycle,
	detectInternalCycle: detectInternalCycle,
	findCycleStartCandidates: findCycleStartCandidates,
	blockDelete: blockDelete,
	addIconAndUndo: addIconAndUndo,
	blockCopyPaste: blockCopyPaste,
	toFront: toFront,
	toBack: toBack,
	moveHor: moveHor,
	moveVer: moveVer
};

// Autogenerated with DRAKON Editor 1.32


function DiaTestCtrl(self, injection) {
    // item 7
    self.injection = injection;
    // item 34
    self.run = run;
    self.runAll = runAll;
    self.createTest = createTest;
    self.deleteTest = deleteTest;
    self.saveTest = saveTest;
    self.stop = stop;
    self.selectFixture = selectFixture;
    self.itemBackground = itemBackground;
    self.itemColor = itemColor;
    // item 6
    self.idle = true;
    self.status = "Ready";
    self.runStatus = "Working...";
    self.formVisibility = "collapse";
    self.fixtures = {};
    self.list = [];
    // item 41
    self.fixture = null;
    // item 335
    pullFromServer(
    	self
    );
}

function FakePersistence() {
    // item 610
    var self = this;
    
    self.add = function(item) {
    
    }
    
    self.remove = function(id) {
    
    }
    
    self.update = function(item) {
    }
    
    self.updateDiagram = function(name) {
    	self.name = name;
    }
    
    
    self.persist = function() {
    
    }
}

function Fixture() {
    // item 60
    this.group = "";
    this.name = "";
    this.diagram = "";
    this.action = "";
    this.args = "";
    this.expected = "";
    this.oldId = null;
    this.actual = "";
    this.status = "";
    this.error = "";
}

function Group(name) {
    // item 105
    this.name = name;
    this.members = [];
}

function TestResult(success, actual, error) {
    // item 664
    this.success = success;
    this.error = error || "";
    this.actual = actual;
}

function addIcon(input, args, expected) {
    // item 763
    var edgeId = args[0];
    var type = args[1];
    var text = args[2];
    // item 626
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.insertItem(
    			editor,
    			edgeId,
    			type,
    			text
    		);
    	},
    	expected
    );
    // item 768
    return result;
}

function addIconAndUndo(input, args, expected) {
    // item 1044
    var edgeId = args[0];
    var type = args[1];
    var text = args[2];
    // item 1042
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.insertItem(
    			editor,
    			edgeId,
    			type,
    			text
    		);
    		editor.performUndo()
    	},
    	expected
    );
    // item 1045
    return result;
}

function assertDiagram(editor, diagram) {
    // item 1106
    var free
    // item 1107
    if ((editor.storage.free) && (editor.storage.free.list.length)) {
        // item 1111
        free = editor.storage.free.set
    } else {
        // item 1110
        free = null
    }
    // item 657
    var obj = JSON.parse(diagram);
    var expected = Utils.sanitizeDiagram(obj);
    var stored = {
    	name: editor.storage.name,
    	edges: editor.storage.graph.edges,
    	nodes: editor.storage.graph.nodes,
    	free: free
    }
    var actual = Utils.sanitizeDiagram(stored);
    // item 746
    var actualJ = editor.diagramToJson(actual);
    // item 1114
    delete expected.type
    delete actual.type
    delete expected.font
    delete actual.font
    // item 743
    if (setsDeepEqual(expected, actual)) {
        // item 1009
        return new TestResult(
        	true,
        	actualJ,
        	""
        );
    } else {
        // item 748
        console.log(actualJ);
        // item 1010
        return new TestResult(
        	false,
        	actualJ,
        	"Diagram comparison failed"
        );
    }
}

function badSymbol(chr) {
    // item 198
    if (((chr == " ") || (chr == "_")) || (chr == "-")) {
        // item 203
        return false;
    } else {
        // item 241
        var code = chr.charCodeAt(0);
        // item 205
        if ((isDigit(code)) || (isLetter(code))) {
            // item 203
            return false;
        } else {
            // item 204
            return true;
        }
    }
}

function blockCopyPaste(input, args, expected) {
    // item 1070
    var src = args[0]
    var dst = args[1]
    // item 1068
    var editor = makeEditor();
    // item 1060
    setTestDiagram(editor, input);
    // item 1069
    var graph = editor.storage.graph;
    // item 1058
    editor.beginBlockSelect();
    // item 1063
    var node = graph.getNode(src);
    var box = new Utils.Box(
    	node.x, node.y,
    	node.x + 2, node.y + 2
    );
    // item 1064
    editor.blockSelect(box);
    // item 1065
    editor.copy()
    // item 1071
    editor.test.pasteBlock(editor, dst)
    // item 1066
    var check = assertDiagram(editor, expected);
    // item 1067
    return check;
}

function blockDelete(input, args, expected) {
    // item 1014
    var editor = makeEditor();
    // item 995
    setTestDiagram(editor, input);
    // item 1015
    var graph = editor.storage.graph;
    // item 992
    editor.beginBlockSelect();
    // item 10010001
    var _ind1001 = 0;
    var _col1001 = args;
    var _len1001 = _col1001.length;
    while (true) {
        // item 10010002
        if (_ind1001 < _len1001) {
            
        } else {
            break;
        }
        // item 10010004
        var id = _col1001[_ind1001];
        // item 1003
        var node = graph.getNode(id);
        var box = new Utils.Box(
        	node.x, node.y,
        	node.x + 2, node.y + 2
        );
        // item 1004
        editor.blockSelect(box);
        // item 10010003
        _ind1001++;
    }
    // item 1005
    editor.deleteSelection();
    // item 1012
    var check = assertDiagram(editor, expected);
    // item 1013
    return check;
}

function buildId(fixture) {
    // item 67
    return fixture.group.trim() + "--" + fixture.name.trim();
}

function buildResultMessage(self) {
    // item 466
    var message = self.tests.length + " total, " +
    	self.errorCount + " errors, " +
    	self.successCount + " successful, " +
    	self.exceptionCount + " exceptions.";
    // item 476
    if (self.interrupted) {
        // item 479
        message = "Interrupted by user. " + message;
    }
    // item 467
    self.status = message;
}

function buildTaskList(self) {
    // item 436
    var tests = [];
    // item 4370001
    var _ind437 = 0;
    var _col437 = self.list;
    var _len437 = _col437.length;
    while (true) {
        // item 4370002
        if (_ind437 < _len437) {
            
        } else {
            break;
        }
        // item 4370004
        var item = _col437[_ind437];
        // item 440
        if (item.type == "group") {
            
        } else {
            // item 439
            item.status = "";
            // item 443
            tests.push(item);
        }
        // item 4370003
        _ind437++;
    }
    // item 444
    self.tests = tests;
    self.nextTest = 0;
}

function byName(left, right) {
    // item 143
    var leftKey = left.name;
    var rightKey = right.name;
    // item 144
    return leftKey.localeCompare(rightKey);
}

function canDelete(input, args, expected) {
    // item 818
    var itemId = args[0];
    var expectedBool = Utils.parseBool(expected);
    // item 809
    var editor = makeEditor();
    // item 810
    setTestDiagram(editor, input);
    // item 820
    var item = editor.storage.graph.getNode(
    	itemId
    );
    // item 811
    var actual = editor.test.canDeleteItem(
    	editor,
    	item
    );
    // item 819
    var actualBool = Utils.parseBool(actual);
    // item 813
    if (actualBool === expectedBool) {
        // item 816
        return new TestResult(
        	true,
        	String(actual),
        	""
        );
    } else {
        // item 817
        return new TestResult(
        	false,
        	String(actual),
        	"canDeleteItem returned wrong value"
        );
    }
}

function co(text) {
    // item 762
    return new Utils.Content(text, "");
}

function collapseBolt(input, args, expected) {
    // item 855
    var itemId = args[0];
    // item 857
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.collapseBolt(
    			editor,
    			itemId
    		);
    	},
    	expected
    );
    // item 858
    return result;
}

function copyToClipboard(type, item) {
    // item 1077
    gClipboard.type = type
    gClipboard.item = item
}

function createTest() {
    // item 19
    this.current = new Fixture();
    // item 379
    deselectFixtures(this);
}

function deleteFromServer(self, id) {
    // item 319
    console.log("delete", id);
    // item 339
    self.injection.$http({
    	method: "DELETE",
    	url: "/api/diatest/" + id,
    	data: {}
    }).then(
    	function(data) {
    		console.log("DELETE successful");
    	},
    	function(data) {
    		console.log("DELETE returned error", data);
    	}
    );
}

function deleteIcon(input, args, expected) {
    // item 793
    var itemId = args[0];
    // item 791
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.deleteItem(
    			editor,
    			itemId
    		);
    	},
    	expected
    );
    // item 794
    return result;
}

function deletePath(input, args, expected) {
    // item 801
    var itemId = args[0];
    // item 799
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.deletePath(
    			editor,
    			itemId
    		);
    	},
    	expected
    );
    // item 802
    return result;
}

function deleteTest() {
    // item 280
    var fixture = this.current;
    // item 279
    remove(
    	this,
    	fixture.oldId
    );
    // item 24
    this.current = null;
    // item 380
    deselectFixtures(this);
}

function deselectFixtures(self) {
    // item 3760001
    var _ind376 = 0;
    var _col376 = self.list;
    var _len376 = _col376.length;
    while (true) {
        // item 3760002
        if (_ind376 < _len376) {
            
        } else {
            break;
        }
        // item 3760004
        var other = _col376[_ind376];
        // item 378
        other.selected = false;
        // item 3760003
        _ind376++;
    }
}

function detectCycleCore(input, args, expected, internal) {
    // item 946
    var source = args[0];
    var targets = args.slice(1);
    var exp = Utils.parseBool(expected);
    // item 947
    var editor = makeEditor();
    // item 948
    setTestDiagram(editor, input);
    // item 951
    var actual = [];
    var graph = editor.storage.graph;
    var success = true;
    // item 964
    var action;
    // item 965
    if (internal) {
        // item 969
        action = editor.test.detectInternalCycle;
    } else {
        // item 968
        action = editor.test.detectOuterCycle;
    }
    // item 9490001
    var _ind949 = 0;
    var _col949 = targets;
    var _len949 = _col949.length;
    while (true) {
        // item 9490002
        if (_ind949 < _len949) {
            
        } else {
            break;
        }
        // item 9490004
        var dst = _col949[_ind949];
        // item 955
        var detected = action(
        	graph,
        	source,
        	dst
        );
        // item 956
        actual.push(detected);
        // item 952
        if (detected == exp) {
            
        } else {
            // item 957
            success = false;
        }
        // item 9490003
        _ind949++;
    }
    // item 963
    var actualStr = actual.join(", ");
    // item 958
    if (success) {
        // item 961
        return new TestResult(
        	true,
        	actualStr,
        	""
        );
    } else {
        // item 962
        return new TestResult(
        	false,
        	actualStr,
        	"Cycles (not )detected wrong"
        );
    }
}

function detectInternalCycle(input, args, expected) {
    // item 923
    return detectCycleCore(
    	input,
    	args,
    	expected,
    	true
    );
}

function detectOuterCycle(input, args, expected) {
    // item 970
    return detectCycleCore(
    	input,
    	args,
    	expected,
    	false
    );
}

function diagramAction(input, action, expected) {
    // item 621
    var editor = makeEditor();
    // item 650
    setTestDiagram(editor, input);
    // item 651
    action(editor);
    // item 751
    var check = assertDiagram(editor, expected);
    // item 1049
    if (check.success) {
        // item 1046
        editor.performUndo()
        // item 1048
        check = assertDiagram(editor, input)
        // item 1052
        if (check.success) {
            // item 1047
            editor.performRedo()
            // item 1053
            check = assertDiagram(editor, expected)
        }
    }
    // item 1011
    return check;
}

function dummyException(input, args, expected) {
    // item 594
    throw "Dummy exception";
}

function dummyFailure(input, args, expected) {
    // item 588
    return new TestResult(
    	false,
    	"what the hell?",
    	"This is a dummy failure"
    );
}

function dummySuccess(input, args, expected) {
    // item 665
    return new TestResult(
    	true,
    	expected,
    	""
    );
}

function expandBolt(input, args, expected) {
    // item 863
    var itemId = args[0];
    // item 865
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.expandBolt(
    			editor,
    			itemId
    		);
    	},
    	expected
    );
    // item 866
    return result;
}

function findAction(name) {
    // item 576
    return gActions[name];
}

function findCycleStartCandidates(input, args, expected) {
    // item 977
    var source = args[0];
    var exp = parseArguments(expected);
    exp = exp.join(", ");
    // item 978
    var editor = makeEditor();
    // item 979
    setTestDiagram(editor, input);
    editor.redraw();
    // item 985
    var graph = editor.canvas.graph;
    var sourceItem = graph.getItem(source);
    // item 986
    var candidates = 
    editor.test.findCycleStartCandidates(
    	graph,
    	sourceItem,
    	sourceItem.upperMark
    );
    // item 987
    var actual = candidates.join(", ");
    // item 980
    if (actual == exp) {
        // item 983
        return new TestResult(
        	true,
        	actual,
        	""
        );
    } else {
        // item 984
        return new TestResult(
        	false,
        	actual,
        	"Wrong list of candidates"
        );
    }
}

function findFixtureError(fixture) {
    // item 178
    var group = fixture.group.trim();
    var name = fixture.name.trim();
    var action = fixture.action.trim();
    var expected = fixture.expected.trim();
    // item 163
    if (group) {
        // item 167
        if (name) {
            // item 171
            if (action) {
                // item 175
                if (expected) {
                    // item 243
                    if (group.length > 20) {
                        // item 247
                        return "Group is too long";
                    } else {
                        // item 245
                        if (name.length > 60) {
                            // item 248
                            return "Name is too long";
                        } else {
                            // item 250
                            if (goodSymbols(group)) {
                                // item 253
                                if (goodSymbols(name)) {
                                    // item 337
                                    fixture.group = group;
                                    fixture.name = name;
                                    fixture.diagram = fixture.diagram.trim();
                                    fixture.action = action;
                                    fixture.args = fixture.args.trim();
                                    fixture.expected = expected;
                                    // item 249
                                    return "";
                                } else {
                                    // item 255
                                    return "Name contains bad symbols";
                                }
                            } else {
                                // item 252
                                return "Group contains bad symbols";
                            }
                        }
                    }
                } else {
                    // item 179
                    return "Expected is empty";
                }
            } else {
                // item 174
                return "Action is empty";
            }
        } else {
            // item 170
            return "Name is empty";
        }
    } else {
        // item 166
        return "Group is empty";
    }
}

function getClipboard() {
    // item 1082
    return gClipboard.item
}

function getClipboardType() {
    // item 1087
    return gClipboard.type
}

function getOrCreateGroup(groups, name) {
    // item 114
    var group;
    // item 111
    if (name in groups) {
        // item 116
        group = groups[name];
    } else {
        // item 115
        group = new Group(name);
        // item 117
        groups[name] = group;
    }
    // item 118
    return group;
}

function goodSymbols(text) {
    // item 1850001
    var i = 0;
    while (true) {
        // item 1850002
        if (i < text.length) {
            
        } else {
            // item 191
            return true;
        }
        // item 190
        var chr = text.charAt(i);
        // item 187
        if (badSymbol(chr)) {
            // item 192
            return false;
        }
        // item 1850003
        i++;
    }
}

function idToGroupName(fixture) {
    // item 346
    var id = fixture.id;
    delete fixture.id;
    // item 347
    var parts = id.split("--");
    fixture.group = parts[0];
    fixture.name = parts[1];
    fixture.oldId = id;
    // item 348
    return id;
}

function isDigit(code) {
    // item 231
    if ((code >= CODE_0) && (code <= CODE_9)) {
        // item 239
        return true;
    } else {
        // item 240
        return false;
    }
}

function isLetter(code) {
    // item 213
    if (((code >= CODE_A) && (code <= CODE_Z)) || ((code >= CODE_a) && (code <= CODE_z))) {
        // item 221
        return true;
    } else {
        // item 222
        return false;
    }
}

function itemBackground(item) {
    var _sw6680000_ = 0;
    // item 366
    if (item.selected) {
        // item 365
        return "black";
    } else {
        // item 764
        if (item.id) {
            // item 680
            var fixture = this.fixtures[item.id];
            // item 6680000
            _sw6680000_ = fixture.status;
            // item 6680001
            if (_sw6680000_ === "success") {
                // item 677
                return SALAT;
            } else {
                // item 6680002
                if (_sw6680000_ === "exception") {
                    // item 678
                    return EGG;
                } else {
                    // item 6680003
                    if (_sw6680000_ === "failure") {
                        // item 679
                        return PINK;
                    } else {
                        // item 369
                        return "white";
                    }
                }
            }
        } else {
            // item 369
            return "white";
        }
    }
}

function itemColor(item) {
    // item 393
    if (item.selected) {
        // item 392
        return "yellow";
    } else {
        // item 396
        return "black";
    }
}

function liana(input, args, expected) {
    // item 888
    var src = args[0];
    var dst = args[1];
    var type = args[2];
    // item 886
    var result = diagramAction(
    	input,
    	function(editor) {
    		var method = editor.test[type];
    		makeSocket(editor, method, src, dst);
    		editor.test.transplantLiana(editor, 10000);
    	},
    	expected
    );
    // item 889
    return result;
}

function makeEditor() {
    // item 786
    var fontName = Config.FONT_FAMILY
    var fontSize = 16;
    // item 1089
    gClipboard = {}
    // item 1017
    var canvas = document.getElementById("dummyCanvas")
    var over = document.getElementById("dummyOver")
    // item 614
    var persistence = new FakePersistence();
    
    var items = new ItemsModule(translate);
    Drakon.setItems(items);
    
    var view = new ViewWidget(window, document, canvas, over);
    var canvas = new Canvas(window, document);
    var editor = new Editor(canvas, persistence, items, translate);
    // item 785
    canvas.setFont(fontName, fontSize);
    // item 1088
    editor.setCallback("getClipboard", getClipboard)
    editor.setCallback("getClipboardType", getClipboardType)
    editor.setCallback("copyToClipboard", copyToClipboard)
    // item 615
    return editor;
}

function makeSocket(editor, action, src, dst) {
    // item 881
    var socket = { id: dst, type: "liana", action: action, name: "test" };
    editor.canvas.sockets[10000] = socket;
    editor.test.selectItem(editor, src);
    editor.transplantSource = src;
}

function moveHor(input, args, expected) {
    // item 1132
    var itemId = args[0]
    var dx = args[1]
    // item 1134
    var result = diagramAction(
    	input,
    	function(editor) {
    		moveItem(editor, itemId, dx, 0)
    	},
    	expected
    )
    // item 1135
    return result
}

function moveItem(editor, itemId, dx, dy) {
    // item 1140
    dy = parseInt(dy)
    dx = parseInt(dx)
    // item 1141
    editor.redraw()
    // item 1136
    editor.startVisualDrag(itemId)
    // item 1139
    var box = new Utils.Box(0, 0, 10, 10)
    // item 1137
    editor.visualDrag(dx, dy, box)
    // item 1138
    editor.endVisualDrag()
}

function moveVer(input, args, expected) {
    // item 1119
    var itemId = args[0]
    var dy = args[1]
    // item 1121
    var result = diagramAction(
    	input,
    	function(editor) {
    		moveItem(editor, itemId, 0, dy)
    	},
    	expected
    )
    // item 1122
    return result
}

function objectsEqual(key, leftValue, rightValue) {
    // item 717
    if ((typeof leftValue == "object") && (typeof rightValue == "object")) {
        // item 732
        if (setsDeepEqual(leftValue, rightValue)) {
            // item 730
            return true;
        } else {
            // item 734
            console.log(
            	"different object values for key:",
            	key,
            	leftValue,
            	rightValue
            );
            // item 735
            return false;
        }
    } else {
        // item 736
        if (leftValue == rightValue) {
            // item 739
            return true;
        } else {
            // item 740
            console.log(
            	"different simple values for key:",
            	key,
            	leftValue,
            	rightValue
            );
            // item 741
            return false;
        }
    }
}

function parseArguments(args) {
    // item 835
    var argList = [];
    // item 836
    if (args) {
        // item 840
        var args2 = args.replace(
        	/\^/g,
        	"\n"
        );
        // item 839
        argList = args2.split(",").map(
        	function(arg) {
        		return arg.trim();
        	}
        );
    }
    // item 841
    return argList;
}

function pullFromServer(self) {
    // item 334
    
    var fixtures = [
    {
    	id: "g2--n1",
    	diagram: "",
    	action: "a1",
    	args: "",
    	expected: "e1"
    },
    {
    	id: "g1--n1",
    	diagram: "",
    	action: "a345",
    	args: "",
    	expected: "e2"
    },
    {
    	id: "g1--n2",
    	diagram: "",
    	action: "ACTION",
    	args: "",
    	expected: "eee3"
    }
    ];
    // item 338
    
    self.injection.$http({
    	method: "GET",
    	url: "/api/diatest"
    }).then(
    	function(data) {
    		console.log("GET successful", data);
    		setFixtures(self, data.data.fixtures);
    	},
    	function(data) {
    		console.log("GET returned error", data);
    	}
    );
    // item 302
    //setFixtures(db, fixtures);
}

function pushToServer(self, oldId, id, fixture) {
    // item 336
    var copy = Utils.copyObject(fixture);
    delete copy.oldId;
    delete copy.name;
    delete copy.group;
    delete copy.actual;
    delete copy.status;
    delete copy.error;
    // item 307
    var data = {
    	oldId: oldId,
    	id: id,
    	fixture: copy
    };
    // item 320
    console.log("push", data);
    // item 340
    self.injection.$http({
    	method: "POST",
    	url: "/api/diatest",
    	data: data
    }).then(
    	function(data) {
    		console.log("POST successful");
    	},
    	function(data) {
    		console.log("POST returned error", data);
    	}
    );
}

function putFixture(self, id, fixture) {
    // item 354
    self.fixtures[id] = fixture;
}

function read(self, id) {
    // item 71
    if (id in self.fixtures) {
        // item 51
        return Utils.copyObject(
        	self.fixtures[id]
        );
    } else {
        // item 74
        throw "Fixture '" + id + "' not found";
    }
}

function rebuildList(self) {
    // item 91
    var groups = {};
    // item 1190001
    var _ind119 = 0;
    var _col119 = self.fixtures;
    var _keys119 = Object.keys(_col119); 
    var _len119 = _keys119.length;
    while (true) {
        // item 1190002
        if (_ind119 < _len119) {
            
        } else {
            break;
        }
        // item 1190004
        var id = _keys119[_ind119]; var fixture = _col119[id];
        // item 121
        var group = getOrCreateGroup(
        	groups,
        	fixture.group
        );
        // item 122
        group.members.push(fixture);
        // item 1190003
        _ind119++;
    }
    // item 1270001
    var _ind127 = 0;
    var _col127 = groups;
    var _keys127 = Object.keys(_col127); 
    var _len127 = _keys127.length;
    while (true) {
        // item 1270002
        if (_ind127 < _len127) {
            
        } else {
            break;
        }
        // item 1270004
        var name = _keys127[_ind127]; var group = _col127[name];
        // item 129
        group.members.sort(byName);
        // item 1270003
        _ind127++;
    }
    // item 145
    var groupList = Utils.objectValues(groups);
    // item 146
    groupList.sort(byName);
    // item 147
    var result = [];
    // item 1490001
    var _ind149 = 0;
    var _col149 = groupList;
    var _len149 = _col149.length;
    while (true) {
        // item 1490002
        if (_ind149 < _len149) {
            
        } else {
            break;
        }
        // item 1490004
        var group = _col149[_ind149];
        // item 151
        result.push({
        	name: group.name,
        	type: "group"
        });
        // item 1520001
        var _ind152 = 0;
        var _col152 = group.members;
        var _len152 = _col152.length;
        while (true) {
            // item 1520002
            if (_ind152 < _len152) {
                
            } else {
                break;
            }
            // item 1520004
            var fixture = _col152[_ind152];
            // item 154
            result.push({
            	name: fixture.name,
            	type: "fixture",
            	id: buildId(fixture)
            });
            // item 1520003
            _ind152++;
        }
        // item 1490003
        _ind149++;
    }
    // item 148
    self.list = result;
}

function remove(self, id) {
    // item 288
    if (id in self.fixtures) {
        // item 287
        delete self.fixtures[id];
        // item 317
        deleteFromServer(self, id);
        // item 286
        rebuildList(self);
    }
}

function renameBranch(input, args, expected) {
    // item 871
    var itemId = args[0];
    var text1 = args[1];
    var text2 = "";
    // item 875
    var content = new Utils.Content(
    	text1,
    	text2
    );
    // item 873
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.renameBranch(
    			editor,
    			itemId,
    			content
    		);
    	},
    	expected
    );
    // item 874
    return result;
}

function reportError(self, message) {
    // item 408
    self.status = message;
}

function reportFinishedTest(self, result) {
    var _sw4170000_ = 0;
    // item 4170000
    _sw4170000_ = result.status;
    // item 4170001
    if (_sw4170000_ === "success") {
        // item 425
        self.status = "Success";
        // item 514
        statusSuccess(self);
    } else {
        // item 4170002
        if (_sw4170000_ === "exception") {
            // item 427
            self.status = "Exception: " +
            	result.error;
            // item 515
            statusException(self);
        } else {
            // item 4170003
            if (_sw4170000_ === "failure") {
                
            } else {
                // item 4170004
                throw "Unexpected switch value: " + _sw4170000_;
            }
            // item 426
            self.status = "Failure";
            // item 516
            statusFailure(self);
        }
    }
    // item 414
    self.idle = true;
}

function run() {
    // item 595
    if (this.current) {
        // item 892
        if (this.saveTest()) {
            // item 11
            this.idle = false;
            this.runStatus = "Running single test...";
            this.overall = "white";
            // item 415
            var self = this;
            var callback = function() {
            	var fixture = self.current;
            	runSingleTest(fixture);
            	reportFinishedTest(self, fixture);
            }
            // item 416
            self.injection.$timeout(callback);
        }
    } else {
        // item 598
        this.status = "Nothing to do";
    }
}

function runAll() {
    // item 445
    buildTaskList(this);
    // item 446
    if (this.tests.lenght == 0) {
        // item 449
        this.idle = true;
        this.status = "No tests, nothing to do";
    } else {
        // item 15
        this.idle = false;
        this.runStatus = "Running all tests...";
        this.errorCount = 0;
        this.successCount = 0;
        this.exceptionCount = 0;
        this.interrupted = false;
        this.overall = "white";
        // item 450
        var self = this;
        var callback = function() {
        	runTestIteration(self);
        }
        // item 451
        self.injection.$timeout(callback);
    }
}

function runSingleTest(fixture) {
    // item 1037
    Config.DEF_ICON_WIDTH = 140
    Config.DEF_ICON_WIDTH_S = 80
    // item 570
    try {
    	runSingleTestCore(fixture);
    } catch (ex) {
    	fixture.status = "exception";
    	fixture.error = ex.toString();
    }
}

function runSingleTestCore(fixture) {
    // item 1113
    CallTrace.reset()
    // item 548
    if (fixture.action) {
        // item 562
        var actionName = fixture.action.trim();
        // item 563
        if (actionName) {
            // item 402
            var action = findAction(actionName);
            // item 544
            if (action) {
                // item 557
                var argList = parseArguments(
                	fixture.args
                );
                // item 666
                fixture.error = "";
                // item 552
                var result = action(
                	fixture.diagram,
                	argList,
                	fixture.expected
                );
                // item 658
                fixture.actual = result.actual;
                // item 553
                if (result.success) {
                    // item 555
                    fixture.status = "success";
                } else {
                    // item 667
                    fixture.error = result.error;
                    // item 556
                    fixture.status = "failure";
                }
            } else {
                // item 547
                throw "Action '" + fixture.action + "' not found";
            }
        } else {
            // item 551
            throw "Action not set";
        }
    } else {
        // item 551
        throw "Action not set";
    }
}

function runTestIteration(self) {
    var _sw5300000_ = 0;
    // item 522
    if ((self.nextTest < self.tests.length) && (!(self.interrupted))) {
        // item 528
        var item = self.tests[self.nextTest];
        var fixture = self.fixtures[item.id];
        self.nextTest++;
        // item 529
        runSingleTest(fixture);
        // item 5300000
        _sw5300000_ = fixture.status;
        // item 5300001
        if (_sw5300000_ === "success") {
            // item 537
            self.successCount++;
        } else {
            // item 5300002
            if (_sw5300000_ === "exception") {
                // item 539
                self.exceptionCount++;
            } else {
                // item 5300003
                if (_sw5300000_ === "failure") {
                    
                } else {
                    // item 5300004
                    throw "Unexpected switch value: " + _sw5300000_;
                }
                // item 538
                self.errorCount++;
            }
        }
        // item 541
        updateOverall(self);
        // item 542
        var callback = function() {
        	runTestIteration(self);
        }
        // item 543
        self.injection.$timeout(callback, 10);
    } else {
        // item 526
        buildResultMessage(self);
        // item 525
        self.idle = true;
    }
}

function saveTest() {
    // item 262
    var fixture = this.current;
    // item 28
    var error = findFixtureError(
    	fixture
    );
    // item 256
    if (error) {
        // item 259
        reportError(this, error);
        // item 891
        return false;
    } else {
        // item 261
        write(
        	this,
        	fixture.oldId,
        	fixture
        );
        // item 260
        this.status = "";
        // item 890
        return true;
    }
}

function selectFixture(item) {
    // item 370
    deselectFixtures(this);
    // item 359
    item.selected = true;
    // item 278
    this.current = read(this, item.id);
}

function setFixtures(self, fixtures) {
    // item 331
    self.fixtures = {};
    // item 3260001
    var _ind326 = 0;
    var _col326 = fixtures;
    var _len326 = _col326.length;
    while (true) {
        // item 3260002
        if (_ind326 < _len326) {
            
        } else {
            break;
        }
        // item 3260004
        var fixture = _col326[_ind326];
        // item 328
        var id = idToGroupName(fixture);
        // item 355
        putFixture(self, id, fixture);
        // item 3260003
        _ind326++;
    }
    // item 330
    rebuildList(self);
}

function setItemText(input, args, expected) {
    // item 846
    var itemId = args[0];
    var text1 = args[1];
    var text2 = args[2];
    // item 850
    var content = new Utils.Content(
    	text1,
    	text2
    );
    // item 848
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.setItemText(
    			editor,
    			itemId,
    			content
    		);
    	},
    	expected
    );
    // item 849
    return result;
}

function setItemWidth(input, args, expected) {
    // item 826
    var itemId = args[0];
    var width = args[1];
    // item 828
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.setItemWidth(
    			itemId,
    			width
    		);
    	},
    	expected
    );
    // item 829
    return result;
}

function setTestDiagram(editor, source) {
    // item 633
    var diagram = JSON.parse(source);
    var d2 = Utils.sanitizeDiagram(diagram);
    editor.loadDiagram(d2);
    // item 767
    editor.autoSizeIcons();
}

function setsDeepEqual(left, right) {
    // item 686
    var leftKeys = Object.keys(left);
    var rightKeys = Object.keys(right);
    var leftLength = leftKeys.length;
    var rightLength = rightKeys.length;
    // item 687
    if (leftLength == rightLength) {
        // item 6920001
        var i = 0;
        while (true) {
            // item 6920002
            if (i < leftLength) {
                
            } else {
                // item 695
                return true;
            }
            // item 694
            var leftKey = leftKeys[i];
            var rightKey = rightKeys[i];
            // item 696
            if (leftKey in right) {
                
            } else {
                // item 699
                console.log(
                	"left key not present in right:",
                	leftKey,
                	right
                );
                // item 690
                return false;
            }
            // item 700
            if (rightKey in left) {
                
            } else {
                // item 703
                console.log(
                	"right key not present in left:",
                	rightKey,
                	left
                );
                // item 690
                return false;
            }
            // item 704
            var leftValue = left[leftKey];
            var rightValue = right[leftKey];
            // item 742
            if (objectsEqual(leftKey, leftValue, rightValue)) {
                
            } else {
                // item 690
                return false;
            }
            // item 6920003
            i++;
        }
    } else {
        // item 691
        console.log(
        	"different sizes:",
        	leftLength,
        	rightLength,
        	leftKeys,
        	rightKeys
        );
        // item 690
        return false;
    }
}

function statusException(self) {
    // item 505
    self.overall = EGG;
}

function statusFailure(self) {
    // item 511
    self.overall = PINK;
}

function statusSuccess(self) {
    // item 498
    self.overall = SALAT;
}

function stop() {
    // item 33
    this.interrupted = true;
}

function toBack(input, args, expected) {
    // item 1102
    var itemId = args[0];
    // item 1104
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.toBack(
    			editor,
    			itemId
    		);
    	},
    	expected
    );
    // item 1105
    return result;
}

function toFront(input, args, expected) {
    // item 1094
    var itemId = args[0];
    // item 1096
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.toFront(
    			editor,
    			itemId
    		);
    	},
    	expected
    );
    // item 1097
    return result;
}

function toPrimitive(input, args, expected) {
    // item 783
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.toPrimitive(editor);
    	},
    	expected
    );
    // item 784
    return result;
}

function toSilhouette(input, args, expected) {
    // item 776
    var result = diagramAction(
    	input,
    	function(editor) {
    		editor.test.toSilhouette(editor);
    	},
    	expected
    );
    // item 777
    return result;
}

function translate(text) {
    // item 10230001
    if (text === "DIA_YES") {
        // item 1036
        return "Yes"
    } else {
        // item 10230002
        if (text === "DIA_NO") {
            // item 1035
            return "No"
        } else {
            // item 10230003
            if (text === "DIA_END") {
                // item 1034
                return "End"
            } else {
                // item 1033
                return text
            }
        }
    }
}

function updateOverall(self) {
    // item 485
    if (self.errorCount == 0) {
        // item 488
        if (self.exceptionCount == 0) {
            // item 499
            statusSuccess(self);
        } else {
            // item 512
            statusException(self);
        }
    } else {
        // item 513
        statusFailure(self);
    }
}

function write(self, oldId, fixture) {
    // item 96
    if (oldId in self.fixtures) {
        // item 92
        delete self.fixtures[oldId];
    }
    // item 69
    var id = buildId(fixture);
    fixture.oldId = id;
    var copy = Utils.copyObject(fixture);
    // item 70
    putFixture(self, id, copy);
    // item 318
    pushToServer(self, oldId, id, copy);
    // item 75
    rebuildList(self);
    // item 3810001
    var _ind381 = 0;
    var _col381 = self.list;
    var _len381 = _col381.length;
    while (true) {
        // item 3810002
        if (_ind381 < _len381) {
            
        } else {
            break;
        }
        // item 3810004
        var item = _col381[_ind381];
        // item 383
        if (item.id == id) {
            // item 386
            item.selected = true;
            break;
        }
        // item 3810003
        _ind381++;
    }
}


app.controller(
	"DiaTestCtrl",
	["$http", "$location", "$routeParams", "$timeout",
	function($http, $location, $routeParams, $timeout) {
		var self = this;
		var injection = {
			$http: $http,
			$location: $location,
			$routeParams: $routeParams,
			$timeout: $timeout
		};
		DiaTestCtrl(self, injection);
}]);

})();
