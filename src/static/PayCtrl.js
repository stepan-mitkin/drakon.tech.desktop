function PayCtrl(translate, prices, user) {

var CURRENCY = "EUR"

var globals = {
	productId: "extended",
	remaining: 0,
	user: user
}

var self = this

// Autogenerated with DRAKON Editor 1.32


function calculatePayment(numUsers, productId, oldLicense, pricing, now) {
    // item 64
    var result = {}
    // item 85
    var users = parseInt(numUsers)
    var limits = pricing.products[productId]
    // item 121
    var months = limits.periodMon
    var price = limits.price
    // item 290
    result.price = price
    // item 70
    if (isNaN(users)) {
        // item 72
        result.error = "ERR_NUM_USERS_SPECIFY"
    } else {
        // item 73
        if (users >= limits.minUsers) {
            // item 77
            if (users <= limits.maxUsers) {
                // item 60
                var sum = roundCents(
                	price * users * months
                )
                // item 65
                var period = Utils.monthsToSecs(months)
                 + Utils.daysToSecs(1)
                // item 102
                result.sum = sum
                result.period = period
                // item 491
                var mvaRate = pricing.mva || 0
                var withoutMva = 0
                // item 87
                if ((oldLicense) && (!(oldLicense.productId == "basic"))) {
                    // item 130
                    var left = takePositive(
                    	oldLicense.expiry - now
                    )
                    // item 446
                    var oldPeriod = oldLicense.period || left
                    var oldSum = oldLicense.sum || 0
                    // item 93
                    var remainingValue = left / oldPeriod	* oldSum
                    remainingValue = roundCents(remainingValue)
                    // item 101
                    result.remainingValue = remainingValue
                    result.effectiveStart = now
                    withoutMva = takePositive(sum - remainingValue)
                } else {
                    // item 105
                    result.remainingValue = 0
                    result.effectiveStart = now
                    withoutMva = sum
                }
                // item 129
                result.expiry = result.effectiveStart
                 + period
                // item 493
                result.mva = mvaRate * withoutMva
                result.total = withoutMva + result.mva
            } else {
                // item 571
                result.error = "ERR_NUM_USERS_TOO_LARGE"
            }
        } else {
            // item 570
            result.error = "ERR_NUM_USERS_TOO_LITTLE"
        }
    }
    // item 69
    return result
}

function changeUsers(users) {
    // item 286
    globals.users = parseInt(users)
    // item 457
    globals.team_users = globals.users
    // item 287
    showTeam()
}

function confirmDataToFields(data) {
    // item 334
    var fields = {}
    // item 333
    fields.product = translate(data.product_name)
    fields.maxDiagrams = printMaxLimit(data.max_diagrams)
    fields.maxSpaces = printMaxLimit(data.max_spaces)
    fields.expiry = Utils.localizeDate(data.expiry, translate)
    fields.price = printAmount(data.price)
    fields.users = data.users
    fields.sum = printAmount(data.sum)
    fields.remaining = printAmount(data.remaining_value)
    fields.total = printAmount(data.total)
    fields.mva = printAmount(data.mva)
    // item 335
    return fields
}

function getProductName() {
    // item 201
    var product = globals.search.product
    // item 202
    if ((product) && ((product === "team") || (product === "extended"))) {
        // item 214
        return product
    } else {
        // item 205
        return null
    }
}

function hideCardNumber(number) {
    // item 409
    if (number) {
        // item 404
        var head = number.length - 4
        // item 405
        if (head > 0) {
            // item 403
            return Array(head).join("X") + x.substring(head)
        } else {
            // item 408
            return number
        }
    } else {
        // item 408
        return number
    }
}

function init(searchString) {
    // item 174
    globals.search = Utils.parseSearch(searchString)
    // item 216
    globals.productId = getProductName()
    // item 484
    var orderRef = null
    // item 481
    if (globals.search.action == "completed") {
        // item 485
        orderRef = globals.search.orderRef
    }
    // item 577
    if (globals.search.ref) {
        // item 580
        gReferer = decodeURIComponent(
        	globals.search.ref
        )
    }
    // item 188
    showStartCore(globals.productId, orderRef)
}

function onCardCancel() {
    // item 426
    self.view.showScreen("choose")
}

function onCardError(data) {
    // item 379
    self.view.hideWorking()
    // item 376
    var onOk = function() {
    	self.view.showScreen("choose")
    }
    // item 378
    var message = translate("ERR_ERROR")
    // item 377
    self.view.showOneButton(
    	message,
    	"OK",
    	onOk
    )
}

function onCardPay(type, number, year, month, cvv2, firstName, lastName) {
    // item 410
    var hidden = hideCardNumber(card)
    // item 411
    CallTrace.add(
    	"ctrl.onCardPay",
    	[type, hidden]
    )
    // item 412
    var data = {
    	number: number,
    	type: type,
    	expire_month: month,
    	expire_year: year,
    	cvv2: cvv2,
    	first_name: firstName,
    	last_name: lastName,
    	trans_id: globals.trans_id
    }
    // item 448
    var onSuccess = function(data) {
    	self.view.hideWorking()
    	self.view.showSuccess(data)
    }
    // item 450
    self.view.showWorking()
    // item 420
    self.view.beginPay(
    	data,
    	onSuccess,
    	onConfirmFreeError
    )
}

function onChooseContinue(coupon) {
    // item 358
    CallTrace.add(
    	"ctrl.onChooseContinue",
    	[coupon]
    )
    // item 302
    if (coupon) {
        // item 305
        coupon = coupon.trim()
        // item 306
        if (coupon) {
            // item 434
            self.view.showWorking()
            // item 323
            self.view.beginUseCoupon(
            	coupon,
            	onCouponSuccess,
            	onCouponError
            )
        } else {
            // item 433
            self.view.showWorking()
            // item 362
            self.view.beginPx2Start(
            	globals.productId,
            	globals.users,
            	onPx2StartSuccess,
            	onCardError
            )
        }
    } else {
        // item 433
        self.view.showWorking()
        // item 362
        self.view.beginPx2Start(
        	globals.productId,
        	globals.users,
        	onPx2StartSuccess,
        	onCardError
        )
    }
}

function onConfirmCancel() {
    // item 432
    self.view.showScreen("choose")
}

function onConfirmFree() {
    // item 359
    CallTrace.add(
    	"ctrl.onConfirmFree",
    	[globals.trans_id]
    )
    // item 473
    var onSuccess = function(data) {
    	self.view.hideWorking()
    	self.view.showSuccess(data)
    }
    // item 449
    self.view.showWorking()
    // item 350
    self.view.beginFree(
    	globals.trans_id,
    	onSuccess,
    	onConfirmFreeError
    )
}

function onConfirmFreeError(data) {
    // item 419
    self.view.showError("ERR_ERROR", "ERR_PAYMENT_FAILED")
}

function onConfirmPay() {
    // item 361
    CallTrace.add(
    	"ctrl.onConfirmPay",
    	[]
    )
    // item 474
    if (prices.paysys == "payex") {
        // item 480
        var payment = {
        	trans_id: globals.trans_id
        }
        // item 479
        var onSuccess = function(data) {
        	self.view.redirect(data.redirect)
        }
        // item 478
        self.view.showWorking()
        // item 477
        self.view.beginPayexCreate(
        	payment,
        	onSuccess,
        	onConfirmFreeError
        )
    } else {
        // item 445
        var nameId = prices.products[globals.productId].name
        var productName = translate(nameId)
        // item 392
        var fields = {
        	users: globals.users,
        	product: productName,
        	total: printAmount(globals.total)
        }
        // item 355
        self.view.showCard(fields)
    }
}

function onCouponError(data) {
    // item 325
    self.view.hideWorking()
    // item 320
    var onOk = function() {
    	self.view.showScreen("choose")
    }
    // item 322
    var message = translate("ERR_COUPON_FAIL")
    // item 321
    self.view.showOneButton(
    	message,
    	"OK",
    	onOk
    )
}

function onCouponSuccess(data) {
    // item 569
    self.view.hideWorking()
    self.view.showSuccess(data)
}

function onLicenseReceived(data, urlProductId) {
    var _sw2460000_ = 0;
    // item 470
    var productId = urlProductId || data.product_id
    // item 582
    if (productId == "trial") {
        // item 585
        productId = "team"
    }
    // item 229
    var license = {
    	productId: data.product_id,
    	users : data.limits.max_users,
    	sum: data.sum,
    	expiry: data.expiry,
    	period: data.period
    }
    // item 456
    globals.team_users = license.users
    // item 227
    self.view.hideWorking()
    self.view.showScreen("choose")
    // item 230
    var now = Utils.timeNow()
    // item 245
    globals.productId = productId
    globals.now = now
    globals.oldLicense = license
    // item 451
    if (globals.productId == "basic") {
        // item 454
        globals.productId = "extended"
    }
    // item 288
    self.view.showProduct(globals.productId)
    // item 2460000
    _sw2460000_ = globals.productId;
    // item 2460001
    if (_sw2460000_ === "extended") {
        // item 260
        globals.users = 1
        // item 254
        showExtended()
    } else {
        // item 2460002
        if (_sw2460000_ === "team") {
            
        } else {
            // item 2460003
            throw "Unexpected switch value: " + _sw2460000_;
        }
        // item 261
        if (license.productId == "team") {
            // item 265
            globals.users = license.users
        } else {
            // item 264
            globals.users = prices.products.team.minUsers
        }
        // item 255
        showTeam()
    }
}

function onLogon(data) {
    // item 360
    CallTrace.add(
    	"ctrl.onLogon",
    	[data]
    )
    // item 219
    self.view.hideWorking()
    // item 192
    globals.user = {
    	id: data.id,
    	name: data.name
    }
    // item 581
    showStartCore(globals.productId, null)
}

function onPx2StartSuccess(data) {
    // item 551
    self.view.showWorking()
    // item 552
    self.view.redirect(data.redirect)
}

function printAmount(amount) {
    // item 455
    return Utils.printAmount(
    	amount,
    	prices.currency
    )
}

function printMaxLimit(value) {
    // item 341
    if (value >= 10000) {
        // item 344
        return translate("MES_UNLIMITED")
    } else {
        // item 345
        return value.toString()
    }
}

function px2CalculatePayment(numUsers, productId, pricing) {
    // item 512
    var result = {
    	errorDetails: ""
    }
    // item 527
    var users = parseInt(numUsers)
    var limits = pricing.products[productId]
    // item 516
    if (isNaN(users)) {
        // item 517
        result.error = "ERR_NUM_USERS_SPECIFY"
    } else {
        // item 518
        if (users >= limits.minUsers) {
            // item 522
            if (users <= limits.maxUsers) {
                // item 567
                var price = limits.price
                // item 568
                result.price = price
                // item 545
                var mvaRate = pricing.mva || 0
                // item 508
                var total = roundCents(
                	price * users
                )
                // item 535
                result.sum = roundCentsDown(
                	total / (1 + mvaRate)
                )
                // item 546
                result.mva = roundCents(total - result.sum)
                result.total = total
            } else {
                // item 525
                result.error = "ERR_NUM_USERS_TOO_LARGE"
                result.errorDetails = limits.maxUsers
            }
        } else {
            // item 521
            result.error = "ERR_NUM_USERS_TOO_LITTLE"
            result.errorDetails = limits.minUsers
        }
    }
    // item 515
    return result
}

function roundCents(amount) {
    // item 99
    var result = Math.round(amount * 100) / 100
    // item 100
    return result
}

function roundCentsDown(amount) {
    // item 565
    var result = Math.floor(amount * 100) / 100
    // item 566
    return result
}

function roundCentsUp(amount) {
    // item 558
    var result = Math.ceil(amount * 100) / 100
    // item 559
    return result
}

function setProduct(productId) {
    // item 388
    if (productId == "extended") {
        // item 391
        globals.users = 1
    } else {
        // item 386
        globals.users = Math.max(
        	globals.team_users,
        	prices.products.team.minUsers
        )
    }
    // item 387
    globals.productId = productId
}

function showExtended() {
    // item 236
    var newLicense = px2CalculatePayment(
    	1,
    	"extended",
    	prices
    )
    // item 439
    globals.total = newLicense.total
    // item 258
    self.view.showExtended(
    	printAmount(newLicense.price),
    	printAmount(0),
    	printAmount(0),
    	printAmount(newLicense.mva),
    	printAmount(newLicense.total)
    )
}

function showProduct(productId) {
    var _sw2780000_ = 0;
    // item 277
    setProduct(productId)
    // item 2780000
    _sw2780000_ = globals.productId;
    // item 2780001
    if (_sw2780000_ === "extended") {
        // item 284
        showExtended()
    } else {
        // item 2780002
        if (_sw2780000_ === "team") {
            
        } else {
            // item 2780003
            throw "Unexpected switch value: " + _sw2780000_;
        }
        // item 285
        showTeam()
    }
}

function showStart() {
    // item 472
    showStartCore(null, null)
}

function showStartCore(urlProductId, orderRef) {
    // item 461
    if (globals.user.id) {
        // item 465
        self.view.setUser(globals.user.name)
        // item 466
        self.view.showWorking()
        // item 486
        if (orderRef) {
            // item 488
            var onSuccess = function(data) {
            	self.view.hideWorking()
            	self.view.showSuccess(data)
            }
            // item 489
            self.view.beginCompletePayEx(
            	orderRef,
            	onSuccess,
            	onConfirmFreeError
            )
        } else {
            // item 471
            var onSuccess = function(data) {
            	onLicenseReceived(data, urlProductId)
            }
            // item 467
            self.view.beginGetLicense(
            	onSuccess
            )
        }
    } else {
        // item 464
        self.view.showTwoButtons(
        	translate("MES_YOU_NOT_LOGGED"),
        	translate("MES_LOGIN"),
        	function() { self.view.showScreen("login") },
        	translate("MES_SIGNUP"),
        	function() { self.view.showScreen("signup") }
        )
    }
}

function showTeam() {
    // item 256
    var newLicense = px2CalculatePayment(
    	globals.users,
    	"team",
    	prices
    )
    // item 572
    var error = ""
    // item 573
    if (newLicense.error) {
        // item 576
        error = translate(newLicense.error)
         + newLicense.errorDetails
    }
    // item 438
    globals.total = newLicense.total
    // item 257
    self.view.showTeam(
    	globals.users,
    	printAmount(newLicense.price),
    	printAmount(0),
    	printAmount(0),
    	printAmount(newLicense.mva),
    	printAmount(newLicense.total),
    	error
    )
}

function takePositive(number) {
    // item 127
    return Math.max(0, number)
}


this.calculatePayment = calculatePayment
this.onLogon = onLogon
this.init = init
this.showStart = showStart
this.changeUsers = changeUsers
this.showProduct = showProduct
this.onChooseContinue = onChooseContinue
this.onConfirmFree = onConfirmFree
this.onConfirmPay = onConfirmPay
this.onCardPay = onCardPay
this.onCardCancel = onCardCancel
this.onConfirmCancel = onConfirmCancel
this.px2CalculatePayment = px2CalculatePayment
}
